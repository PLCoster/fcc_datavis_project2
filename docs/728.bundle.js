"use strict";(self.webpackChunkfcc_datavis_project2=self.webpackChunkfcc_datavis_project2||[]).push([[728],{728:(t,n,e)=>{function r(t,n){return null==t||null==n?NaN:t<n?-1:t>n?1:t>=n?0:NaN}function i(t,n){return null==t||null==n?NaN:n<t?-1:n>t?1:n>=t?0:NaN}function o(t){let n,e,o;function u(t,r,i=0,o=t.length){if(i<o){if(0!==n(r,r))return o;do{const n=i+o>>>1;e(t[n],r)<0?i=n+1:o=n}while(i<o)}return i}return 2!==t.length?(n=r,e=(n,e)=>r(t(n),e),o=(n,e)=>t(n)-e):(n=t===r||t===i?t:a,e=t,o=t),{left:u,center:function(t,n,e=0,r=t.length){const i=u(t,n,e,r-1);return i>e&&o(t[i-1],n)>-o(t[i],n)?i-1:i},right:function(t,r,i=0,o=t.length){if(i<o){if(0!==n(r,r))return o;do{const n=i+o>>>1;e(t[n],r)<=0?i=n+1:o=n}while(i<o)}return i}}}function a(){return 0}function u(t){return null===t?NaN:+t}function*c(t,n){if(void 0===n)for(let n of t)null!=n&&(n=+n)>=n&&(yield n);else{let e=-1;for(let r of t)null!=(r=n(r,++e,t))&&(r=+r)>=r&&(yield r)}}e.r(n),e.d(n,{Adder:()=>C,Delaunay:()=>Xu,FormatSpecifier:()=>Zf,InternMap:()=>D,InternSet:()=>R,Node:()=>gg,Voronoi:()=>Bu,ZoomTransform:()=>CT,active:()=>yo,arc:()=>pM,area:()=>wM,areaRadial:()=>PM,ascending:()=>r,autoType:()=>wc,axisBottom:()=>yn,axisLeft:()=>vn,axisRight:()=>gn,axisTop:()=>pn,bin:()=>dt,bisect:()=>d,bisectCenter:()=>h,bisectLeft:()=>l,bisectRight:()=>s,bisector:()=>o,blob:()=>ef,blur:()=>p,blur2:()=>g,blurImage:()=>y,brush:()=>Go,brushSelection:()=>$o,brushX:()=>Ho,brushY:()=>Xo,buffer:()=>of,chord:()=>oa,chordDirected:()=>ua,chordTranspose:()=>aa,cluster:()=>cg,color:()=>lr,contourDensity:()=>vu,contours:()=>du,count:()=>x,create:()=>Yw,creator:()=>Te,cross:()=>T,csv:()=>sf,csvFormat:()=>fc,csvFormatBody:()=>sc,csvFormatRow:()=>hc,csvFormatRows:()=>lc,csvFormatValue:()=>dc,csvParse:()=>uc,csvParseRows:()=>cc,cubehelix:()=>ru,cumsum:()=>S,curveBasis:()=>xA,curveBasisClosed:()=>MA,curveBasisOpen:()=>TA,curveBumpX:()=>qM,curveBumpY:()=>FM,curveBundle:()=>EA,curveCardinal:()=>CA,curveCardinalClosed:()=>zA,curveCardinalOpen:()=>RA,curveCatmullRom:()=>IA,curveCatmullRomClosed:()=>UA,curveCatmullRomOpen:()=>YA,curveLinear:()=>_M,curveLinearClosed:()=>jA,curveMonotoneX:()=>KA,curveMonotoneY:()=>QA,curveNatural:()=>nT,curveStep:()=>rT,curveStepAfter:()=>oT,curveStepBefore:()=>iT,descending:()=>i,deviation:()=>k,difference:()=>Kt,disjoint:()=>Qt,dispatch:()=>An,drag:()=>Ju,dragDisable:()=>He,dragEnable:()=>Xe,dsv:()=>ff,dsvFormat:()=>oc,easeBack:()=>Zc,easeBackIn:()=>Vc,easeBackInOut:()=>Zc,easeBackOut:()=>Wc,easeBounce:()=>Hc,easeBounceIn:()=>$c,easeBounceInOut:()=>Xc,easeBounceOut:()=>Hc,easeCircle:()=>Lc,easeCircleIn:()=>Bc,easeCircleInOut:()=>Lc,easeCircleOut:()=>Yc,easeCubic:()=>lo,easeCubicIn:()=>fo,easeCubicInOut:()=>lo,easeCubicOut:()=>so,easeElastic:()=>Jc,easeElasticIn:()=>Qc,easeElasticInOut:()=>tf,easeElasticOut:()=>Jc,easeExp:()=>Uc,easeExpIn:()=>Ic,easeExpInOut:()=>Uc,easeExpOut:()=>Oc,easeLinear:()=>Ac,easePoly:()=>Cc,easePolyIn:()=>kc,easePolyInOut:()=>Cc,easePolyOut:()=>Nc,easeQuad:()=>Ec,easeQuadIn:()=>Tc,easeQuadInOut:()=>Ec,easeQuadOut:()=>Sc,easeSin:()=>qc,easeSinIn:()=>Dc,easeSinInOut:()=>qc,easeSinOut:()=>Rc,every:()=>Ht,extent:()=>N,fcumsum:()=>z,filter:()=>Gt,flatGroup:()=>j,flatRollup:()=>$,forceCenter:()=>bf,forceCollide:()=>zf,forceLink:()=>qf,forceManyBody:()=>Yf,forceRadial:()=>Lf,forceSimulation:()=>Bf,forceX:()=>jf,forceY:()=>$f,format:()=>ns,formatDefaultLocale:()=>as,formatLocale:()=>os,formatPrefix:()=>es,formatSpecifier:()=>Wf,fsum:()=>P,geoAlbers:()=>Mp,geoAlbersUsa:()=>Ap,geoArea:()=>sl,geoAzimuthalEqualArea:()=>kp,geoAzimuthalEqualAreaRaw:()=>Ep,geoAzimuthalEquidistant:()=>Cp,geoAzimuthalEquidistantRaw:()=>Np,geoBounds:()=>Hl,geoCentroid:()=>rh,geoCircle:()=>ph,geoClipAntimeridian:()=>Th,geoClipCircle:()=>Sh,geoClipExtent:()=>Rh,geoClipRectangle:()=>Dh,geoConicConformal:()=>Fp,geoConicConformalRaw:()=>qp,geoConicEqualArea:()=>wp,geoConicEqualAreaRaw:()=>xp,geoConicEquidistant:()=>Bp,geoConicEquidistantRaw:()=>Up,geoContains:()=>Kh,geoDistance:()=>Lh,geoEqualEarth:()=>Gp,geoEqualEarthRaw:()=>Xp,geoEquirectangular:()=>Op,geoEquirectangularRaw:()=>Ip,geoGnomonic:()=>Wp,geoGnomonicRaw:()=>Vp,geoGraticule:()=>td,geoGraticule10:()=>nd,geoIdentity:()=>Zp,geoInterpolate:()=>ed,geoLength:()=>Uh,geoMercator:()=>zp,geoMercatorRaw:()=>Pp,geoNaturalEarth1:()=>Qp,geoNaturalEarth1Raw:()=>Kp,geoOrthographic:()=>tg,geoOrthographicRaw:()=>Jp,geoPath:()=>op,geoProjection:()=>_p,geoProjectionMutator:()=>bp,geoRotation:()=>lh,geoStereographic:()=>eg,geoStereographicRaw:()=>ng,geoStream:()=>Bs,geoTransform:()=>ap,geoTransverseMercator:()=>ig,geoTransverseMercatorRaw:()=>rg,gray:()=>Fa,greatest:()=>mt,greatestIndex:()=>It,group:()=>B,groupSort:()=>nt,groups:()=>Y,hcl:()=>Ha,hierarchy:()=>sg,histogram:()=>dt,hsl:()=>Ar,html:()=>vf,image:()=>hf,index:()=>G,indexes:()=>V,interpolate:()=>Zr,interpolateArray:()=>Lr,interpolateBasis:()=>Cr,interpolateBasisClosed:()=>Pr,interpolateBlues:()=>pw,interpolateBrBG:()=>Sx,interpolateBuGn:()=>$x,interpolateBuPu:()=>Xx,interpolateCividis:()=>Tw,interpolateCool:()=>kw,interpolateCubehelix:()=>Ey,interpolateCubehelixDefault:()=>Sw,interpolateCubehelixLong:()=>ky,interpolateDate:()=>$r,interpolateDiscrete:()=>py,interpolateGnBu:()=>Vx,interpolateGreens:()=>yw,interpolateGreys:()=>_w,interpolateHcl:()=>Ay,interpolateHclLong:()=>Ty,interpolateHsl:()=>my,interpolateHslLong:()=>xy,interpolateHue:()=>gy,interpolateInferno:()=>Uw,interpolateLab:()=>wy,interpolateMagma:()=>Ow,interpolateNumber:()=>Hr,interpolateNumberArray:()=>Br,interpolateObject:()=>Xr,interpolateOrRd:()=>Zx,interpolateOranges:()=>Aw,interpolatePRGn:()=>kx,interpolatePiYG:()=>Cx,interpolatePlasma:()=>Bw,interpolatePuBu:()=>tw,interpolatePuBuGn:()=>Qx,interpolatePuOr:()=>zx,interpolatePuRd:()=>ew,interpolatePurples:()=>mw,interpolateRainbow:()=>Cw,interpolateRdBu:()=>Rx,interpolateRdGy:()=>Fx,interpolateRdPu:()=>iw,interpolateRdYlBu:()=>Ox,interpolateRdYlGn:()=>Bx,interpolateReds:()=>ww,interpolateRgb:()=>Fr,interpolateRgbBasis:()=>Or,interpolateRgbBasisClosed:()=>Ur,interpolateRound:()=>yy,interpolateSinebow:()=>Rw,interpolateSpectral:()=>Lx,interpolateString:()=>Wr,interpolateTransformCss:()=>Ci,interpolateTransformSvg:()=>Pi,interpolateTurbo:()=>qw,interpolateViridis:()=>Iw,interpolateWarm:()=>Ew,interpolateYlGn:()=>cw,interpolateYlGnBu:()=>aw,interpolateYlOrBr:()=>sw,interpolateYlOrRd:()=>hw,interpolateZoom:()=>_y,interrupt:()=>Ai,intersection:()=>Jt,interval:()=>ET,isoFormat:()=>AT,isoParse:()=>ST,json:()=>pf,lab:()=>Ia,lch:()=>$a,least:()=>qt,leastIndex:()=>Ft,line:()=>xM,lineRadial:()=>CM,link:()=>BM,linkHorizontal:()=>YM,linkRadial:()=>jM,linkVertical:()=>LM,local:()=>jw,map:()=>Vt,matcher:()=>Cn,max:()=>pt,maxIndex:()=>gt,mean:()=>St,median:()=>Et,medianIndex:()=>kt,merge:()=>Nt,min:()=>yt,minIndex:()=>vt,mode:()=>Ct,namespace:()=>Xn,namespaces:()=>Hn,nice:()=>lt,now:()=>fi,pack:()=>Og,packEnclose:()=>wg,packSiblings:()=>Fg,pairs:()=>Pt,partition:()=>$g,path:()=>ga,permute:()=>K,pie:()=>TM,piecewise:()=>Ny,pointRadial:()=>zM,pointer:()=>Qr,pointers:()=>Hw,polygonArea:()=>Py,polygonCentroid:()=>zy,polygonContains:()=>Fy,polygonHull:()=>qy,polygonLength:()=>Iy,precisionFixed:()=>us,precisionPrefix:()=>cs,precisionRound:()=>fs,quadtree:()=>Af,quantile:()=>xt,quantileIndex:()=>Mt,quantileSorted:()=>wt,quantize:()=>Cy,quickselect:()=>_t,radialArea:()=>PM,radialLine:()=>CM,randomBates:()=>$y,randomBernoulli:()=>Gy,randomBeta:()=>Zy,randomBinomial:()=>Ky,randomCauchy:()=>Jy,randomExponential:()=>Hy,randomGamma:()=>Wy,randomGeometric:()=>Vy,randomInt:()=>By,randomIrwinHall:()=>jy,randomLcg:()=>rv,randomLogNormal:()=>Ly,randomLogistic:()=>tv,randomNormal:()=>Yy,randomPareto:()=>Xy,randomPoisson:()=>nv,randomUniform:()=>Uy,randomWeibull:()=>Qy,range:()=>Dt,rank:()=>Rt,reduce:()=>Wt,reverse:()=>Zt,rgb:()=>gr,ribbon:()=>Sa,ribbonArrow:()=>Ea,rollup:()=>H,rollups:()=>X,scaleBand:()=>cv,scaleDiverging:()=>cx,scaleDivergingLog:()=>fx,scaleDivergingPow:()=>lx,scaleDivergingSqrt:()=>hx,scaleDivergingSymlog:()=>sx,scaleIdentity:()=>Mv,scaleImplicit:()=>av,scaleLinear:()=>wv,scaleLog:()=>zv,scaleOrdinal:()=>uv,scalePoint:()=>sv,scalePow:()=>Yv,scaleQuantile:()=>Xv,scaleQuantize:()=>Gv,scaleRadial:()=>Hv,scaleSequential:()=>nx,scaleSequentialLog:()=>ex,scaleSequentialPow:()=>ix,scaleSequentialQuantile:()=>ax,scaleSequentialSqrt:()=>ox,scaleSequentialSymlog:()=>rx,scaleSqrt:()=>Lv,scaleSymlog:()=>Fv,scaleThreshold:()=>Vv,scaleTime:()=>Km,scaleUtc:()=>Qm,scan:()=>Ot,schemeAccent:()=>gx,schemeBlues:()=>dw,schemeBrBG:()=>Tx,schemeBuGn:()=>jx,schemeBuPu:()=>Hx,schemeCategory10:()=>px,schemeDark2:()=>yx,schemeGnBu:()=>Gx,schemeGreens:()=>gw,schemeGreys:()=>vw,schemeOrRd:()=>Wx,schemeOranges:()=>Mw,schemePRGn:()=>Ex,schemePaired:()=>vx,schemePastel1:()=>_x,schemePastel2:()=>bx,schemePiYG:()=>Nx,schemePuBu:()=>Jx,schemePuBuGn:()=>Kx,schemePuOr:()=>Px,schemePuRd:()=>nw,schemePurples:()=>bw,schemeRdBu:()=>Dx,schemeRdGy:()=>qx,schemeRdPu:()=>rw,schemeRdYlBu:()=>Ix,schemeRdYlGn:()=>Ux,schemeReds:()=>xw,schemeSet1:()=>mx,schemeSet2:()=>xx,schemeSet3:()=>wx,schemeSpectral:()=>Yx,schemeTableau10:()=>Mx,schemeYlGn:()=>uw,schemeYlGnBu:()=>ow,schemeYlOrBr:()=>fw,schemeYlOrRd:()=>lw,select:()=>Be,selectAll:()=>Xw,selection:()=>Ue,selector:()=>Sn,selectorAll:()=>Nn,shuffle:()=>Ut,shuffler:()=>Bt,some:()=>Xt,sort:()=>Q,stack:()=>sT,stackOffsetDiverging:()=>hT,stackOffsetExpand:()=>lT,stackOffsetNone:()=>aT,stackOffsetSilhouette:()=>dT,stackOffsetWiggle:()=>pT,stackOrderAppearance:()=>gT,stackOrderAscending:()=>vT,stackOrderDescending:()=>bT,stackOrderInsideOut:()=>mT,stackOrderNone:()=>uT,stackOrderReverse:()=>xT,stratify:()=>Zg,style:()=>re,subset:()=>rn,sum:()=>Yt,superset:()=>nn,svg:()=>_f,symbol:()=>vA,symbolAsterisk:()=>HM,symbolCircle:()=>XM,symbolCross:()=>GM,symbolDiamond:()=>ZM,symbolDiamond2:()=>KM,symbolPlus:()=>QM,symbolSquare:()=>JM,symbolSquare2:()=>tA,symbolStar:()=>iA,symbolTriangle:()=>aA,symbolTriangle2:()=>cA,symbolWye:()=>dA,symbolX:()=>pA,symbols:()=>gA,symbolsFill:()=>gA,symbolsStroke:()=>yA,text:()=>uf,thresholdFreedmanDiaconis:()=>At,thresholdScott:()=>Tt,thresholdSturges:()=>ht,tickFormat:()=>mv,tickIncrement:()=>ft,tickStep:()=>st,ticks:()=>ct,timeDay:()=>v_,timeDays:()=>__,timeFormat:()=>Sb,timeFormatDefaultLocale:()=>Gm,timeFormatLocale:()=>Ab,timeFriday:()=>T_,timeFridays:()=>z_,timeHour:()=>p_,timeHours:()=>g_,timeInterval:()=>r_,timeMillisecond:()=>o_,timeMilliseconds:()=>a_,timeMinute:()=>l_,timeMinutes:()=>h_,timeMonday:()=>x_,timeMondays:()=>k_,timeMonth:()=>q_,timeMonths:()=>F_,timeParse:()=>Eb,timeSaturday:()=>S_,timeSaturdays:()=>D_,timeSecond:()=>c_,timeSeconds:()=>f_,timeSunday:()=>m_,timeSundays:()=>E_,timeThursday:()=>A_,timeThursdays:()=>P_,timeTickInterval:()=>mb,timeTicks:()=>bb,timeTuesday:()=>w_,timeTuesdays:()=>N_,timeWednesday:()=>M_,timeWednesdays:()=>C_,timeWeek:()=>m_,timeWeeks:()=>E_,timeYear:()=>O_,timeYears:()=>U_,timeout:()=>vi,timer:()=>hi,timerFlush:()=>di,transition:()=>ao,transpose:()=>Lt,tree:()=>oy,treemap:()=>sy,treemapBinary:()=>ly,treemapDice:()=>jg,treemapResquarify:()=>dy,treemapSlice:()=>ay,treemapSliceDice:()=>hy,treemapSquarify:()=>fy,tsv:()=>lf,tsvFormat:()=>vc,tsvFormatBody:()=>_c,tsvFormatRow:()=>mc,tsvFormatRows:()=>bc,tsvFormatValue:()=>xc,tsvParse:()=>gc,tsvParseRows:()=>yc,union:()=>on,utcDay:()=>G_,utcDays:()=>V_,utcFormat:()=>kb,utcFriday:()=>nb,utcFridays:()=>cb,utcHour:()=>$_,utcHours:()=>H_,utcMillisecond:()=>o_,utcMilliseconds:()=>a_,utcMinute:()=>Y_,utcMinutes:()=>L_,utcMonday:()=>K_,utcMondays:()=>ib,utcMonth:()=>lb,utcMonths:()=>hb,utcParse:()=>Nb,utcSaturday:()=>eb,utcSaturdays:()=>fb,utcSecond:()=>c_,utcSeconds:()=>f_,utcSunday:()=>Z_,utcSundays:()=>rb,utcThursday:()=>tb,utcThursdays:()=>ub,utcTickInterval:()=>_b,utcTicks:()=>vb,utcTuesday:()=>Q_,utcTuesdays:()=>ob,utcWednesday:()=>J_,utcWednesdays:()=>ab,utcWeek:()=>Z_,utcWeeks:()=>rb,utcYear:()=>pb,utcYears:()=>gb,variance:()=>E,window:()=>Jn,xml:()=>yf,zip:()=>$t,zoom:()=>YT,zoomIdentity:()=>PT,zoomTransform:()=>zT});const f=o(r),s=f.right,l=f.left,h=o(u).center,d=s;function p(t,n){if(!((n=+n)>=0))throw new RangeError("invalid r");let e=t.length;if(!((e=Math.floor(e))>=0))throw new RangeError("invalid length");if(!e||!n)return t;const r=m(n),i=t.slice();return r(t,i,0,e,1),r(i,t,0,e,1),r(t,i,0,e,1),t}const g=v(m),y=v((function(t){const n=m(t);return(t,e,r,i,o)=>{n(t,e,0+(r<<=2),0+(i<<=2),o<<=2),n(t,e,r+1,i+1,o),n(t,e,r+2,i+2,o),n(t,e,r+3,i+3,o)}}));function v(t){return function(n,e,r=e){if(!((e=+e)>=0))throw new RangeError("invalid rx");if(!((r=+r)>=0))throw new RangeError("invalid ry");let{data:i,width:o,height:a}=n;if(!((o=Math.floor(o))>=0))throw new RangeError("invalid width");if(!((a=Math.floor(void 0!==a?a:i.length/o))>=0))throw new RangeError("invalid height");if(!o||!a||!e&&!r)return n;const u=e&&t(e),c=r&&t(r),f=i.slice();return u&&c?(_(u,f,i,o,a),_(u,i,f,o,a),_(u,f,i,o,a),b(c,i,f,o,a),b(c,f,i,o,a),b(c,i,f,o,a)):u?(_(u,i,f,o,a),_(u,f,i,o,a),_(u,i,f,o,a)):c&&(b(c,i,f,o,a),b(c,f,i,o,a),b(c,i,f,o,a)),n}}function _(t,n,e,r,i){for(let o=0,a=r*i;o<a;)t(n,e,o,o+=r,1)}function b(t,n,e,r,i){for(let o=0,a=r*i;o<r;++o)t(n,e,o,o+a,r)}function m(t){const n=Math.floor(t);if(n===t)return function(t){const n=2*t+1;return(e,r,i,o,a)=>{if(!((o-=a)>=i))return;let u=t*r[i];const c=a*t;for(let t=i,n=i+c;t<n;t+=a)u+=r[Math.min(o,t)];for(let t=i,f=o;t<=f;t+=a)u+=r[Math.min(o,t+c)],e[t]=u/n,u-=r[Math.max(i,t-c)]}}(t);const e=t-n,r=2*t+1;return(t,i,o,a,u)=>{if(!((a-=u)>=o))return;let c=n*i[o];const f=u*n,s=f+u;for(let t=o,n=o+f;t<n;t+=u)c+=i[Math.min(a,t)];for(let n=o,l=a;n<=l;n+=u)c+=i[Math.min(a,n+f)],t[n]=(c+e*(i[Math.max(o,n-s)]+i[Math.min(a,n+s)]))/r,c-=i[Math.max(o,n-f)]}}function x(t,n){let e=0;if(void 0===n)for(let n of t)null!=n&&(n=+n)>=n&&++e;else{let r=-1;for(let i of t)null!=(i=n(i,++r,t))&&(i=+i)>=i&&++e}return e}function w(t){return 0|t.length}function M(t){return!(t>0)}function A(t){return"object"!=typeof t||"length"in t?t:Array.from(t)}function T(...t){const n="function"==typeof t[t.length-1]&&function(t){return n=>t(...n)}(t.pop()),e=(t=t.map(A)).map(w),r=t.length-1,i=new Array(r+1).fill(0),o=[];if(r<0||e.some(M))return o;for(;;){o.push(i.map(((n,e)=>t[e][n])));let a=r;for(;++i[a]===e[a];){if(0===a)return n?o.map(n):o;i[a--]=0}}}function S(t,n){var e=0,r=0;return Float64Array.from(t,void 0===n?t=>e+=+t||0:i=>e+=+n(i,r++,t)||0)}function E(t,n){let e,r=0,i=0,o=0;if(void 0===n)for(let n of t)null!=n&&(n=+n)>=n&&(e=n-i,i+=e/++r,o+=e*(n-i));else{let a=-1;for(let u of t)null!=(u=n(u,++a,t))&&(u=+u)>=u&&(e=u-i,i+=e/++r,o+=e*(u-i))}if(r>1)return o/(r-1)}function k(t,n){const e=E(t,n);return e?Math.sqrt(e):e}function N(t,n){let e,r;if(void 0===n)for(const n of t)null!=n&&(void 0===e?n>=n&&(e=r=n):(e>n&&(e=n),r<n&&(r=n)));else{let i=-1;for(let o of t)null!=(o=n(o,++i,t))&&(void 0===e?o>=o&&(e=r=o):(e>o&&(e=o),r<o&&(r=o)))}return[e,r]}class C{constructor(){this._partials=new Float64Array(32),this._n=0}add(t){const n=this._partials;let e=0;for(let r=0;r<this._n&&r<32;r++){const i=n[r],o=t+i,a=Math.abs(t)<Math.abs(i)?t-(o-i):i-(o-t);a&&(n[e++]=a),t=o}return n[e]=t,this._n=e+1,this}valueOf(){const t=this._partials;let n,e,r,i=this._n,o=0;if(i>0){for(o=t[--i];i>0&&(n=o,e=t[--i],o=n+e,r=e-(o-n),!r););i>0&&(r<0&&t[i-1]<0||r>0&&t[i-1]>0)&&(e=2*r,n=o+e,e==n-o&&(o=n))}return o}}function P(t,n){const e=new C;if(void 0===n)for(let n of t)(n=+n)&&e.add(n);else{let r=-1;for(let i of t)(i=+n(i,++r,t))&&e.add(i)}return+e}function z(t,n){const e=new C;let r=-1;return Float64Array.from(t,void 0===n?t=>e.add(+t||0):i=>e.add(+n(i,++r,t)||0))}class D extends Map{constructor(t,n=O){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:n}}),null!=t)for(const[n,e]of t)this.set(n,e)}get(t){return super.get(q(this,t))}has(t){return super.has(q(this,t))}set(t,n){return super.set(F(this,t),n)}delete(t){return super.delete(I(this,t))}}class R extends Set{constructor(t,n=O){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:n}}),null!=t)for(const n of t)this.add(n)}has(t){return super.has(q(this,t))}add(t){return super.add(F(this,t))}delete(t){return super.delete(I(this,t))}}function q({_intern:t,_key:n},e){const r=n(e);return t.has(r)?t.get(r):e}function F({_intern:t,_key:n},e){const r=n(e);return t.has(r)?t.get(r):(t.set(r,e),e)}function I({_intern:t,_key:n},e){const r=n(e);return t.has(r)&&(e=t.get(r),t.delete(r)),e}function O(t){return null!==t&&"object"==typeof t?t.valueOf():t}function U(t){return t}function B(t,...n){return Z(t,U,U,n)}function Y(t,...n){return Z(t,Array.from,U,n)}function L(t,n){for(let e=1,r=n.length;e<r;++e)t=t.flatMap((t=>t.pop().map((([n,e])=>[...t,n,e]))));return t}function j(t,...n){return L(Y(t,...n),n)}function $(t,n,...e){return L(X(t,n,...e),e)}function H(t,n,...e){return Z(t,U,n,e)}function X(t,n,...e){return Z(t,Array.from,n,e)}function G(t,...n){return Z(t,U,W,n)}function V(t,...n){return Z(t,Array.from,W,n)}function W(t){if(1!==t.length)throw new Error("duplicate key");return t[0]}function Z(t,n,e,r){return function t(i,o){if(o>=r.length)return e(i);const a=new D,u=r[o++];let c=-1;for(const t of i){const n=u(t,++c,i),e=a.get(n);e?e.push(t):a.set(n,[t])}for(const[n,e]of a)a.set(n,t(e,o));return n(a)}(t,0)}function K(t,n){return Array.from(n,(n=>t[n]))}function Q(t,...n){if("function"!=typeof t[Symbol.iterator])throw new TypeError("values is not iterable");t=Array.from(t);let[e]=n;if(e&&2!==e.length||n.length>1){const r=Uint32Array.from(t,((t,n)=>n));return n.length>1?(n=n.map((n=>t.map(n))),r.sort(((t,e)=>{for(const r of n){const n=tt(r[t],r[e]);if(n)return n}}))):(e=t.map(e),r.sort(((t,n)=>tt(e[t],e[n])))),K(t,r)}return t.sort(J(e))}function J(t=r){if(t===r)return tt;if("function"!=typeof t)throw new TypeError("compare is not a function");return(n,e)=>{const r=t(n,e);return r||0===r?r:(0===t(e,e))-(0===t(n,n))}}function tt(t,n){return(null==t||!(t>=t))-(null==n||!(n>=n))||(t<n?-1:t>n?1:0)}function nt(t,n,e){return(2!==n.length?Q(H(t,n,e),(([t,n],[e,i])=>r(n,i)||r(t,e))):Q(B(t,e),(([t,e],[i,o])=>n(e,o)||r(t,i)))).map((([t])=>t))}var et=Array.prototype,rt=et.slice;function it(t){return()=>t}et.map;var ot=Math.sqrt(50),at=Math.sqrt(10),ut=Math.sqrt(2);function ct(t,n,e){var r,i,o,a,u=-1;if(e=+e,(t=+t)==(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(a=ft(t,n,e))||!isFinite(a))return[];if(a>0){let e=Math.round(t/a),r=Math.round(n/a);for(e*a<t&&++e,r*a>n&&--r,o=new Array(i=r-e+1);++u<i;)o[u]=(e+u)*a}else{a=-a;let e=Math.round(t*a),r=Math.round(n*a);for(e/a<t&&++e,r/a>n&&--r,o=new Array(i=r-e+1);++u<i;)o[u]=(e+u)/a}return r&&o.reverse(),o}function ft(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=ot?10:o>=at?5:o>=ut?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=ot?10:o>=at?5:o>=ut?2:1)}function st(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=ot?i*=10:o>=at?i*=5:o>=ut&&(i*=2),n<t?-i:i}function lt(t,n,e){let r;for(;;){const i=ft(t,n,e);if(i===r||0===i||!isFinite(i))return[t,n];i>0?(t=Math.floor(t/i)*i,n=Math.ceil(n/i)*i):i<0&&(t=Math.ceil(t*i)/i,n=Math.floor(n*i)/i),r=i}}function ht(t){return Math.ceil(Math.log(x(t))/Math.LN2)+1}function dt(){var t=U,n=N,e=ht;function r(r){Array.isArray(r)||(r=Array.from(r));var i,o,a,u=r.length,c=new Array(u);for(i=0;i<u;++i)c[i]=t(r[i],i,r);var f=n(c),s=f[0],l=f[1],h=e(c,s,l);if(!Array.isArray(h)){const t=l,e=+h;if(n===N&&([s,l]=lt(s,l,e)),(h=ct(s,l,e))[0]<=s&&(a=ft(s,l,e)),h[h.length-1]>=l)if(t>=l&&n===N){const t=ft(s,l,e);isFinite(t)&&(t>0?l=(Math.floor(l/t)+1)*t:t<0&&(l=(Math.ceil(l*-t)+1)/-t))}else h.pop()}for(var p=h.length;h[0]<=s;)h.shift(),--p;for(;h[p-1]>l;)h.pop(),--p;var g,y=new Array(p+1);for(i=0;i<=p;++i)(g=y[i]=[]).x0=i>0?h[i-1]:s,g.x1=i<p?h[i]:l;if(isFinite(a)){if(a>0)for(i=0;i<u;++i)null!=(o=c[i])&&s<=o&&o<=l&&y[Math.min(p,Math.floor((o-s)/a))].push(r[i]);else if(a<0)for(i=0;i<u;++i)if(null!=(o=c[i])&&s<=o&&o<=l){const t=Math.floor((s-o)*a);y[Math.min(p,t+(h[t]<=o))].push(r[i])}}else for(i=0;i<u;++i)null!=(o=c[i])&&s<=o&&o<=l&&y[d(h,o,0,p)].push(r[i]);return y}return r.value=function(n){return arguments.length?(t="function"==typeof n?n:it(n),r):t},r.domain=function(t){return arguments.length?(n="function"==typeof t?t:it([t[0],t[1]]),r):n},r.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?it(rt.call(t)):it(t),r):e},r}function pt(t,n){let e;if(void 0===n)for(const n of t)null!=n&&(e<n||void 0===e&&n>=n)&&(e=n);else{let r=-1;for(let i of t)null!=(i=n(i,++r,t))&&(e<i||void 0===e&&i>=i)&&(e=i)}return e}function gt(t,n){let e,r=-1,i=-1;if(void 0===n)for(const n of t)++i,null!=n&&(e<n||void 0===e&&n>=n)&&(e=n,r=i);else for(let o of t)null!=(o=n(o,++i,t))&&(e<o||void 0===e&&o>=o)&&(e=o,r=i);return r}function yt(t,n){let e;if(void 0===n)for(const n of t)null!=n&&(e>n||void 0===e&&n>=n)&&(e=n);else{let r=-1;for(let i of t)null!=(i=n(i,++r,t))&&(e>i||void 0===e&&i>=i)&&(e=i)}return e}function vt(t,n){let e,r=-1,i=-1;if(void 0===n)for(const n of t)++i,null!=n&&(e>n||void 0===e&&n>=n)&&(e=n,r=i);else for(let o of t)null!=(o=n(o,++i,t))&&(e>o||void 0===e&&o>=o)&&(e=o,r=i);return r}function _t(t,n,e=0,r=t.length-1,i){for(i=void 0===i?tt:J(i);r>e;){if(r-e>600){const o=r-e+1,a=n-e+1,u=Math.log(o),c=.5*Math.exp(2*u/3),f=.5*Math.sqrt(u*c*(o-c)/o)*(a-o/2<0?-1:1);_t(t,n,Math.max(e,Math.floor(n-a*c/o+f)),Math.min(r,Math.floor(n+(o-a)*c/o+f)),i)}const o=t[n];let a=e,u=r;for(bt(t,e,n),i(t[r],o)>0&&bt(t,e,r);a<u;){for(bt(t,a,u),++a,--u;i(t[a],o)<0;)++a;for(;i(t[u],o)>0;)--u}0===i(t[e],o)?bt(t,e,u):(++u,bt(t,u,r)),u<=n&&(e=u+1),n<=u&&(r=u-1)}return t}function bt(t,n,e){const r=t[n];t[n]=t[e],t[e]=r}function mt(t,n=r){let e,i=!1;if(1===n.length){let o;for(const a of t){const t=n(a);(i?r(t,o)>0:0===r(t,t))&&(e=a,o=t,i=!0)}}else for(const r of t)(i?n(r,e)>0:0===n(r,r))&&(e=r,i=!0);return e}function xt(t,n,e){if(r=(t=Float64Array.from(c(t,e))).length){if((n=+n)<=0||r<2)return yt(t);if(n>=1)return pt(t);var r,i=(r-1)*n,o=Math.floor(i),a=pt(_t(t,o).subarray(0,o+1));return a+(yt(t.subarray(o+1))-a)*(i-o)}}function wt(t,n,e=u){if(r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),a=+e(t[o],o,t);return a+(+e(t[o+1],o+1,t)-a)*(i-o)}}function Mt(t,n,e){if(r=(t=Float64Array.from(c(t,e))).length){if((n=+n)<=0||r<2)return vt(t);if(n>=1)return gt(t);var r,i=Math.floor((r-1)*n),o=_t(Uint32Array.from(t,((t,n)=>n)),i,0,r-1,((n,e)=>tt(t[n],t[e])));return mt(o.subarray(0,i+1),(n=>t[n]))}}function At(t,n,e){return Math.ceil((e-n)/(2*(xt(t,.75)-xt(t,.25))*Math.pow(x(t),-1/3)))}function Tt(t,n,e){return Math.ceil((e-n)*Math.cbrt(x(t))/(3.49*k(t)))}function St(t,n){let e=0,r=0;if(void 0===n)for(let n of t)null!=n&&(n=+n)>=n&&(++e,r+=n);else{let i=-1;for(let o of t)null!=(o=n(o,++i,t))&&(o=+o)>=o&&(++e,r+=o)}if(e)return r/e}function Et(t,n){return xt(t,.5,n)}function kt(t,n){return Mt(t,.5,n)}function Nt(t){return Array.from(function*(t){for(const n of t)yield*n}(t))}function Ct(t,n){const e=new D;if(void 0===n)for(let n of t)null!=n&&n>=n&&e.set(n,(e.get(n)||0)+1);else{let r=-1;for(let i of t)null!=(i=n(i,++r,t))&&i>=i&&e.set(i,(e.get(i)||0)+1)}let r,i=0;for(const[t,n]of e)n>i&&(i=n,r=t);return r}function Pt(t,n=zt){const e=[];let r,i=!1;for(const o of t)i&&e.push(n(r,o)),r=o,i=!0;return e}function zt(t,n){return[t,n]}function Dt(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}function Rt(t,n=r){if("function"!=typeof t[Symbol.iterator])throw new TypeError("values is not iterable");let e=Array.from(t);const i=new Float64Array(e.length);2!==n.length&&(e=e.map(n),n=r);const o=(t,r)=>n(e[t],e[r]);let a,u;return Uint32Array.from(e,((t,n)=>n)).sort(n===r?(t,n)=>tt(e[t],e[n]):J(o)).forEach(((t,n)=>{const e=o(t,void 0===a?t:a);e>=0?((void 0===a||e>0)&&(a=t,u=n),i[t]=u):i[t]=NaN})),i}function qt(t,n=r){let e,i=!1;if(1===n.length){let o;for(const a of t){const t=n(a);(i?r(t,o)<0:0===r(t,t))&&(e=a,o=t,i=!0)}}else for(const r of t)(i?n(r,e)<0:0===n(r,r))&&(e=r,i=!0);return e}function Ft(t,n=r){if(1===n.length)return vt(t,n);let e,i=-1,o=-1;for(const r of t)++o,(i<0?0===n(r,r):n(r,e)<0)&&(e=r,i=o);return i}function It(t,n=r){if(1===n.length)return gt(t,n);let e,i=-1,o=-1;for(const r of t)++o,(i<0?0===n(r,r):n(r,e)>0)&&(e=r,i=o);return i}function Ot(t,n){const e=Ft(t,n);return e<0?void 0:e}const Ut=Bt(Math.random);function Bt(t){return function(n,e=0,r=n.length){let i=r-(e=+e);for(;i;){const r=t()*i--|0,o=n[i+e];n[i+e]=n[r+e],n[r+e]=o}return n}}function Yt(t,n){let e=0;if(void 0===n)for(let n of t)(n=+n)&&(e+=n);else{let r=-1;for(let i of t)(i=+n(i,++r,t))&&(e+=i)}return e}function Lt(t){if(!(i=t.length))return[];for(var n=-1,e=yt(t,jt),r=new Array(e);++n<e;)for(var i,o=-1,a=r[n]=new Array(i);++o<i;)a[o]=t[o][n];return r}function jt(t){return t.length}function $t(){return Lt(arguments)}function Ht(t,n){if("function"!=typeof n)throw new TypeError("test is not a function");let e=-1;for(const r of t)if(!n(r,++e,t))return!1;return!0}function Xt(t,n){if("function"!=typeof n)throw new TypeError("test is not a function");let e=-1;for(const r of t)if(n(r,++e,t))return!0;return!1}function Gt(t,n){if("function"!=typeof n)throw new TypeError("test is not a function");const e=[];let r=-1;for(const i of t)n(i,++r,t)&&e.push(i);return e}function Vt(t,n){if("function"!=typeof t[Symbol.iterator])throw new TypeError("values is not iterable");if("function"!=typeof n)throw new TypeError("mapper is not a function");return Array.from(t,((e,r)=>n(e,r,t)))}function Wt(t,n,e){if("function"!=typeof n)throw new TypeError("reducer is not a function");const r=t[Symbol.iterator]();let i,o,a=-1;if(arguments.length<3){if(({done:i,value:e}=r.next()),i)return;++a}for(;({done:i,value:o}=r.next()),!i;)e=n(e,o,++a,t);return e}function Zt(t){if("function"!=typeof t[Symbol.iterator])throw new TypeError("values is not iterable");return Array.from(t).reverse()}function Kt(t,...n){t=new R(t);for(const e of n)for(const n of e)t.delete(n);return t}function Qt(t,n){const e=n[Symbol.iterator](),r=new R;for(const n of t){if(r.has(n))return!1;let t,i;for(;({value:t,done:i}=e.next())&&!i;){if(Object.is(n,t))return!1;r.add(t)}}return!0}function Jt(t,...n){t=new R(t),n=n.map(tn);t:for(const e of t)for(const r of n)if(!r.has(e)){t.delete(e);continue t}return t}function tn(t){return t instanceof R?t:new R(t)}function nn(t,n){const e=t[Symbol.iterator](),r=new Set;for(const t of n){const n=en(t);if(r.has(n))continue;let i,o;for(;({value:i,done:o}=e.next());){if(o)return!1;const t=en(i);if(r.add(t),Object.is(n,t))break}}return!0}function en(t){return null!==t&&"object"==typeof t?t.valueOf():t}function rn(t,n){return nn(n,t)}function on(...t){const n=new R;for(const e of t)for(const t of e)n.add(t);return n}function an(t){return t}var un=1e-6;function cn(t){return"translate("+t+",0)"}function fn(t){return"translate(0,"+t+")"}function sn(t){return n=>+t(n)}function ln(t,n){return n=Math.max(0,t.bandwidth()-2*n)/2,t.round()&&(n=Math.round(n)),e=>+t(e)+n}function hn(){return!this.__axis}function dn(t,n){var e=[],r=null,i=null,o=6,a=6,u=3,c="undefined"!=typeof window&&window.devicePixelRatio>1?0:.5,f=1===t||4===t?-1:1,s=4===t||2===t?"x":"y",l=1===t||3===t?cn:fn;function h(h){var d=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,p=null==i?n.tickFormat?n.tickFormat.apply(n,e):an:i,g=Math.max(o,0)+u,y=n.range(),v=+y[0]+c,_=+y[y.length-1]+c,b=(n.bandwidth?ln:sn)(n.copy(),c),m=h.selection?h.selection():h,x=m.selectAll(".domain").data([null]),w=m.selectAll(".tick").data(d,n).order(),M=w.exit(),A=w.enter().append("g").attr("class","tick"),T=w.select("line"),S=w.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),w=w.merge(A),T=T.merge(A.append("line").attr("stroke","currentColor").attr(s+"2",f*o)),S=S.merge(A.append("text").attr("fill","currentColor").attr(s,f*g).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),h!==m&&(x=x.transition(h),w=w.transition(h),T=T.transition(h),S=S.transition(h),M=M.transition(h).attr("opacity",un).attr("transform",(function(t){return isFinite(t=b(t))?l(t+c):this.getAttribute("transform")})),A.attr("opacity",un).attr("transform",(function(t){var n=this.parentNode.__axis;return l((n&&isFinite(n=n(t))?n:b(t))+c)}))),M.remove(),x.attr("d",4===t||2===t?a?"M"+f*a+","+v+"H"+c+"V"+_+"H"+f*a:"M"+c+","+v+"V"+_:a?"M"+v+","+f*a+"V"+c+"H"+_+"V"+f*a:"M"+v+","+c+"H"+_),w.attr("opacity",1).attr("transform",(function(t){return l(b(t)+c)})),T.attr(s+"2",f*o),S.attr(s,f*g).text(p),m.filter(hn).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),m.each((function(){this.__axis=b}))}return h.scale=function(t){return arguments.length?(n=t,h):n},h.ticks=function(){return e=Array.from(arguments),h},h.tickArguments=function(t){return arguments.length?(e=null==t?[]:Array.from(t),h):e.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:Array.from(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(i=t,h):i},h.tickSize=function(t){return arguments.length?(o=a=+t,h):o},h.tickSizeInner=function(t){return arguments.length?(o=+t,h):o},h.tickSizeOuter=function(t){return arguments.length?(a=+t,h):a},h.tickPadding=function(t){return arguments.length?(u=+t,h):u},h.offset=function(t){return arguments.length?(c=+t,h):c},h}function pn(t){return dn(1,t)}function gn(t){return dn(2,t)}function yn(t){return dn(3,t)}function vn(t){return dn(4,t)}var _n={value:()=>{}};function bn(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new mn(r)}function mn(t){this._=t}function xn(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function wn(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function Mn(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=_n,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}mn.prototype=bn.prototype={constructor:mn,on:function(t,n){var e,r=this._,i=xn(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<a;)if(e=(t=i[o]).type)r[e]=Mn(r[e],t.name,n);else if(null==n)for(e in r)r[e]=Mn(r[e],t.name,null);return this}for(;++o<a;)if((e=(t=i[o]).type)&&(e=wn(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new mn(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};const An=bn;function Tn(){}function Sn(t){return null==t?Tn:function(){return this.querySelector(t)}}function En(t){return null==t?[]:Array.isArray(t)?t:Array.from(t)}function kn(){return[]}function Nn(t){return null==t?kn:function(){return this.querySelectorAll(t)}}function Cn(t){return function(){return this.matches(t)}}function Pn(t){return function(n){return n.matches(t)}}var zn=Array.prototype.find;function Dn(){return this.firstElementChild}var Rn=Array.prototype.filter;function qn(){return Array.from(this.children)}function Fn(t){return new Array(t.length)}function In(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function On(t){return function(){return t}}function Un(t,n,e,r,i,o){for(var a,u=0,c=n.length,f=o.length;u<f;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new In(t,o[u]);for(;u<c;++u)(a=n[u])&&(i[u]=a)}function Bn(t,n,e,r,i,o,a){var u,c,f,s=new Map,l=n.length,h=o.length,d=new Array(l);for(u=0;u<l;++u)(c=n[u])&&(d[u]=f=a.call(c,c.__data__,u,n)+"",s.has(f)?i[u]=c:s.set(f,c));for(u=0;u<h;++u)f=a.call(t,o[u],u,o)+"",(c=s.get(f))?(r[u]=c,c.__data__=o[u],s.delete(f)):e[u]=new In(t,o[u]);for(u=0;u<l;++u)(c=n[u])&&s.get(d[u])===c&&(i[u]=c)}function Yn(t){return t.__data__}function Ln(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function jn(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}In.prototype={constructor:In,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var $n="http://www.w3.org/1999/xhtml";const Hn={svg:"http://www.w3.org/2000/svg",xhtml:$n,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function Xn(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),Hn.hasOwnProperty(n)?{space:Hn[n],local:t}:t}function Gn(t){return function(){this.removeAttribute(t)}}function Vn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Wn(t,n){return function(){this.setAttribute(t,n)}}function Zn(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function Kn(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function Qn(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function Jn(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function te(t){return function(){this.style.removeProperty(t)}}function ne(t,n,e){return function(){this.style.setProperty(t,n,e)}}function ee(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function re(t,n){return t.style.getPropertyValue(n)||Jn(t).getComputedStyle(t,null).getPropertyValue(n)}function ie(t){return function(){delete this[t]}}function oe(t,n){return function(){this[t]=n}}function ae(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function ue(t){return t.trim().split(/^|\s+/)}function ce(t){return t.classList||new fe(t)}function fe(t){this._node=t,this._names=ue(t.getAttribute("class")||"")}function se(t,n){for(var e=ce(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function le(t,n){for(var e=ce(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function he(t){return function(){se(this,t)}}function de(t){return function(){le(this,t)}}function pe(t,n){return function(){(n.apply(this,arguments)?se:le)(this,t)}}function ge(){this.textContent=""}function ye(t){return function(){this.textContent=t}}function ve(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function _e(){this.innerHTML=""}function be(t){return function(){this.innerHTML=t}}function me(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function xe(){this.nextSibling&&this.parentNode.appendChild(this)}function we(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Me(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===$n&&n.documentElement.namespaceURI===$n?n.createElement(t):n.createElementNS(e,t)}}function Ae(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function Te(t){var n=Xn(t);return(n.local?Ae:Me)(n)}function Se(){return null}function Ee(){var t=this.parentNode;t&&t.removeChild(this)}function ke(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function Ne(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function Ce(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function Pe(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.options);++i?n.length=i:delete this.__on}}}function ze(t,n,e){return function(){var r,i=this.__on,o=function(t){return function(n){t.call(this,n,this.__data__)}}(n);if(i)for(var a=0,u=i.length;a<u;++a)if((r=i[a]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=o,r.options=e),void(r.value=n);this.addEventListener(t.type,o,e),r={type:t.type,name:t.name,value:n,listener:o,options:e},i?i.push(r):this.__on=[r]}}function De(t,n,e){var r=Jn(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function Re(t,n){return function(){return De(this,t,n)}}function qe(t,n){return function(){return De(this,t,n.apply(this,arguments))}}fe.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Fe=[null];function Ie(t,n){this._groups=t,this._parents=n}function Oe(){return new Ie([[document.documentElement]],Fe)}Ie.prototype=Oe.prototype={constructor:Ie,select:function(t){"function"!=typeof t&&(t=Sn(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,u=n[i],c=u.length,f=r[i]=new Array(c),s=0;s<c;++s)(o=u[s])&&(a=t.call(o,o.__data__,s,u))&&("__data__"in o&&(a.__data__=o.__data__),f[s]=a);return new Ie(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return En(t.apply(this,arguments))}}(t):Nn(t);for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,u=n[o],c=u.length,f=0;f<c;++f)(a=u[f])&&(r.push(t.call(a,a.__data__,f,u)),i.push(a));return new Ie(r,i)},selectChild:function(t){return this.select(null==t?Dn:function(t){return function(){return zn.call(this.children,t)}}("function"==typeof t?t:Pn(t)))},selectChildren:function(t){return this.selectAll(null==t?qn:function(t){return function(){return Rn.call(this.children,t)}}("function"==typeof t?t:Pn(t)))},filter:function(t){"function"!=typeof t&&(t=Cn(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,c=r[i]=[],f=0;f<u;++f)(o=a[f])&&t.call(o,o.__data__,f,a)&&c.push(o);return new Ie(r,this._parents)},data:function(t,n){if(!arguments.length)return Array.from(this,Yn);var e=n?Bn:Un,r=this._parents,i=this._groups;"function"!=typeof t&&(t=On(t));for(var o=i.length,a=new Array(o),u=new Array(o),c=new Array(o),f=0;f<o;++f){var s=r[f],l=i[f],h=l.length,d=Ln(t.call(s,s&&s.__data__,f,r)),p=d.length,g=u[f]=new Array(p),y=a[f]=new Array(p),v=c[f]=new Array(h);e(s,l,g,y,v,d,n);for(var _,b,m=0,x=0;m<p;++m)if(_=g[m]){for(m>=x&&(x=m+1);!(b=y[x])&&++x<p;);_._next=b||null}}return(a=new Ie(a,r))._enter=u,a._exit=c,a},enter:function(){return new Ie(this._enter||this._groups.map(Fn),this._parents)},exit:function(){return new Ie(this._exit||this._groups.map(Fn),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return"function"==typeof t?(r=t(r))&&(r=r.selection()):r=r.append(t+""),null!=n&&(i=n(i))&&(i=i.selection()),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=t.selection?t.selection():t,e=this._groups,r=n._groups,i=e.length,o=r.length,a=Math.min(i,o),u=new Array(i),c=0;c<a;++c)for(var f,s=e[c],l=r[c],h=s.length,d=u[c]=new Array(h),p=0;p<h;++p)(f=s[p]||l[p])&&(d[p]=f);for(;c<i;++c)u[c]=e[c];return new Ie(u,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=jn);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,u=e[o],c=u.length,f=i[o]=new Array(c),s=0;s<c;++s)(a=u[s])&&(f[s]=a);f.sort(n)}return new Ie(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){let t=0;for(const n of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=Xn(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?Vn:Gn:"function"==typeof n?e.local?Qn:Kn:e.local?Zn:Wn)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?te:"function"==typeof n?ee:ne)(t,n,null==e?"":e)):re(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?ie:"function"==typeof n?ae:oe)(t,n)):this.node()[t]},classed:function(t,n){var e=ue(t+"");if(arguments.length<2){for(var r=ce(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?pe:n?he:de)(e,n))},text:function(t){return arguments.length?this.each(null==t?ge:("function"==typeof t?ve:ye)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?_e:("function"==typeof t?me:be)(t)):this.node().innerHTML},raise:function(){return this.each(xe)},lower:function(){return this.each(we)},append:function(t){var n="function"==typeof t?t:Te(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:Te(t),r=null==n?Se:"function"==typeof n?n:Sn(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Ee)},clone:function(t){return this.select(t?Ne:ke)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=Ce(t+""),a=o.length;if(!(arguments.length<2)){for(u=n?ze:Pe,r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var c,f=0,s=u.length;f<s;++f)for(r=0,c=u[f];r<a;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?qe:Re)(t,n))},[Symbol.iterator]:function*(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r,i=t[n],o=0,a=i.length;o<a;++o)(r=i[o])&&(yield r)}};const Ue=Oe;function Be(t){return"string"==typeof t?new Ie([[document.querySelector(t)]],[document.documentElement]):new Ie([[t]],Fe)}const Ye={passive:!1},Le={capture:!0,passive:!1};function je(t){t.stopImmediatePropagation()}function $e(t){t.preventDefault(),t.stopImmediatePropagation()}function He(t){var n=t.document.documentElement,e=Be(t).on("dragstart.drag",$e,Le);"onselectstart"in n?e.on("selectstart.drag",$e,Le):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")}function Xe(t,n){var e=t.document.documentElement,r=Be(t).on("dragstart.drag",null);n&&(r.on("click.drag",$e,Le),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}function Ge(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function Ve(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function We(){}var Ze=.7,Ke=1/Ze,Qe="\\s*([+-]?\\d+)\\s*",Je="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",tr="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",nr=/^#([0-9a-f]{3,8})$/,er=new RegExp(`^rgb\\(${Qe},${Qe},${Qe}\\)$`),rr=new RegExp(`^rgb\\(${tr},${tr},${tr}\\)$`),ir=new RegExp(`^rgba\\(${Qe},${Qe},${Qe},${Je}\\)$`),or=new RegExp(`^rgba\\(${tr},${tr},${tr},${Je}\\)$`),ar=new RegExp(`^hsl\\(${Je},${tr},${tr}\\)$`),ur=new RegExp(`^hsla\\(${Je},${tr},${tr},${Je}\\)$`),cr={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function fr(){return this.rgb().formatHex()}function sr(){return this.rgb().formatRgb()}function lr(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=nr.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?hr(n):3===e?new yr(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?dr(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?dr(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=er.exec(t))?new yr(n[1],n[2],n[3],1):(n=rr.exec(t))?new yr(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=ir.exec(t))?dr(n[1],n[2],n[3],n[4]):(n=or.exec(t))?dr(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=ar.exec(t))?wr(n[1],n[2]/100,n[3]/100,1):(n=ur.exec(t))?wr(n[1],n[2]/100,n[3]/100,n[4]):cr.hasOwnProperty(t)?hr(cr[t]):"transparent"===t?new yr(NaN,NaN,NaN,0):null}function hr(t){return new yr(t>>16&255,t>>8&255,255&t,1)}function dr(t,n,e,r){return r<=0&&(t=n=e=NaN),new yr(t,n,e,r)}function pr(t){return t instanceof We||(t=lr(t)),t?new yr((t=t.rgb()).r,t.g,t.b,t.opacity):new yr}function gr(t,n,e,r){return 1===arguments.length?pr(t):new yr(t,n,e,null==r?1:r)}function yr(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function vr(){return`#${xr(this.r)}${xr(this.g)}${xr(this.b)}`}function _r(){const t=br(this.opacity);return`${1===t?"rgb(":"rgba("}${mr(this.r)}, ${mr(this.g)}, ${mr(this.b)}${1===t?")":`, ${t})`}`}function br(t){return isNaN(t)?1:Math.max(0,Math.min(1,t))}function mr(t){return Math.max(0,Math.min(255,Math.round(t)||0))}function xr(t){return((t=mr(t))<16?"0":"")+t.toString(16)}function wr(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Tr(t,n,e,r)}function Mr(t){if(t instanceof Tr)return new Tr(t.h,t.s,t.l,t.opacity);if(t instanceof We||(t=lr(t)),!t)return new Tr;if(t instanceof Tr)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,u=o-i,c=(o+i)/2;return u?(a=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=c<.5?o+i:2-o-i,a*=60):u=c>0&&c<1?0:a,new Tr(a,u,c,t.opacity)}function Ar(t,n,e,r){return 1===arguments.length?Mr(t):new Tr(t,n,e,null==r?1:r)}function Tr(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Sr(t){return(t=(t||0)%360)<0?t+360:t}function Er(t){return Math.max(0,Math.min(1,t||0))}function kr(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function Nr(t,n,e,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*n+(4-6*o+3*a)*e+(1+3*t+3*o-3*a)*r+a*i)/6}function Cr(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,u=r<n-1?t[r+2]:2*o-i;return Nr((e-r/n)*n,a,i,o,u)}}function Pr(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],a=t[(r+1)%n],u=t[(r+2)%n];return Nr((e-r/n)*n,i,o,a,u)}}Ge(We,lr,{copy(t){return Object.assign(new this.constructor,this,t)},displayable(){return this.rgb().displayable()},hex:fr,formatHex:fr,formatHex8:function(){return this.rgb().formatHex8()},formatHsl:function(){return Mr(this).formatHsl()},formatRgb:sr,toString:sr}),Ge(yr,gr,Ve(We,{brighter(t){return t=null==t?Ke:Math.pow(Ke,t),new yr(this.r*t,this.g*t,this.b*t,this.opacity)},darker(t){return t=null==t?Ze:Math.pow(Ze,t),new yr(this.r*t,this.g*t,this.b*t,this.opacity)},rgb(){return this},clamp(){return new yr(mr(this.r),mr(this.g),mr(this.b),br(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:vr,formatHex:vr,formatHex8:function(){return`#${xr(this.r)}${xr(this.g)}${xr(this.b)}${xr(255*(isNaN(this.opacity)?1:this.opacity))}`},formatRgb:_r,toString:_r})),Ge(Tr,Ar,Ve(We,{brighter(t){return t=null==t?Ke:Math.pow(Ke,t),new Tr(this.h,this.s,this.l*t,this.opacity)},darker(t){return t=null==t?Ze:Math.pow(Ze,t),new Tr(this.h,this.s,this.l*t,this.opacity)},rgb(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new yr(kr(t>=240?t-240:t+120,i,r),kr(t,i,r),kr(t<120?t+240:t-120,i,r),this.opacity)},clamp(){return new Tr(Sr(this.h),Er(this.s),Er(this.l),br(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const t=br(this.opacity);return`${1===t?"hsl(":"hsla("}${Sr(this.h)}, ${100*Er(this.s)}%, ${100*Er(this.l)}%${1===t?")":`, ${t})`}`}}));const zr=t=>()=>t;function Dr(t,n){return function(e){return t+e*n}}function Rr(t,n){var e=n-t;return e?Dr(t,e>180||e<-180?e-360*Math.round(e/360):e):zr(isNaN(t)?n:t)}function qr(t,n){var e=n-t;return e?Dr(t,e):zr(isNaN(t)?n:t)}const Fr=function t(n){var e=function(t){return 1==(t=+t)?qr:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):zr(isNaN(n)?e:n)}}(n);function r(t,n){var r=e((t=gr(t)).r,(n=gr(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=qr(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function Ir(t){return function(n){var e,r,i=n.length,o=new Array(i),a=new Array(i),u=new Array(i);for(e=0;e<i;++e)r=gr(n[e]),o[e]=r.r||0,a[e]=r.g||0,u[e]=r.b||0;return o=t(o),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=u(t),r+""}}}var Or=Ir(Cr),Ur=Ir(Pr);function Br(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(o){for(e=0;e<r;++e)i[e]=t[e]*(1-o)+n[e]*o;return i}}function Yr(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function Lr(t,n){return(Yr(n)?Br:jr)(t,n)}function jr(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(e=0;e<i;++e)o[e]=Zr(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}}function $r(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}}function Hr(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}}function Xr(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Zr(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}var Gr=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Vr=new RegExp(Gr.source,"g");function Wr(t,n){var e,r,i,o=Gr.lastIndex=Vr.lastIndex=0,a=-1,u=[],c=[];for(t+="",n+="";(e=Gr.exec(t))&&(r=Vr.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,c.push({i:a,x:Hr(e,r)})),o=Vr.lastIndex;return o<n.length&&(i=n.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)u[(e=c[r]).i]=e.x(t);return u.join("")})}function Zr(t,n){var e,r=typeof n;return null==n||"boolean"===r?zr(n):("number"===r?Hr:"string"===r?(e=lr(n))?(n=e,Fr):Wr:n instanceof lr?Fr:n instanceof Date?$r:Yr(n)?Br:Array.isArray(n)?jr:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Xr:Hr)(t,n)}function Kr(t){let n;for(;n=t.sourceEvent;)t=n;return t}function Qr(t,n){if(t=Kr(t),void 0===n&&(n=t.currentTarget),n){var e=n.ownerSVGElement||n;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(n.getScreenCTM().inverse())).x,r.y]}if(n.getBoundingClientRect){var i=n.getBoundingClientRect();return[t.clientX-i.left-n.clientLeft,t.clientY-i.top-n.clientTop]}}return[t.pageX,t.pageY]}var Jr,ti,ni=0,ei=0,ri=0,ii=0,oi=0,ai=0,ui="object"==typeof performance&&performance.now?performance:Date,ci="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function fi(){return oi||(ci(si),oi=ui.now()+ai)}function si(){oi=0}function li(){this._call=this._time=this._next=null}function hi(t,n,e){var r=new li;return r.restart(t,n,e),r}function di(){fi(),++ni;for(var t,n=Jr;n;)(t=oi-n._time)>=0&&n._call.call(void 0,t),n=n._next;--ni}function pi(){oi=(ii=ui.now())+ai,ni=ei=0;try{di()}finally{ni=0,function(){for(var t,n,e=Jr,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Jr=n);ti=t,yi(r)}(),oi=0}}function gi(){var t=ui.now(),n=t-ii;n>1e3&&(ai-=n,ii=t)}function yi(t){ni||(ei&&(ei=clearTimeout(ei)),t-oi>24?(t<1/0&&(ei=setTimeout(pi,t-ui.now()-ai)),ri&&(ri=clearInterval(ri))):(ri||(ii=ui.now(),ri=setInterval(gi,1e3)),ni=1,ci(pi)))}function vi(t,n,e){var r=new li;return n=null==n?0:+n,r.restart((e=>{r.stop(),t(e+n)}),n,e),r}li.prototype=hi.prototype={constructor:li,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?fi():+e)+(null==n?0:+n),this._next||ti===this||(ti?ti._next=this:Jr=this,ti=this),this._call=t,this._time=e,yi()},stop:function(){this._call&&(this._call=null,this._time=1/0,yi())}};var _i=An("start","end","cancel","interrupt"),bi=[];function mi(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(c){var f,s,l,h;if(1!==e.state)return u();for(f in i)if((h=i[f]).name===e.name){if(3===h.state)return vi(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[f]):+f<n&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[f])}if(vi((function(){3===e.state&&(e.state=4,e.timer.restart(a,e.delay,e.time),a(c))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(l=e.tween.length),f=0,s=-1;f<l;++f)(h=e.tween[f].value.call(t,t.__data__,e.index,e.group))&&(r[++s]=h);r.length=s+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=hi((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:_i,tween:bi,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function xi(t,n){var e=Mi(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function wi(t,n){var e=Mi(t,n);if(e.state>3)throw new Error("too late; already running");return e}function Mi(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function Ai(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}}var Ti,Si=180/Math.PI,Ei={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function ki(t,n,e,r,i,o){var a,u,c;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,c/=u),t*r<n*e&&(t=-t,n=-n,c=-c,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*Si,skewX:Math.atan(c)*Si,scaleX:a,scaleY:u}}function Ni(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],c=[];return o=t(o),a=t(a),function(t,r,i,o,a,u){if(t!==i||r!==o){var c=a.push("translate(",null,n,null,e);u.push({i:c-4,x:Hr(t,i)},{i:c-2,x:Hr(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,u,c),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Hr(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,u,c),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Hr(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,u,c),function(t,n,e,r,o,a){if(t!==e||n!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:Hr(t,e)},{i:u-2,x:Hr(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,c),o=a=null,function(t){for(var n,e=-1,r=c.length;++e<r;)u[(n=c[e]).i]=n.x(t);return u.join("")}}}var Ci=Ni((function(t){const n=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return n.isIdentity?Ei:ki(n.a,n.b,n.c,n.d,n.e,n.f)}),"px, ","px)","deg)"),Pi=Ni((function(t){return null==t?Ei:(Ti||(Ti=document.createElementNS("http://www.w3.org/2000/svg","g")),Ti.setAttribute("transform",t),(t=Ti.transform.baseVal.consolidate())?ki((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Ei)}),", ",")",")");function zi(t,n){var e,r;return function(){var i=wi(this,t),o=i.tween;if(o!==e)for(var a=0,u=(r=e=o).length;a<u;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}function Di(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=wi(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:n,value:e},c=0,f=i.length;c<f;++c)if(i[c].name===n){i[c]=u;break}c===f&&i.push(u)}o.tween=i}}function Ri(t,n,e){var r=t._id;return t.each((function(){var t=wi(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return Mi(t,r).value[n]}}function qi(t,n){var e;return("number"==typeof n?Hr:n instanceof lr?Fr:(e=lr(n))?(n=e,Fr):Wr)(t,n)}function Fi(t){return function(){this.removeAttribute(t)}}function Ii(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Oi(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=n(r=a,e)}}function Ui(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=n(r=a,e)}}function Bi(t,n,e){var r,i,o;return function(){var a,u,c=e(this);if(null!=c)return(a=this.getAttribute(t))===(u=c+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,c));this.removeAttribute(t)}}function Yi(t,n,e){var r,i,o;return function(){var a,u,c=e(this);if(null!=c)return(a=this.getAttributeNS(t.space,t.local))===(u=c+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,c));this.removeAttributeNS(t.space,t.local)}}function Li(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function ji(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function $i(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&ji(t,i)),e}return i._value=n,i}function Hi(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Li(t,i)),e}return i._value=n,i}function Xi(t,n){return function(){xi(this,t).delay=+n.apply(this,arguments)}}function Gi(t,n){return n=+n,function(){xi(this,t).delay=n}}function Vi(t,n){return function(){wi(this,t).duration=+n.apply(this,arguments)}}function Wi(t,n){return n=+n,function(){wi(this,t).duration=n}}function Zi(t,n){if("function"!=typeof n)throw new Error;return function(){wi(this,t).ease=n}}function Ki(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?xi:wi;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(n,e),a.on=i}}var Qi=Ue.prototype.constructor;function Ji(t){return function(){this.style.removeProperty(t)}}function to(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function no(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&to(t,o,e)),r}return o._value=n,o}function eo(t){return function(n){this.textContent=t.call(this,n)}}function ro(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&eo(r)),n}return r._value=t,r}var io=0;function oo(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function ao(t){return Ue().transition(t)}function uo(){return++io}var co=Ue.prototype;function fo(t){return t*t*t}function so(t){return--t*t*t+1}function lo(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}oo.prototype=ao.prototype={constructor:oo,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Sn(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,c,f=r[a],s=f.length,l=o[a]=new Array(s),h=0;h<s;++h)(u=f[h])&&(c=t.call(u,u.__data__,h,f))&&("__data__"in u&&(c.__data__=u.__data__),l[h]=c,mi(l[h],n,e,h,l,Mi(u,e)));return new oo(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Nn(t));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var c,f=r[u],s=f.length,l=0;l<s;++l)if(c=f[l]){for(var h,d=t.call(c,c.__data__,l,f),p=Mi(c,e),g=0,y=d.length;g<y;++g)(h=d[g])&&mi(h,n,e,g,d,p);o.push(d),a.push(c)}return new oo(o,a,n,e)},selectChild:co.selectChild,selectChildren:co.selectChildren,filter:function(t){"function"!=typeof t&&(t=Cn(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,c=r[i]=[],f=0;f<u;++f)(o=a[f])&&t.call(o,o.__data__,f,a)&&c.push(o);return new oo(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var c,f=n[u],s=e[u],l=f.length,h=a[u]=new Array(l),d=0;d<l;++d)(c=f[d]||s[d])&&(h[d]=c);for(;u<r;++u)a[u]=n[u];return new oo(a,this._parents,this._name,this._id)},selection:function(){return new Qi(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=uo(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],c=u.length,f=0;f<c;++f)if(a=u[f]){var s=Mi(a,n);mi(a,t,e,f,u,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new oo(r,this._parents,t,e)},call:co.call,nodes:co.nodes,node:co.node,size:co.size,empty:co.empty,each:co.each,on:function(t,n){var e=this._id;return arguments.length<2?Mi(this.node(),e).on.on(t):this.each(Ki(e,t,n))},attr:function(t,n){var e=Xn(t),r="transform"===e?Pi:qi;return this.attrTween(t,"function"==typeof n?(e.local?Yi:Bi)(e,r,Ri(this,"attr."+t,n)):null==n?(e.local?Ii:Fi)(e):(e.local?Ui:Oi)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=Xn(t);return this.tween(e,(r.local?$i:Hi)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?Ci:qi;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=re(this,t),a=(this.style.removeProperty(t),re(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,Ji(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var a=re(this,t),u=e(this),c=u+"";return null==u&&(this.style.removeProperty(t),c=u=re(this,t)),a===c?null:a===r&&c===i?o:(i=c,o=n(r=a,u))}}(t,r,Ri(this,"style."+t,n))).each(function(t,n){var e,r,i,o,a="style."+n,u="end."+a;return function(){var c=wi(this,t),f=c.on,s=null==c.value[a]?o||(o=Ji(n)):void 0;f===e&&i===s||(r=(e=f).copy()).on(u,i=s),c.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var a=re(this,t);return a===o?null:a===r?i:i=n(r=a,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,no(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(Ri(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,ro(t))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=Mi(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?zi:Di)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Xi:Gi)(n,t)):Mi(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Vi:Wi)(n,t)):Mi(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(Zi(n,t)):Mi(this.node(),n).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,n){return function(){var e=n.apply(this,arguments);if("function"!=typeof e)throw new Error;wi(this,t).ease=e}}(this._id,t))},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,a){var u={value:a},c={value:function(){0==--i&&o()}};e.each((function(){var e=wi(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(u),n._.interrupt.push(u),n._.end.push(c)),e.on=n})),0===i&&o()}))},[Symbol.iterator]:co[Symbol.iterator]};var ho={time:null,delay:0,duration:250,ease:lo};function po(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))throw new Error(`transition ${n} not found`);return e}Ue.prototype.interrupt=function(t){return this.each((function(){Ai(this,t)}))},Ue.prototype.transition=function(t){var n,e;t instanceof oo?(n=t._id,t=t._name):(n=uo(),(e=ho).time=fi(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],c=u.length,f=0;f<c;++f)(a=u[f])&&mi(a,t,n,f,u,e||po(a,n));return new oo(r,this._parents,t,n)};var go=[null];function yo(t,n){var e,r,i=t.__transition;if(i)for(r in n=null==n?null:n+"",i)if((e=i[r]).state>1&&e.name===n)return new oo([[t]],go,n,+r);return null}const vo=t=>()=>t;function _o(t,{sourceEvent:n,target:e,selection:r,mode:i,dispatch:o}){Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:n,enumerable:!0,configurable:!0},target:{value:e,enumerable:!0,configurable:!0},selection:{value:r,enumerable:!0,configurable:!0},mode:{value:i,enumerable:!0,configurable:!0},_:{value:o}})}function bo(t){t.stopImmediatePropagation()}function mo(t){t.preventDefault(),t.stopImmediatePropagation()}var xo={name:"drag"},wo={name:"space"},Mo={name:"handle"},Ao={name:"center"};const{abs:To,max:So,min:Eo}=Math;function ko(t){return[+t[0],+t[1]]}function No(t){return[ko(t[0]),ko(t[1])]}var Co={name:"x",handles:["w","e"].map(Oo),input:function(t,n){return null==t?null:[[+t[0],n[0][1]],[+t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},Po={name:"y",handles:["n","s"].map(Oo),input:function(t,n){return null==t?null:[[n[0][0],+t[0]],[n[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},zo={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(Oo),input:function(t){return null==t?null:No(t)},output:function(t){return t}},Do={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Ro={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},qo={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Fo={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Io={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Oo(t){return{type:t}}function Uo(t){return!t.ctrlKey&&!t.button}function Bo(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Yo(){return navigator.maxTouchPoints||"ontouchstart"in this}function Lo(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function jo(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function $o(t){var n=t.__brush;return n?n.dim.output(n.selection):null}function Ho(){return Vo(Co)}function Xo(){return Vo(Po)}function Go(){return Vo(zo)}function Vo(t){var n,e=Bo,r=Uo,i=Yo,o=!0,a=An("start","brush","end"),u=6;function c(n){var e=n.property("__brush",g).selectAll(".overlay").data([Oo("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Do.overlay).merge(e).each((function(){var t=Lo(this).extent;Be(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),n.selectAll(".selection").data([Oo("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Do.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,(function(t){return t.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return Do[t.type]})),n.each(f).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",h).filter(i).on("touchstart.brush",h).on("touchmove.brush",d).on("touchend.brush touchcancel.brush",p).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function f(){var t=Be(this),n=Lo(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?n[1][0]-u/2:n[0][0]-u/2})).attr("y",(function(t){return"s"===t.type[0]?n[1][1]-u/2:n[0][1]-u/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+u:u})).attr("height",(function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+u:u}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function s(t,n,e){var r=t.__brush.emitter;return!r||e&&r.clean?new l(t,n,e):r}function l(t,n,e){this.that=t,this.args=n,this.state=t.__brush,this.active=0,this.clean=e}function h(e){if((!n||e.touches)&&r.apply(this,arguments)){var i,a,u,c,l,h,d,p,g,y,v,_=this,b=e.target.__data__.type,m="selection"===(o&&e.metaKey?b="overlay":b)?xo:o&&e.altKey?Ao:Mo,x=t===Po?null:Fo[b],w=t===Co?null:Io[b],M=Lo(_),A=M.extent,T=M.selection,S=A[0][0],E=A[0][1],k=A[1][0],N=A[1][1],C=0,P=0,z=x&&w&&o&&e.shiftKey,D=Array.from(e.touches||[e],(t=>{const n=t.identifier;return(t=Qr(t,_)).point0=t.slice(),t.identifier=n,t}));Ai(_);var R=s(_,arguments,!0).beforestart();if("overlay"===b){T&&(g=!0);const n=[D[0],D[1]||D[0]];M.selection=T=[[i=t===Po?S:Eo(n[0][0],n[1][0]),u=t===Co?E:Eo(n[0][1],n[1][1])],[l=t===Po?k:So(n[0][0],n[1][0]),d=t===Co?N:So(n[0][1],n[1][1])]],D.length>1&&U(e)}else i=T[0][0],u=T[0][1],l=T[1][0],d=T[1][1];a=i,c=u,h=l,p=d;var q=Be(_).attr("pointer-events","none"),F=q.selectAll(".overlay").attr("cursor",Do[b]);if(e.touches)R.moved=O,R.ended=B;else{var I=Be(e.view).on("mousemove.brush",O,!0).on("mouseup.brush",B,!0);o&&I.on("keydown.brush",Y,!0).on("keyup.brush",L,!0),He(e.view)}f.call(_),R.start(e,m.name)}function O(t){for(const n of t.changedTouches||[t])for(const t of D)t.identifier===n.identifier&&(t.cur=Qr(n,_));if(z&&!y&&!v&&1===D.length){const t=D[0];To(t.cur[0]-t[0])>To(t.cur[1]-t[1])?v=!0:y=!0}for(const t of D)t.cur&&(t[0]=t.cur[0],t[1]=t.cur[1]);g=!0,mo(t),U(t)}function U(t){const n=D[0],e=n.point0;var r;switch(C=n[0]-e[0],P=n[1]-e[1],m){case wo:case xo:x&&(C=So(S-i,Eo(k-l,C)),a=i+C,h=l+C),w&&(P=So(E-u,Eo(N-d,P)),c=u+P,p=d+P);break;case Mo:D[1]?(x&&(a=So(S,Eo(k,D[0][0])),h=So(S,Eo(k,D[1][0])),x=1),w&&(c=So(E,Eo(N,D[0][1])),p=So(E,Eo(N,D[1][1])),w=1)):(x<0?(C=So(S-i,Eo(k-i,C)),a=i+C,h=l):x>0&&(C=So(S-l,Eo(k-l,C)),a=i,h=l+C),w<0?(P=So(E-u,Eo(N-u,P)),c=u+P,p=d):w>0&&(P=So(E-d,Eo(N-d,P)),c=u,p=d+P));break;case Ao:x&&(a=So(S,Eo(k,i-C*x)),h=So(S,Eo(k,l+C*x))),w&&(c=So(E,Eo(N,u-P*w)),p=So(E,Eo(N,d+P*w)))}h<a&&(x*=-1,r=i,i=l,l=r,r=a,a=h,h=r,b in Ro&&F.attr("cursor",Do[b=Ro[b]])),p<c&&(w*=-1,r=u,u=d,d=r,r=c,c=p,p=r,b in qo&&F.attr("cursor",Do[b=qo[b]])),M.selection&&(T=M.selection),y&&(a=T[0][0],h=T[1][0]),v&&(c=T[0][1],p=T[1][1]),T[0][0]===a&&T[0][1]===c&&T[1][0]===h&&T[1][1]===p||(M.selection=[[a,c],[h,p]],f.call(_),R.brush(t,m.name))}function B(t){if(bo(t),t.touches){if(t.touches.length)return;n&&clearTimeout(n),n=setTimeout((function(){n=null}),500)}else Xe(t.view,g),I.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);q.attr("pointer-events","all"),F.attr("cursor",Do.overlay),M.selection&&(T=M.selection),jo(T)&&(M.selection=null,f.call(_)),R.end(t,m.name)}function Y(t){switch(t.keyCode){case 16:z=x&&w;break;case 18:m===Mo&&(x&&(l=h-C*x,i=a+C*x),w&&(d=p-P*w,u=c+P*w),m=Ao,U(t));break;case 32:m!==Mo&&m!==Ao||(x<0?l=h-C:x>0&&(i=a-C),w<0?d=p-P:w>0&&(u=c-P),m=wo,F.attr("cursor",Do.selection),U(t));break;default:return}mo(t)}function L(t){switch(t.keyCode){case 16:z&&(y=v=z=!1,U(t));break;case 18:m===Ao&&(x<0?l=h:x>0&&(i=a),w<0?d=p:w>0&&(u=c),m=Mo,U(t));break;case 32:m===wo&&(t.altKey?(x&&(l=h-C*x,i=a+C*x),w&&(d=p-P*w,u=c+P*w),m=Ao):(x<0?l=h:x>0&&(i=a),w<0?d=p:w>0&&(u=c),m=Mo),F.attr("cursor",Do[b]),U(t));break;default:return}mo(t)}}function d(t){s(this,arguments).moved(t)}function p(t){s(this,arguments).ended(t)}function g(){var n=this.__brush||{selection:null};return n.extent=No(e.apply(this,arguments)),n.dim=t,n}return c.move=function(n,e,r){n.tween?n.on("start.brush",(function(t){s(this,arguments).beforestart().start(t)})).on("interrupt.brush end.brush",(function(t){s(this,arguments).end(t)})).tween("brush",(function(){var n=this,r=n.__brush,i=s(n,arguments),o=r.selection,a=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),u=Zr(o,a);function c(t){r.selection=1===t&&null===a?null:u(t),f.call(n),i.brush()}return null!==o&&null!==a?c:c(1)})):n.each((function(){var n=this,i=arguments,o=n.__brush,a=t.input("function"==typeof e?e.apply(n,i):e,o.extent),u=s(n,i).beforestart();Ai(n),o.selection=null===a?null:a,f.call(n),u.start(r).brush(r).end(r)}))},c.clear=function(t,n){c.move(t,null,n)},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(t,n){return this.starting?(this.starting=!1,this.emit("start",t,n)):this.emit("brush",t),this},brush:function(t,n){return this.emit("brush",t,n),this},end:function(t,n){return 0==--this.active&&(delete this.state.emitter,this.emit("end",t,n)),this},emit:function(n,e,r){var i=Be(this.that).datum();a.call(n,this.that,new _o(n,{sourceEvent:e,target:c,selection:t.output(this.state.selection),mode:r,dispatch:a}),i)}},c.extent=function(t){return arguments.length?(e="function"==typeof t?t:vo(No(t)),c):e},c.filter=function(t){return arguments.length?(r="function"==typeof t?t:vo(!!t),c):r},c.touchable=function(t){return arguments.length?(i="function"==typeof t?t:vo(!!t),c):i},c.handleSize=function(t){return arguments.length?(u=+t,c):u},c.keyModifiers=function(t){return arguments.length?(o=!!t,c):o},c.on=function(){var t=a.on.apply(a,arguments);return t===a?c:t},c}var Wo=Math.abs,Zo=Math.cos,Ko=Math.sin,Qo=Math.PI,Jo=Qo/2,ta=2*Qo,na=Math.max,ea=1e-12;function ra(t,n){return Array.from({length:n-t},((n,e)=>t+e))}function ia(t){return function(n,e){return t(n.source.value+n.target.value,e.source.value+e.target.value)}}function oa(){return ca(!1,!1)}function aa(){return ca(!1,!0)}function ua(){return ca(!0,!1)}function ca(t,n){var e=0,r=null,i=null,o=null;function a(a){var u,c=a.length,f=new Array(c),s=ra(0,c),l=new Array(c*c),h=new Array(c),d=0;a=Float64Array.from({length:c*c},n?(t,n)=>a[n%c][n/c|0]:(t,n)=>a[n/c|0][n%c]);for(let n=0;n<c;++n){let e=0;for(let r=0;r<c;++r)e+=a[n*c+r]+t*a[r*c+n];d+=f[n]=e}u=(d=na(0,ta-e*c)/d)?e:ta/c;{let n=0;r&&s.sort(((t,n)=>r(f[t],f[n])));for(const e of s){const r=n;if(t){const t=ra(1+~c,c).filter((t=>t<0?a[~t*c+e]:a[e*c+t]));i&&t.sort(((t,n)=>i(t<0?-a[~t*c+e]:a[e*c+t],n<0?-a[~n*c+e]:a[e*c+n])));for(const r of t)r<0?(l[~r*c+e]||(l[~r*c+e]={source:null,target:null})).target={index:e,startAngle:n,endAngle:n+=a[~r*c+e]*d,value:a[~r*c+e]}:(l[e*c+r]||(l[e*c+r]={source:null,target:null})).source={index:e,startAngle:n,endAngle:n+=a[e*c+r]*d,value:a[e*c+r]};h[e]={index:e,startAngle:r,endAngle:n,value:f[e]}}else{const t=ra(0,c).filter((t=>a[e*c+t]||a[t*c+e]));i&&t.sort(((t,n)=>i(a[e*c+t],a[e*c+n])));for(const r of t){let t;if(e<r?(t=l[e*c+r]||(l[e*c+r]={source:null,target:null}),t.source={index:e,startAngle:n,endAngle:n+=a[e*c+r]*d,value:a[e*c+r]}):(t=l[r*c+e]||(l[r*c+e]={source:null,target:null}),t.target={index:e,startAngle:n,endAngle:n+=a[e*c+r]*d,value:a[e*c+r]},e===r&&(t.source=t.target)),t.source&&t.target&&t.source.value<t.target.value){const n=t.source;t.source=t.target,t.target=n}}h[e]={index:e,startAngle:r,endAngle:n,value:f[e]}}n+=u}}return(l=Object.values(l)).groups=h,o?l.sort(o):l}return a.padAngle=function(t){return arguments.length?(e=na(0,t),a):e},a.sortGroups=function(t){return arguments.length?(r=t,a):r},a.sortSubgroups=function(t){return arguments.length?(i=t,a):i},a.sortChords=function(t){return arguments.length?(null==t?o=null:(o=ia(t))._=t,a):o&&o._},a}const fa=Math.PI,sa=2*fa,la=1e-6,ha=sa-la;function da(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function pa(){return new da}da.prototype=pa.prototype={constructor:da,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,a=this._y1,u=e-t,c=r-n,f=o-t,s=a-n,l=f*f+s*s;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(l>la)if(Math.abs(s*u-c*f)>la&&i){var h=e-o,d=r-a,p=u*u+c*c,g=h*h+d*d,y=Math.sqrt(p),v=Math.sqrt(l),_=i*Math.tan((fa-Math.acos((p+l-g)/(2*y*v)))/2),b=_/v,m=_/y;Math.abs(b-1)>la&&(this._+="L"+(t+b*f)+","+(n+b*s)),this._+="A"+i+","+i+",0,0,"+ +(s*h>f*d)+","+(this._x1=t+m*u)+","+(this._y1=n+m*c)}else this._+="L"+(this._x1=t)+","+(this._y1=n)},arc:function(t,n,e,r,i,o){t=+t,n=+n,o=!!o;var a=(e=+e)*Math.cos(r),u=e*Math.sin(r),c=t+a,f=n+u,s=1^o,l=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+c+","+f:(Math.abs(this._x1-c)>la||Math.abs(this._y1-f)>la)&&(this._+="L"+c+","+f),e&&(l<0&&(l=l%sa+sa),l>ha?this._+="A"+e+","+e+",0,1,"+s+","+(t-a)+","+(n-u)+"A"+e+","+e+",0,1,"+s+","+(this._x1=c)+","+(this._y1=f):l>la&&(this._+="A"+e+","+e+",0,"+ +(l>=fa)+","+s+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};const ga=pa;var ya=Array.prototype.slice;function va(t){return function(){return t}}function _a(t){return t.source}function ba(t){return t.target}function ma(t){return t.radius}function xa(t){return t.startAngle}function wa(t){return t.endAngle}function Ma(){return 0}function Aa(){return 10}function Ta(t){var n=_a,e=ba,r=ma,i=ma,o=xa,a=wa,u=Ma,c=null;function f(){var f,s=n.apply(this,arguments),l=e.apply(this,arguments),h=u.apply(this,arguments)/2,d=ya.call(arguments),p=+r.apply(this,(d[0]=s,d)),g=o.apply(this,d)-Jo,y=a.apply(this,d)-Jo,v=+i.apply(this,(d[0]=l,d)),_=o.apply(this,d)-Jo,b=a.apply(this,d)-Jo;if(c||(c=f=ga()),h>ea&&(Wo(y-g)>2*h+ea?y>g?(g+=h,y-=h):(g-=h,y+=h):g=y=(g+y)/2,Wo(b-_)>2*h+ea?b>_?(_+=h,b-=h):(_-=h,b+=h):_=b=(_+b)/2),c.moveTo(p*Zo(g),p*Ko(g)),c.arc(0,0,p,g,y),g!==_||y!==b)if(t){var m=+t.apply(this,arguments),x=v-m,w=(_+b)/2;c.quadraticCurveTo(0,0,x*Zo(_),x*Ko(_)),c.lineTo(v*Zo(w),v*Ko(w)),c.lineTo(x*Zo(b),x*Ko(b))}else c.quadraticCurveTo(0,0,v*Zo(_),v*Ko(_)),c.arc(0,0,v,_,b);if(c.quadraticCurveTo(0,0,p*Zo(g),p*Ko(g)),c.closePath(),f)return c=null,f+""||null}return t&&(f.headRadius=function(n){return arguments.length?(t="function"==typeof n?n:va(+n),f):t}),f.radius=function(t){return arguments.length?(r=i="function"==typeof t?t:va(+t),f):r},f.sourceRadius=function(t){return arguments.length?(r="function"==typeof t?t:va(+t),f):r},f.targetRadius=function(t){return arguments.length?(i="function"==typeof t?t:va(+t),f):i},f.startAngle=function(t){return arguments.length?(o="function"==typeof t?t:va(+t),f):o},f.endAngle=function(t){return arguments.length?(a="function"==typeof t?t:va(+t),f):a},f.padAngle=function(t){return arguments.length?(u="function"==typeof t?t:va(+t),f):u},f.source=function(t){return arguments.length?(n=t,f):n},f.target=function(t){return arguments.length?(e=t,f):e},f.context=function(t){return arguments.length?(c=null==t?null:t,f):c},f}function Sa(){return Ta()}function Ea(){return Ta(Aa)}const ka=Math.PI/180,Na=180/Math.PI,Ca=.96422,Pa=.82521,za=4/29,Da=6/29,Ra=3*Da*Da;function qa(t){if(t instanceof Oa)return new Oa(t.l,t.a,t.b,t.opacity);if(t instanceof Xa)return Ga(t);t instanceof yr||(t=pr(t));var n,e,r=La(t.r),i=La(t.g),o=La(t.b),a=Ua((.2225045*r+.7168786*i+.0606169*o)/1);return r===i&&i===o?n=e=a:(n=Ua((.4360747*r+.3850649*i+.1430804*o)/Ca),e=Ua((.0139322*r+.0971045*i+.7141733*o)/Pa)),new Oa(116*a-16,500*(n-a),200*(a-e),t.opacity)}function Fa(t,n){return new Oa(t,0,0,null==n?1:n)}function Ia(t,n,e,r){return 1===arguments.length?qa(t):new Oa(t,n,e,null==r?1:r)}function Oa(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function Ua(t){return t>.008856451679035631?Math.pow(t,1/3):t/Ra+za}function Ba(t){return t>Da?t*t*t:Ra*(t-za)}function Ya(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function La(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function ja(t){if(t instanceof Xa)return new Xa(t.h,t.c,t.l,t.opacity);if(t instanceof Oa||(t=qa(t)),0===t.a&&0===t.b)return new Xa(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*Na;return new Xa(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function $a(t,n,e,r){return 1===arguments.length?ja(t):new Xa(e,n,t,null==r?1:r)}function Ha(t,n,e,r){return 1===arguments.length?ja(t):new Xa(t,n,e,null==r?1:r)}function Xa(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}function Ga(t){if(isNaN(t.h))return new Oa(t.l,0,0,t.opacity);var n=t.h*ka;return new Oa(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}Ge(Oa,Ia,Ve(We,{brighter(t){return new Oa(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker(t){return new Oa(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new yr(Ya(3.1338561*(n=Ca*Ba(n))-1.6168667*(t=1*Ba(t))-.4906146*(e=Pa*Ba(e))),Ya(-.9787684*n+1.9161415*t+.033454*e),Ya(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),Ge(Xa,Ha,Ve(We,{brighter(t){return new Xa(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker(t){return new Xa(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb(){return Ga(this).rgb()}}));var Va=-.14861,Wa=1.78277,Za=-.29227,Ka=-.90649,Qa=1.97294,Ja=Qa*Ka,tu=Qa*Wa,nu=Wa*Za-Ka*Va;function eu(t){if(t instanceof iu)return new iu(t.h,t.s,t.l,t.opacity);t instanceof yr||(t=pr(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(nu*r+Ja*n-tu*e)/(nu+Ja-tu),o=r-i,a=(Qa*(e-i)-Za*o)/Ka,u=Math.sqrt(a*a+o*o)/(Qa*i*(1-i)),c=u?Math.atan2(a,o)*Na-120:NaN;return new iu(c<0?c+360:c,u,i,t.opacity)}function ru(t,n,e,r){return 1===arguments.length?eu(t):new iu(t,n,e,null==r?1:r)}function iu(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}Ge(iu,ru,Ve(We,{brighter(t){return t=null==t?Ke:Math.pow(Ke,t),new iu(this.h,this.s,this.l*t,this.opacity)},darker(t){return t=null==t?Ze:Math.pow(Ze,t),new iu(this.h,this.s,this.l*t,this.opacity)},rgb(){var t=isNaN(this.h)?0:(this.h+120)*ka,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new yr(255*(n+e*(Va*r+Wa*i)),255*(n+e*(Za*r+Ka*i)),255*(n+e*(Qa*r)),this.opacity)}}));var ou=Array.prototype.slice;function au(t,n){return t-n}const uu=t=>()=>t;function cu(t,n){for(var e,r=-1,i=n.length;++r<i;)if(e=fu(t,n[r]))return e;return 0}function fu(t,n){for(var e=n[0],r=n[1],i=-1,o=0,a=t.length,u=a-1;o<a;u=o++){var c=t[o],f=c[0],s=c[1],l=t[u],h=l[0],d=l[1];if(su(c,l,n))return 0;s>r!=d>r&&e<(h-f)*(r-s)/(d-s)+f&&(i=-i)}return i}function su(t,n,e){var r,i,o,a;return function(t,n,e){return(n[0]-t[0])*(e[1]-t[1])==(e[0]-t[0])*(n[1]-t[1])}(t,n,e)&&(i=t[r=+(t[0]===n[0])],o=e[r],a=n[r],i<=o&&o<=a||a<=o&&o<=i)}function lu(){}var hu=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]];function du(){var t=1,n=1,e=ht,r=u;function i(t){var n=e(t);if(Array.isArray(n))n=n.slice().sort(au);else{const e=N(t),r=st(e[0],e[1],n);n=ct(Math.floor(e[0]/r)*r,Math.floor(e[1]/r-1)*r,n)}return n.map((n=>o(t,n)))}function o(e,i){var o=[],u=[];return function(e,r,i){var o,u,c,f,s,l,h=new Array,d=new Array;for(o=u=-1,f=e[0]>=r,hu[f<<1].forEach(p);++o<t-1;)c=f,f=e[o+1]>=r,hu[c|f<<1].forEach(p);for(hu[f<<0].forEach(p);++u<n-1;){for(o=-1,f=e[u*t+t]>=r,s=e[u*t]>=r,hu[f<<1|s<<2].forEach(p);++o<t-1;)c=f,f=e[u*t+t+o+1]>=r,l=s,s=e[u*t+o+1]>=r,hu[c|f<<1|s<<2|l<<3].forEach(p);hu[f|s<<3].forEach(p)}for(o=-1,s=e[u*t]>=r,hu[s<<2].forEach(p);++o<t-1;)l=s,s=e[u*t+o+1]>=r,hu[s<<2|l<<3].forEach(p);function p(t){var n,e,r=[t[0][0]+o,t[0][1]+u],c=[t[1][0]+o,t[1][1]+u],f=a(r),s=a(c);(n=d[f])?(e=h[s])?(delete d[n.end],delete h[e.start],n===e?(n.ring.push(c),i(n.ring)):h[n.start]=d[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete d[n.end],n.ring.push(c),d[n.end=s]=n):(n=h[s])?(e=d[f])?(delete h[n.start],delete d[e.end],n===e?(n.ring.push(c),i(n.ring)):h[e.start]=d[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete h[n.start],n.ring.unshift(r),h[n.start=f]=n):h[f]=d[s]={start:f,end:s,ring:[r,c]}}hu[s<<3].forEach(p)}(e,i,(function(t){r(t,e,i),function(t){for(var n=0,e=t.length,r=t[e-1][1]*t[0][0]-t[e-1][0]*t[0][1];++n<e;)r+=t[n-1][1]*t[n][0]-t[n-1][0]*t[n][1];return r}(t)>0?o.push([t]):u.push(t)})),u.forEach((function(t){for(var n,e=0,r=o.length;e<r;++e)if(-1!==cu((n=o[e])[0],t))return void n.push(t)})),{type:"MultiPolygon",value:i,coordinates:o}}function a(n){return 2*n[0]+n[1]*(t+1)*4}function u(e,r,i){e.forEach((function(e){var o,a=e[0],u=e[1],c=0|a,f=0|u,s=r[f*t+c];a>0&&a<t&&c===a&&(o=r[f*t+c-1],e[0]=a+(i-o)/(s-o)-.5),u>0&&u<n&&f===u&&(o=r[(f-1)*t+c],e[1]=u+(i-o)/(s-o)-.5)}))}return i.contour=o,i.size=function(e){if(!arguments.length)return[t,n];var r=Math.floor(e[0]),o=Math.floor(e[1]);if(!(r>=0&&o>=0))throw new Error("invalid size");return t=r,n=o,i},i.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?uu(ou.call(t)):uu(t),i):e},i.smooth=function(t){return arguments.length?(r=t?u:lu,i):r===u},i}function pu(t){return t[0]}function gu(t){return t[1]}function yu(){return 1}function vu(){var t=pu,n=gu,e=yu,r=960,i=500,o=20,a=2,u=3*o,c=r+2*u>>a,f=i+2*u>>a,s=uu(20);function l(r){var i=new Float32Array(c*f),s=Math.pow(2,-a),l=-1;for(const o of r){var h=(t(o,++l,r)+u)*s,d=(n(o,l,r)+u)*s,p=+e(o,l,r);if(h>=0&&h<c&&d>=0&&d<f){var y=Math.floor(h),v=Math.floor(d),_=h-y-.5,b=d-v-.5;i[y+v*c]+=(1-_)*(1-b)*p,i[y+1+v*c]+=_*(1-b)*p,i[y+1+(v+1)*c]+=_*b*p,i[y+(v+1)*c]+=(1-_)*b*p}}return g({data:i,width:c,height:f},o*s),i}function h(t){var n=l(t),e=s(n),r=Math.pow(2,2*a);return Array.isArray(e)||(e=ct(Number.MIN_VALUE,pt(n)/r,e)),du().size([c,f]).thresholds(e.map((t=>t*r)))(n).map(((t,n)=>(t.value=+e[n],d(t))))}function d(t){return t.coordinates.forEach(p),t}function p(t){t.forEach(y)}function y(t){t.forEach(v)}function v(t){t[0]=t[0]*Math.pow(2,a)-u,t[1]=t[1]*Math.pow(2,a)-u}function _(){return c=r+2*(u=3*o)>>a,f=i+2*u>>a,h}return h.contours=function(t){var n=l(t),e=du().size([c,f]),r=Math.pow(2,2*a),i=t=>{t=+t;var i=d(e.contour(n,t*r));return i.value=t,i};return Object.defineProperty(i,"max",{get:()=>pt(n)/r}),i},h.x=function(n){return arguments.length?(t="function"==typeof n?n:uu(+n),h):t},h.y=function(t){return arguments.length?(n="function"==typeof t?t:uu(+t),h):n},h.weight=function(t){return arguments.length?(e="function"==typeof t?t:uu(+t),h):e},h.size=function(t){if(!arguments.length)return[r,i];var n=+t[0],e=+t[1];if(!(n>=0&&e>=0))throw new Error("invalid size");return r=n,i=e,_()},h.cellSize=function(t){if(!arguments.length)return 1<<a;if(!((t=+t)>=1))throw new Error("invalid cell size");return a=Math.floor(Math.log(t)/Math.LN2),_()},h.thresholds=function(t){return arguments.length?(s="function"==typeof t?t:Array.isArray(t)?uu(ou.call(t)):uu(t),h):s},h.bandwidth=function(t){if(!arguments.length)return Math.sqrt(o*(o+1));if(!((t=+t)>=0))throw new Error("invalid bandwidth");return o=(Math.sqrt(4*t*t+1)-1)/2,_()},h}const _u=134217729;function bu(t,n,e,r,i){let o,a,u,c,f=n[0],s=r[0],l=0,h=0;s>f==s>-f?(o=f,f=n[++l]):(o=s,s=r[++h]);let d=0;if(l<t&&h<e)for(s>f==s>-f?(a=f+o,u=o-(a-f),f=n[++l]):(a=s+o,u=o-(a-s),s=r[++h]),o=a,0!==u&&(i[d++]=u);l<t&&h<e;)s>f==s>-f?(a=o+f,c=a-o,u=o-(a-c)+(f-c),f=n[++l]):(a=o+s,c=a-o,u=o-(a-c)+(s-c),s=r[++h]),o=a,0!==u&&(i[d++]=u);for(;l<t;)a=o+f,c=a-o,u=o-(a-c)+(f-c),f=n[++l],o=a,0!==u&&(i[d++]=u);for(;h<e;)a=o+s,c=a-o,u=o-(a-c)+(s-c),s=r[++h],o=a,0!==u&&(i[d++]=u);return 0===o&&0!==d||(i[d++]=o),d}function mu(t){return new Float64Array(t)}const xu=mu(4),wu=mu(8),Mu=mu(12),Au=mu(16),Tu=mu(4);function Su(t,n,e,r,i,o){const a=(n-o)*(e-i),u=(t-i)*(r-o),c=a-u;if(0===a||0===u||a>0!=u>0)return c;const f=Math.abs(a+u);return Math.abs(c)>=33306690738754716e-32*f?c:-function(t,n,e,r,i,o,a){let u,c,f,s,l,h,d,p,g,y,v,_,b,m,x,w,M,A;const T=t-i,S=e-i,E=n-o,k=r-o;m=T*k,h=_u*T,d=h-(h-T),p=T-d,h=_u*k,g=h-(h-k),y=k-g,x=p*y-(m-d*g-p*g-d*y),w=E*S,h=_u*E,d=h-(h-E),p=E-d,h=_u*S,g=h-(h-S),y=S-g,M=p*y-(w-d*g-p*g-d*y),v=x-M,l=x-v,xu[0]=x-(v+l)+(l-M),_=m+v,l=_-m,b=m-(_-l)+(v-l),v=b-w,l=b-v,xu[1]=b-(v+l)+(l-w),A=_+v,l=A-_,xu[2]=_-(A-l)+(v-l),xu[3]=A;let N=function(t,n){let e=n[0];for(let t=1;t<4;t++)e+=n[t];return e}(0,xu),C=22204460492503146e-32*a;if(N>=C||-N>=C)return N;if(l=t-T,u=t-(T+l)+(l-i),l=e-S,f=e-(S+l)+(l-i),l=n-E,c=n-(E+l)+(l-o),l=r-k,s=r-(k+l)+(l-o),0===u&&0===c&&0===f&&0===s)return N;if(C=11093356479670487e-47*a+33306690738754706e-32*Math.abs(N),N+=T*s+k*u-(E*f+S*c),N>=C||-N>=C)return N;m=u*k,h=_u*u,d=h-(h-u),p=u-d,h=_u*k,g=h-(h-k),y=k-g,x=p*y-(m-d*g-p*g-d*y),w=c*S,h=_u*c,d=h-(h-c),p=c-d,h=_u*S,g=h-(h-S),y=S-g,M=p*y-(w-d*g-p*g-d*y),v=x-M,l=x-v,Tu[0]=x-(v+l)+(l-M),_=m+v,l=_-m,b=m-(_-l)+(v-l),v=b-w,l=b-v,Tu[1]=b-(v+l)+(l-w),A=_+v,l=A-_,Tu[2]=_-(A-l)+(v-l),Tu[3]=A;const P=bu(4,xu,4,Tu,wu);m=T*s,h=_u*T,d=h-(h-T),p=T-d,h=_u*s,g=h-(h-s),y=s-g,x=p*y-(m-d*g-p*g-d*y),w=E*f,h=_u*E,d=h-(h-E),p=E-d,h=_u*f,g=h-(h-f),y=f-g,M=p*y-(w-d*g-p*g-d*y),v=x-M,l=x-v,Tu[0]=x-(v+l)+(l-M),_=m+v,l=_-m,b=m-(_-l)+(v-l),v=b-w,l=b-v,Tu[1]=b-(v+l)+(l-w),A=_+v,l=A-_,Tu[2]=_-(A-l)+(v-l),Tu[3]=A;const z=bu(P,wu,4,Tu,Mu);m=u*s,h=_u*u,d=h-(h-u),p=u-d,h=_u*s,g=h-(h-s),y=s-g,x=p*y-(m-d*g-p*g-d*y),w=c*f,h=_u*c,d=h-(h-c),p=c-d,h=_u*f,g=h-(h-f),y=f-g,M=p*y-(w-d*g-p*g-d*y),v=x-M,l=x-v,Tu[0]=x-(v+l)+(l-M),_=m+v,l=_-m,b=m-(_-l)+(v-l),v=b-w,l=b-v,Tu[1]=b-(v+l)+(l-w),A=_+v,l=A-_,Tu[2]=_-(A-l)+(v-l),Tu[3]=A;const D=bu(z,Mu,4,Tu,Au);return Au[D-1]}(t,n,e,r,i,o,f)}mu(4),mu(4),mu(4),mu(4),mu(4),mu(4),mu(4),mu(4),mu(4),mu(8),mu(8),mu(8),mu(4),mu(8),mu(8),mu(8),mu(12),mu(192),mu(192),mu(4),mu(4),mu(4),mu(4),mu(4),mu(4),mu(4),mu(4),mu(8),mu(8),mu(8),mu(8),mu(8),mu(8),mu(8),mu(8),mu(8),mu(4),mu(4),mu(4),mu(8),mu(16),mu(16),mu(16),mu(32),mu(32),mu(48),mu(64),mu(1152),mu(1152),mu(4),mu(4),mu(4),mu(4),mu(4),mu(4),mu(4),mu(4),mu(4),mu(4),mu(24),mu(24),mu(24),mu(24),mu(24),mu(24),mu(24),mu(24),mu(24),mu(24),mu(1152),mu(1152),mu(1152),mu(1152),mu(1152),mu(2304),mu(2304),mu(3456),mu(5760),mu(8),mu(8),mu(8),mu(16),mu(24),mu(48),mu(48),mu(96),mu(192),mu(384),mu(384),mu(384),mu(768),mu(96),mu(96),mu(96),mu(1152);const Eu=Math.pow(2,-52),ku=new Uint32Array(512);class Nu{static from(t,n=qu,e=Fu){const r=t.length,i=new Float64Array(2*r);for(let o=0;o<r;o++){const r=t[o];i[2*o]=n(r),i[2*o+1]=e(r)}return new Nu(i)}constructor(t){const n=t.length>>1;if(n>0&&"number"!=typeof t[0])throw new Error("Expected coords to contain numbers.");this.coords=t;const e=Math.max(2*n-5,0);this._triangles=new Uint32Array(3*e),this._halfedges=new Int32Array(3*e),this._hashSize=Math.ceil(Math.sqrt(n)),this._hullPrev=new Uint32Array(n),this._hullNext=new Uint32Array(n),this._hullTri=new Uint32Array(n),this._hullHash=new Int32Array(this._hashSize).fill(-1),this._ids=new Uint32Array(n),this._dists=new Float64Array(n),this.update()}update(){const{coords:t,_hullPrev:n,_hullNext:e,_hullTri:r,_hullHash:i}=this,o=t.length>>1;let a=1/0,u=1/0,c=-1/0,f=-1/0;for(let n=0;n<o;n++){const e=t[2*n],r=t[2*n+1];e<a&&(a=e),r<u&&(u=r),e>c&&(c=e),r>f&&(f=r),this._ids[n]=n}const s=(a+c)/2,l=(u+f)/2;let h,d,p,g=1/0;for(let n=0;n<o;n++){const e=Cu(s,l,t[2*n],t[2*n+1]);e<g&&(h=n,g=e)}const y=t[2*h],v=t[2*h+1];g=1/0;for(let n=0;n<o;n++){if(n===h)continue;const e=Cu(y,v,t[2*n],t[2*n+1]);e<g&&e>0&&(d=n,g=e)}let _=t[2*d],b=t[2*d+1],m=1/0;for(let n=0;n<o;n++){if(n===h||n===d)continue;const e=zu(y,v,_,b,t[2*n],t[2*n+1]);e<m&&(p=n,m=e)}let x=t[2*p],w=t[2*p+1];if(m===1/0){for(let n=0;n<o;n++)this._dists[n]=t[2*n]-t[0]||t[2*n+1]-t[1];Du(this._ids,this._dists,0,o-1);const n=new Uint32Array(o);let e=0;for(let t=0,r=-1/0;t<o;t++){const i=this._ids[t];this._dists[i]>r&&(n[e++]=i,r=this._dists[i])}return this.hull=n.subarray(0,e),this.triangles=new Uint32Array(0),void(this.halfedges=new Uint32Array(0))}if(Su(y,v,_,b,x,w)<0){const t=d,n=_,e=b;d=p,_=x,b=w,p=t,x=n,w=e}const M=function(t,n,e,r,i,o){const a=e-t,u=r-n,c=i-t,f=o-n,s=a*a+u*u,l=c*c+f*f,h=.5/(a*f-u*c);return{x:t+(f*s-u*l)*h,y:n+(a*l-c*s)*h}}(y,v,_,b,x,w);this._cx=M.x,this._cy=M.y;for(let n=0;n<o;n++)this._dists[n]=Cu(t[2*n],t[2*n+1],M.x,M.y);Du(this._ids,this._dists,0,o-1),this._hullStart=h;let A=3;e[h]=n[p]=d,e[d]=n[h]=p,e[p]=n[d]=h,r[h]=0,r[d]=1,r[p]=2,i.fill(-1),i[this._hashKey(y,v)]=h,i[this._hashKey(_,b)]=d,i[this._hashKey(x,w)]=p,this.trianglesLen=0,this._addTriangle(h,d,p,-1,-1,-1);for(let o,a,u=0;u<this._ids.length;u++){const c=this._ids[u],f=t[2*c],s=t[2*c+1];if(u>0&&Math.abs(f-o)<=Eu&&Math.abs(s-a)<=Eu)continue;if(o=f,a=s,c===h||c===d||c===p)continue;let l=0;for(let t=0,n=this._hashKey(f,s);t<this._hashSize&&(l=i[(n+t)%this._hashSize],-1===l||l===e[l]);t++);l=n[l];let g,y=l;for(;g=e[y],Su(f,s,t[2*y],t[2*y+1],t[2*g],t[2*g+1])>=0;)if(y=g,y===l){y=-1;break}if(-1===y)continue;let v=this._addTriangle(y,c,e[y],-1,-1,r[y]);r[c]=this._legalize(v+2),r[y]=v,A++;let _=e[y];for(;g=e[_],Su(f,s,t[2*_],t[2*_+1],t[2*g],t[2*g+1])<0;)v=this._addTriangle(_,c,g,r[c],-1,r[_]),r[c]=this._legalize(v+2),e[_]=_,A--,_=g;if(y===l)for(;g=n[y],Su(f,s,t[2*g],t[2*g+1],t[2*y],t[2*y+1])<0;)v=this._addTriangle(g,c,y,-1,r[y],r[g]),this._legalize(v+2),r[g]=v,e[y]=y,A--,y=g;this._hullStart=n[c]=y,e[y]=n[_]=c,e[c]=_,i[this._hashKey(f,s)]=c,i[this._hashKey(t[2*y],t[2*y+1])]=y}this.hull=new Uint32Array(A);for(let t=0,n=this._hullStart;t<A;t++)this.hull[t]=n,n=e[n];this.triangles=this._triangles.subarray(0,this.trianglesLen),this.halfedges=this._halfedges.subarray(0,this.trianglesLen)}_hashKey(t,n){return Math.floor(function(t,n){const e=t/(Math.abs(t)+Math.abs(n));return(n>0?3-e:1+e)/4}(t-this._cx,n-this._cy)*this._hashSize)%this._hashSize}_legalize(t){const{_triangles:n,_halfedges:e,coords:r}=this;let i=0,o=0;for(;;){const a=e[t],u=t-t%3;if(o=u+(t+2)%3,-1===a){if(0===i)break;t=ku[--i];continue}const c=a-a%3,f=u+(t+1)%3,s=c+(a+2)%3,l=n[o],h=n[t],d=n[f],p=n[s];if(Pu(r[2*l],r[2*l+1],r[2*h],r[2*h+1],r[2*d],r[2*d+1],r[2*p],r[2*p+1])){n[t]=p,n[a]=l;const r=e[s];if(-1===r){let n=this._hullStart;do{if(this._hullTri[n]===s){this._hullTri[n]=t;break}n=this._hullPrev[n]}while(n!==this._hullStart)}this._link(t,r),this._link(a,e[o]),this._link(o,s);const u=c+(a+1)%3;i<ku.length&&(ku[i++]=u)}else{if(0===i)break;t=ku[--i]}}return o}_link(t,n){this._halfedges[t]=n,-1!==n&&(this._halfedges[n]=t)}_addTriangle(t,n,e,r,i,o){const a=this.trianglesLen;return this._triangles[a]=t,this._triangles[a+1]=n,this._triangles[a+2]=e,this._link(a,r),this._link(a+1,i),this._link(a+2,o),this.trianglesLen+=3,a}}function Cu(t,n,e,r){const i=t-e,o=n-r;return i*i+o*o}function Pu(t,n,e,r,i,o,a,u){const c=t-a,f=n-u,s=e-a,l=r-u,h=i-a,d=o-u,p=s*s+l*l,g=h*h+d*d;return c*(l*g-p*d)-f*(s*g-p*h)+(c*c+f*f)*(s*d-l*h)<0}function zu(t,n,e,r,i,o){const a=e-t,u=r-n,c=i-t,f=o-n,s=a*a+u*u,l=c*c+f*f,h=.5/(a*f-u*c),d=(f*s-u*l)*h,p=(a*l-c*s)*h;return d*d+p*p}function Du(t,n,e,r){if(r-e<=20)for(let i=e+1;i<=r;i++){const r=t[i],o=n[r];let a=i-1;for(;a>=e&&n[t[a]]>o;)t[a+1]=t[a--];t[a+1]=r}else{let i=e+1,o=r;Ru(t,e+r>>1,i),n[t[e]]>n[t[r]]&&Ru(t,e,r),n[t[i]]>n[t[r]]&&Ru(t,i,r),n[t[e]]>n[t[i]]&&Ru(t,e,i);const a=t[i],u=n[a];for(;;){do{i++}while(n[t[i]]<u);do{o--}while(n[t[o]]>u);if(o<i)break;Ru(t,i,o)}t[e+1]=t[o],t[o]=a,r-i+1>=o-e?(Du(t,n,i,r),Du(t,n,e,o-1)):(Du(t,n,e,o-1),Du(t,n,i,r))}}function Ru(t,n,e){const r=t[n];t[n]=t[e],t[e]=r}function qu(t){return t[0]}function Fu(t){return t[1]}const Iu=1e-6;class Ou{constructor(){this._x0=this._y0=this._x1=this._y1=null,this._=""}moveTo(t,n){this._+=`M${this._x0=this._x1=+t},${this._y0=this._y1=+n}`}closePath(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")}lineTo(t,n){this._+=`L${this._x1=+t},${this._y1=+n}`}arc(t,n,e){const r=(t=+t)+(e=+e),i=n=+n;if(e<0)throw new Error("negative radius");null===this._x1?this._+=`M${r},${i}`:(Math.abs(this._x1-r)>Iu||Math.abs(this._y1-i)>Iu)&&(this._+="L"+r+","+i),e&&(this._+=`A${e},${e},0,1,1,${t-e},${n}A${e},${e},0,1,1,${this._x1=r},${this._y1=i}`)}rect(t,n,e,r){this._+=`M${this._x0=this._x1=+t},${this._y0=this._y1=+n}h${+e}v${+r}h${-e}Z`}value(){return this._||null}}class Uu{constructor(){this._=[]}moveTo(t,n){this._.push([t,n])}closePath(){this._.push(this._[0].slice())}lineTo(t,n){this._.push([t,n])}value(){return this._.length?this._:null}}class Bu{constructor(t,[n,e,r,i]=[0,0,960,500]){if(!((r=+r)>=(n=+n)&&(i=+i)>=(e=+e)))throw new Error("invalid bounds");this.delaunay=t,this._circumcenters=new Float64Array(2*t.points.length),this.vectors=new Float64Array(2*t.points.length),this.xmax=r,this.xmin=n,this.ymax=i,this.ymin=e,this._init()}update(){return this.delaunay.update(),this._init(),this}_init(){const{delaunay:{points:t,hull:n,triangles:e},vectors:r}=this,i=this.circumcenters=this._circumcenters.subarray(0,e.length/3*2);for(let n,r,o=0,a=0,u=e.length;o<u;o+=3,a+=2){const u=2*e[o],c=2*e[o+1],f=2*e[o+2],s=t[u],l=t[u+1],h=t[c],d=t[c+1],p=t[f],g=t[f+1],y=h-s,v=d-l,_=p-s,b=g-l,m=2*(y*b-v*_);if(Math.abs(m)<1e-9){let i=1e9;const o=2*e[0];i*=Math.sign((t[o]-s)*b-(t[o+1]-l)*_),n=(s+p)/2-i*b,r=(l+g)/2+i*_}else{const t=1/m,e=y*y+v*v,i=_*_+b*b;n=s+(b*e-v*i)*t,r=l+(y*i-_*e)*t}i[a]=n,i[a+1]=r}let o,a,u,c=n[n.length-1],f=4*c,s=t[2*c],l=t[2*c+1];r.fill(0);for(let e=0;e<n.length;++e)c=n[e],o=f,a=s,u=l,f=4*c,s=t[2*c],l=t[2*c+1],r[o+2]=r[f]=u-l,r[o+3]=r[f+1]=s-a}render(t){const n=null==t?t=new Ou:void 0,{delaunay:{halfedges:e,inedges:r,hull:i},circumcenters:o,vectors:a}=this;if(i.length<=1)return null;for(let n=0,r=e.length;n<r;++n){const r=e[n];if(r<n)continue;const i=2*Math.floor(n/3),a=2*Math.floor(r/3),u=o[i],c=o[i+1],f=o[a],s=o[a+1];this._renderSegment(u,c,f,s,t)}let u,c=i[i.length-1];for(let n=0;n<i.length;++n){u=c,c=i[n];const e=2*Math.floor(r[c]/3),f=o[e],s=o[e+1],l=4*u,h=this._project(f,s,a[l+2],a[l+3]);h&&this._renderSegment(f,s,h[0],h[1],t)}return n&&n.value()}renderBounds(t){const n=null==t?t=new Ou:void 0;return t.rect(this.xmin,this.ymin,this.xmax-this.xmin,this.ymax-this.ymin),n&&n.value()}renderCell(t,n){const e=null==n?n=new Ou:void 0,r=this._clip(t);if(null===r||!r.length)return;n.moveTo(r[0],r[1]);let i=r.length;for(;r[0]===r[i-2]&&r[1]===r[i-1]&&i>1;)i-=2;for(let t=2;t<i;t+=2)r[t]===r[t-2]&&r[t+1]===r[t-1]||n.lineTo(r[t],r[t+1]);return n.closePath(),e&&e.value()}*cellPolygons(){const{delaunay:{points:t}}=this;for(let n=0,e=t.length/2;n<e;++n){const t=this.cellPolygon(n);t&&(t.index=n,yield t)}}cellPolygon(t){const n=new Uu;return this.renderCell(t,n),n.value()}_renderSegment(t,n,e,r,i){let o;const a=this._regioncode(t,n),u=this._regioncode(e,r);0===a&&0===u?(i.moveTo(t,n),i.lineTo(e,r)):(o=this._clipSegment(t,n,e,r,a,u))&&(i.moveTo(o[0],o[1]),i.lineTo(o[2],o[3]))}contains(t,n,e){return(n=+n)==n&&(e=+e)==e&&this.delaunay._step(t,n,e)===t}*neighbors(t){const n=this._clip(t);if(n)for(const e of this.delaunay.neighbors(t)){const t=this._clip(e);if(t)t:for(let r=0,i=n.length;r<i;r+=2)for(let o=0,a=t.length;o<a;o+=2)if(n[r]==t[o]&&n[r+1]==t[o+1]&&n[(r+2)%i]==t[(o+a-2)%a]&&n[(r+3)%i]==t[(o+a-1)%a]){yield e;break t}}}_cell(t){const{circumcenters:n,delaunay:{inedges:e,halfedges:r,triangles:i}}=this,o=e[t];if(-1===o)return null;const a=[];let u=o;do{const e=Math.floor(u/3);if(a.push(n[2*e],n[2*e+1]),u=u%3==2?u-2:u+1,i[u]!==t)break;u=r[u]}while(u!==o&&-1!==u);return a}_clip(t){if(0===t&&1===this.delaunay.hull.length)return[this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax,this.xmin,this.ymin];const n=this._cell(t);if(null===n)return null;const{vectors:e}=this,r=4*t;return e[r]||e[r+1]?this._clipInfinite(t,n,e[r],e[r+1],e[r+2],e[r+3]):this._clipFinite(t,n)}_clipFinite(t,n){const e=n.length;let r,i,o,a,u=null,c=n[e-2],f=n[e-1],s=this._regioncode(c,f),l=0;for(let h=0;h<e;h+=2)if(r=c,i=f,c=n[h],f=n[h+1],o=s,s=this._regioncode(c,f),0===o&&0===s)a=l,l=0,u?u.push(c,f):u=[c,f];else{let n,e,h,d,p;if(0===o){if(null===(n=this._clipSegment(r,i,c,f,o,s)))continue;[e,h,d,p]=n}else{if(null===(n=this._clipSegment(c,f,r,i,s,o)))continue;[d,p,e,h]=n,a=l,l=this._edgecode(e,h),a&&l&&this._edge(t,a,l,u,u.length),u?u.push(e,h):u=[e,h]}a=l,l=this._edgecode(d,p),a&&l&&this._edge(t,a,l,u,u.length),u?u.push(d,p):u=[d,p]}if(u)a=l,l=this._edgecode(u[0],u[1]),a&&l&&this._edge(t,a,l,u,u.length);else if(this.contains(t,(this.xmin+this.xmax)/2,(this.ymin+this.ymax)/2))return[this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax,this.xmin,this.ymin];return u}_clipSegment(t,n,e,r,i,o){for(;;){if(0===i&&0===o)return[t,n,e,r];if(i&o)return null;let a,u,c=i||o;8&c?(a=t+(e-t)*(this.ymax-n)/(r-n),u=this.ymax):4&c?(a=t+(e-t)*(this.ymin-n)/(r-n),u=this.ymin):2&c?(u=n+(r-n)*(this.xmax-t)/(e-t),a=this.xmax):(u=n+(r-n)*(this.xmin-t)/(e-t),a=this.xmin),i?(t=a,n=u,i=this._regioncode(t,n)):(e=a,r=u,o=this._regioncode(e,r))}}_clipInfinite(t,n,e,r,i,o){let a,u=Array.from(n);if((a=this._project(u[0],u[1],e,r))&&u.unshift(a[0],a[1]),(a=this._project(u[u.length-2],u[u.length-1],i,o))&&u.push(a[0],a[1]),u=this._clipFinite(t,u))for(let n,e=0,r=u.length,i=this._edgecode(u[r-2],u[r-1]);e<r;e+=2)n=i,i=this._edgecode(u[e],u[e+1]),n&&i&&(e=this._edge(t,n,i,u,e),r=u.length);else this.contains(t,(this.xmin+this.xmax)/2,(this.ymin+this.ymax)/2)&&(u=[this.xmin,this.ymin,this.xmax,this.ymin,this.xmax,this.ymax,this.xmin,this.ymax]);return u}_edge(t,n,e,r,i){for(;n!==e;){let e,o;switch(n){case 5:n=4;continue;case 4:n=6,e=this.xmax,o=this.ymin;break;case 6:n=2;continue;case 2:n=10,e=this.xmax,o=this.ymax;break;case 10:n=8;continue;case 8:n=9,e=this.xmin,o=this.ymax;break;case 9:n=1;continue;case 1:n=5,e=this.xmin,o=this.ymin}r[i]===e&&r[i+1]===o||!this.contains(t,e,o)||(r.splice(i,0,e,o),i+=2)}if(r.length>4)for(let t=0;t<r.length;t+=2){const n=(t+2)%r.length,e=(t+4)%r.length;(r[t]===r[n]&&r[n]===r[e]||r[t+1]===r[n+1]&&r[n+1]===r[e+1])&&(r.splice(n,2),t-=2)}return i}_project(t,n,e,r){let i,o,a,u=1/0;if(r<0){if(n<=this.ymin)return null;(i=(this.ymin-n)/r)<u&&(a=this.ymin,o=t+(u=i)*e)}else if(r>0){if(n>=this.ymax)return null;(i=(this.ymax-n)/r)<u&&(a=this.ymax,o=t+(u=i)*e)}if(e>0){if(t>=this.xmax)return null;(i=(this.xmax-t)/e)<u&&(o=this.xmax,a=n+(u=i)*r)}else if(e<0){if(t<=this.xmin)return null;(i=(this.xmin-t)/e)<u&&(o=this.xmin,a=n+(u=i)*r)}return[o,a]}_edgecode(t,n){return(t===this.xmin?1:t===this.xmax?2:0)|(n===this.ymin?4:n===this.ymax?8:0)}_regioncode(t,n){return(t<this.xmin?1:t>this.xmax?2:0)|(n<this.ymin?4:n>this.ymax?8:0)}}const Yu=2*Math.PI,Lu=Math.pow;function ju(t){return t[0]}function $u(t){return t[1]}function Hu(t,n,e){return[t+Math.sin(t+n)*e,n+Math.cos(t-n)*e]}class Xu{static from(t,n=ju,e=$u,r){return new Xu("length"in t?function(t,n,e,r){const i=t.length,o=new Float64Array(2*i);for(let a=0;a<i;++a){const i=t[a];o[2*a]=n.call(r,i,a,t),o[2*a+1]=e.call(r,i,a,t)}return o}(t,n,e,r):Float64Array.from(function*(t,n,e,r){let i=0;for(const o of t)yield n.call(r,o,i,t),yield e.call(r,o,i,t),++i}(t,n,e,r)))}constructor(t){this._delaunator=new Nu(t),this.inedges=new Int32Array(t.length/2),this._hullIndex=new Int32Array(t.length/2),this.points=this._delaunator.coords,this._init()}update(){return this._delaunator.update(),this._init(),this}_init(){const t=this._delaunator,n=this.points;if(t.hull&&t.hull.length>2&&function(t){const{triangles:n,coords:e}=t;for(let t=0;t<n.length;t+=3){const r=2*n[t],i=2*n[t+1],o=2*n[t+2];if((e[o]-e[r])*(e[i+1]-e[r+1])-(e[i]-e[r])*(e[o+1]-e[r+1])>1e-10)return!1}return!0}(t)){this.collinear=Int32Array.from({length:n.length/2},((t,n)=>n)).sort(((t,e)=>n[2*t]-n[2*e]||n[2*t+1]-n[2*e+1]));const t=this.collinear[0],e=this.collinear[this.collinear.length-1],r=[n[2*t],n[2*t+1],n[2*e],n[2*e+1]],i=1e-8*Math.hypot(r[3]-r[1],r[2]-r[0]);for(let t=0,e=n.length/2;t<e;++t){const e=Hu(n[2*t],n[2*t+1],i);n[2*t]=e[0],n[2*t+1]=e[1]}this._delaunator=new Nu(n)}else delete this.collinear;const e=this.halfedges=this._delaunator.halfedges,r=this.hull=this._delaunator.hull,i=this.triangles=this._delaunator.triangles,o=this.inedges.fill(-1),a=this._hullIndex.fill(-1);for(let t=0,n=e.length;t<n;++t){const n=i[t%3==2?t-2:t+1];-1!==e[t]&&-1!==o[n]||(o[n]=t)}for(let t=0,n=r.length;t<n;++t)a[r[t]]=t;r.length<=2&&r.length>0&&(this.triangles=new Int32Array(3).fill(-1),this.halfedges=new Int32Array(3).fill(-1),this.triangles[0]=r[0],o[r[0]]=1,2===r.length&&(o[r[1]]=0,this.triangles[1]=r[1],this.triangles[2]=r[1]))}voronoi(t){return new Bu(this,t)}*neighbors(t){const{inedges:n,hull:e,_hullIndex:r,halfedges:i,triangles:o,collinear:a}=this;if(a){const n=a.indexOf(t);return n>0&&(yield a[n-1]),void(n<a.length-1&&(yield a[n+1]))}const u=n[t];if(-1===u)return;let c=u,f=-1;do{if(yield f=o[c],c=c%3==2?c-2:c+1,o[c]!==t)return;if(c=i[c],-1===c){const n=e[(r[t]+1)%e.length];return void(n!==f&&(yield n))}}while(c!==u)}find(t,n,e=0){if((t=+t)!=t||(n=+n)!=n)return-1;const r=e;let i;for(;(i=this._step(e,t,n))>=0&&i!==e&&i!==r;)e=i;return i}_step(t,n,e){const{inedges:r,hull:i,_hullIndex:o,halfedges:a,triangles:u,points:c}=this;if(-1===r[t]||!c.length)return(t+1)%(c.length>>1);let f=t,s=Lu(n-c[2*t],2)+Lu(e-c[2*t+1],2);const l=r[t];let h=l;do{let r=u[h];const l=Lu(n-c[2*r],2)+Lu(e-c[2*r+1],2);if(l<s&&(s=l,f=r),h=h%3==2?h-2:h+1,u[h]!==t)break;if(h=a[h],-1===h){if(h=i[(o[t]+1)%i.length],h!==r&&Lu(n-c[2*h],2)+Lu(e-c[2*h+1],2)<s)return h;break}}while(h!==l);return f}render(t){const n=null==t?t=new Ou:void 0,{points:e,halfedges:r,triangles:i}=this;for(let n=0,o=r.length;n<o;++n){const o=r[n];if(o<n)continue;const a=2*i[n],u=2*i[o];t.moveTo(e[a],e[a+1]),t.lineTo(e[u],e[u+1])}return this.renderHull(t),n&&n.value()}renderPoints(t,n){void 0!==n||t&&"function"==typeof t.moveTo||(n=t,t=null),n=null==n?2:+n;const e=null==t?t=new Ou:void 0,{points:r}=this;for(let e=0,i=r.length;e<i;e+=2){const i=r[e],o=r[e+1];t.moveTo(i+n,o),t.arc(i,o,n,0,Yu)}return e&&e.value()}renderHull(t){const n=null==t?t=new Ou:void 0,{hull:e,points:r}=this,i=2*e[0],o=e.length;t.moveTo(r[i],r[i+1]);for(let n=1;n<o;++n){const i=2*e[n];t.lineTo(r[i],r[i+1])}return t.closePath(),n&&n.value()}hullPolygon(){const t=new Uu;return this.renderHull(t),t.value()}renderTriangle(t,n){const e=null==n?n=new Ou:void 0,{points:r,triangles:i}=this,o=2*i[t*=3],a=2*i[t+1],u=2*i[t+2];return n.moveTo(r[o],r[o+1]),n.lineTo(r[a],r[a+1]),n.lineTo(r[u],r[u+1]),n.closePath(),e&&e.value()}*trianglePolygons(){const{triangles:t}=this;for(let n=0,e=t.length/3;n<e;++n)yield this.trianglePolygon(n)}trianglePolygon(t){const n=new Uu;return this.renderTriangle(t,n),n.value()}}const Gu=t=>()=>t;function Vu(t,{sourceEvent:n,subject:e,target:r,identifier:i,active:o,x:a,y:u,dx:c,dy:f,dispatch:s}){Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:n,enumerable:!0,configurable:!0},subject:{value:e,enumerable:!0,configurable:!0},target:{value:r,enumerable:!0,configurable:!0},identifier:{value:i,enumerable:!0,configurable:!0},active:{value:o,enumerable:!0,configurable:!0},x:{value:a,enumerable:!0,configurable:!0},y:{value:u,enumerable:!0,configurable:!0},dx:{value:c,enumerable:!0,configurable:!0},dy:{value:f,enumerable:!0,configurable:!0},_:{value:s}})}function Wu(t){return!t.ctrlKey&&!t.button}function Zu(){return this.parentNode}function Ku(t,n){return null==n?{x:t.x,y:t.y}:n}function Qu(){return navigator.maxTouchPoints||"ontouchstart"in this}function Ju(){var t,n,e,r,i=Wu,o=Zu,a=Ku,u=Qu,c={},f=An("start","drag","end"),s=0,l=0;function h(t){t.on("mousedown.drag",d).filter(u).on("touchstart.drag",y).on("touchmove.drag",v,Ye).on("touchend.drag touchcancel.drag",_).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function d(a,u){if(!r&&i.call(this,a,u)){var c=b(this,o.call(this,a,u),a,u,"mouse");c&&(Be(a.view).on("mousemove.drag",p,Le).on("mouseup.drag",g,Le),He(a.view),je(a),e=!1,t=a.clientX,n=a.clientY,c("start",a))}}function p(r){if($e(r),!e){var i=r.clientX-t,o=r.clientY-n;e=i*i+o*o>l}c.mouse("drag",r)}function g(t){Be(t.view).on("mousemove.drag mouseup.drag",null),Xe(t.view,e),$e(t),c.mouse("end",t)}function y(t,n){if(i.call(this,t,n)){var e,r,a=t.changedTouches,u=o.call(this,t,n),c=a.length;for(e=0;e<c;++e)(r=b(this,u,t,n,a[e].identifier,a[e]))&&(je(t),r("start",t,a[e]))}}function v(t){var n,e,r=t.changedTouches,i=r.length;for(n=0;n<i;++n)(e=c[r[n].identifier])&&($e(t),e("drag",t,r[n]))}function _(t){var n,e,i=t.changedTouches,o=i.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),n=0;n<o;++n)(e=c[i[n].identifier])&&(je(t),e("end",t,i[n]))}function b(t,n,e,r,i,o){var u,l,d,p=f.copy(),g=Qr(o||e,n);if(null!=(d=a.call(t,new Vu("beforestart",{sourceEvent:e,target:h,identifier:i,active:s,x:g[0],y:g[1],dx:0,dy:0,dispatch:p}),r)))return u=d.x-g[0]||0,l=d.y-g[1]||0,function e(o,a,f){var y,v=g;switch(o){case"start":c[i]=e,y=s++;break;case"end":delete c[i],--s;case"drag":g=Qr(f||a,n),y=s}p.call(o,t,new Vu(o,{sourceEvent:a,subject:d,target:h,identifier:i,active:y,x:g[0]+u,y:g[1]+l,dx:g[0]-v[0],dy:g[1]-v[1],dispatch:p}),r)}}return h.filter=function(t){return arguments.length?(i="function"==typeof t?t:Gu(!!t),h):i},h.container=function(t){return arguments.length?(o="function"==typeof t?t:Gu(t),h):o},h.subject=function(t){return arguments.length?(a="function"==typeof t?t:Gu(t),h):a},h.touchable=function(t){return arguments.length?(u="function"==typeof t?t:Gu(!!t),h):u},h.on=function(){var t=f.on.apply(f,arguments);return t===f?h:t},h.clickDistance=function(t){return arguments.length?(l=(t=+t)*t,h):Math.sqrt(l)},h}Vu.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var tc={},nc={};function ec(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+'] || ""'})).join(",")+"}")}function rc(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}function ic(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function oc(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,a=0,u=0,c=o<=0,f=!1;function s(){if(c)return nc;if(f)return f=!1,tc;var n,r,i=a;if(34===t.charCodeAt(i)){for(;a++<o&&34!==t.charCodeAt(a)||34===t.charCodeAt(++a););return(n=a)>=o?c=!0:10===(r=t.charCodeAt(a++))?f=!0:13===r&&(f=!0,10===t.charCodeAt(a)&&++a),t.slice(i+1,n-1).replace(/""/g,'"')}for(;a<o;){if(10===(r=t.charCodeAt(n=a++)))f=!0;else if(13===r)f=!0,10===t.charCodeAt(a)&&++a;else if(r!==e)continue;return t.slice(i,n)}return c=!0,t.slice(i,o)}for(10===t.charCodeAt(o-1)&&--o,13===t.charCodeAt(o-1)&&--o;(r=s())!==nc;){for(var l=[];r!==tc&&r!==nc;)l.push(r),r=s();n&&null==(l=n(l,u++))||i.push(l)}return i}function i(n,e){return n.map((function(n){return e.map((function(t){return a(n[t])})).join(t)}))}function o(n){return n.map(a).join(t)}function a(t){return null==t?"":t instanceof Date?function(t){var n=t.getUTCHours(),e=t.getUTCMinutes(),r=t.getUTCSeconds(),i=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":function(t){return t<0?"-"+ic(-t,6):t>9999?"+"+ic(t,6):ic(t,4)}(t.getUTCFullYear())+"-"+ic(t.getUTCMonth()+1,2)+"-"+ic(t.getUTCDate(),2)+(i?"T"+ic(n,2)+":"+ic(e,2)+":"+ic(r,2)+"."+ic(i,3)+"Z":r?"T"+ic(n,2)+":"+ic(e,2)+":"+ic(r,2)+"Z":e||n?"T"+ic(n,2)+":"+ic(e,2)+"Z":"")}(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,(function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=ec(t);return function(r,i){return n(e(r),i,t)}}(t,n):ec(t)}));return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=rc(n)),[e.map(a).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=rc(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(o).join("\n")},formatRow:o,formatValue:a}}var ac=oc(","),uc=ac.parse,cc=ac.parseRows,fc=ac.format,sc=ac.formatBody,lc=ac.formatRows,hc=ac.formatRow,dc=ac.formatValue,pc=oc("\t"),gc=pc.parse,yc=pc.parseRows,vc=pc.format,_c=pc.formatBody,bc=pc.formatRows,mc=pc.formatRow,xc=pc.formatValue;function wc(t){for(var n in t){var e,r,i=t[n].trim();if(i)if("true"===i)i=!0;else if("false"===i)i=!1;else if("NaN"===i)i=NaN;else if(isNaN(e=+i)){if(!(r=i.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)))continue;Mc&&r[4]&&!r[7]&&(i=i.replace(/-/g,"/").replace(/T/," ")),i=new Date(i)}else i=e;else i=null;t[n]=i}return t}const Mc=new Date("2019-01-01T00:00").getHours()||new Date("2019-07-01T00:00").getHours(),Ac=t=>+t;function Tc(t){return t*t}function Sc(t){return t*(2-t)}function Ec(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}var kc=function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e}(3),Nc=function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),Cc=function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Pc=Math.PI,zc=Pc/2;function Dc(t){return 1==+t?1:1-Math.cos(t*zc)}function Rc(t){return Math.sin(t*zc)}function qc(t){return(1-Math.cos(Pc*t))/2}function Fc(t){return 1.0009775171065494*(Math.pow(2,-10*t)-.0009765625)}function Ic(t){return Fc(1-+t)}function Oc(t){return 1-Fc(t)}function Uc(t){return((t*=2)<=1?Fc(1-t):2-Fc(t-1))/2}function Bc(t){return 1-Math.sqrt(1-t*t)}function Yc(t){return Math.sqrt(1- --t*t)}function Lc(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}var jc=7.5625;function $c(t){return 1-Hc(1-t)}function Hc(t){return(t=+t)<.36363636363636365?jc*t*t:t<.7272727272727273?jc*(t-=.5454545454545454)*t+.75:t<.9090909090909091?jc*(t-=.8181818181818182)*t+.9375:jc*(t-=.9545454545454546)*t+.984375}function Xc(t){return((t*=2)<=1?1-Hc(1-t):Hc(t-1)+1)/2}var Gc=1.70158,Vc=function t(n){function e(t){return(t=+t)*t*(n*(t-1)+t)}return n=+n,e.overshoot=t,e}(Gc),Wc=function t(n){function e(t){return--t*t*((t+1)*n+t)+1}return n=+n,e.overshoot=t,e}(Gc),Zc=function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(Gc),Kc=2*Math.PI,Qc=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Kc);function i(t){return n*Fc(- --t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*Kc)},i.period=function(e){return t(n,e)},i}(1,.3),Jc=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Kc);function i(t){return 1-n*Fc(t=+t)*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*Kc)},i.period=function(e){return t(n,e)},i}(1,.3),tf=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Kc);function i(t){return((t=2*t-1)<0?n*Fc(-t)*Math.sin((r-t)/e):2-n*Fc(t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*Kc)},i.period=function(e){return t(n,e)},i}(1,.3);function nf(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.blob()}function ef(t,n){return fetch(t,n).then(nf)}function rf(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.arrayBuffer()}function of(t,n){return fetch(t,n).then(rf)}function af(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}function uf(t,n){return fetch(t,n).then(af)}function cf(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),uf(n,e).then((function(n){return t(n,r)}))}}function ff(t,n,e,r){3===arguments.length&&"function"==typeof e&&(r=e,e=void 0);var i=oc(t);return uf(n,e).then((function(t){return i.parse(t,r)}))}var sf=cf(uc),lf=cf(gc);function hf(t,n){return new Promise((function(e,r){var i=new Image;for(var o in n)i[o]=n[o];i.onerror=r,i.onload=function(){e(i)},i.src=t}))}function df(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);if(204!==t.status&&205!==t.status)return t.json()}function pf(t,n){return fetch(t,n).then(df)}function gf(t){return(n,e)=>uf(n,e).then((n=>(new DOMParser).parseFromString(n,t)))}const yf=gf("application/xml");var vf=gf("text/html"),_f=gf("image/svg+xml");function bf(t,n){var e,r=1;function i(){var i,o,a=e.length,u=0,c=0;for(i=0;i<a;++i)u+=(o=e[i]).x,c+=o.y;for(u=(u/a-t)*r,c=(c/a-n)*r,i=0;i<a;++i)(o=e[i]).x-=u,o.y-=c}return null==t&&(t=0),null==n&&(n=0),i.initialize=function(t){e=t},i.x=function(n){return arguments.length?(t=+n,i):t},i.y=function(t){return arguments.length?(n=+t,i):n},i.strength=function(t){return arguments.length?(r=+t,i):r},i}function mf(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,a,u,c,f,s,l,h,d=t._root,p={data:r},g=t._x0,y=t._y0,v=t._x1,_=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((f=n>=(o=(g+v)/2))?g=o:v=o,(s=e>=(a=(y+_)/2))?y=a:_=a,i=d,!(d=d[l=s<<1|f]))return i[l]=p,t;if(u=+t._x.call(null,d.data),c=+t._y.call(null,d.data),n===u&&e===c)return p.next=d,i?i[l]=p:t._root=p,t;do{i=i?i[l]=new Array(4):t._root=new Array(4),(f=n>=(o=(g+v)/2))?g=o:v=o,(s=e>=(a=(y+_)/2))?y=a:_=a}while((l=s<<1|f)==(h=(c>=a)<<1|u>=o));return i[h]=d,i[l]=p,t}function xf(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i}function wf(t){return t[0]}function Mf(t){return t[1]}function Af(t,n,e){var r=new Tf(null==n?wf:n,null==e?Mf:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Tf(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function Sf(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var Ef=Af.prototype=Tf.prototype;function kf(t){return function(){return t}}function Nf(t){return 1e-6*(t()-.5)}function Cf(t){return t.x+t.vx}function Pf(t){return t.y+t.vy}function zf(t){var n,e,r,i=1,o=1;function a(){for(var t,a,c,f,s,l,h,d=n.length,p=0;p<o;++p)for(a=Af(n,Cf,Pf).visitAfter(u),t=0;t<d;++t)c=n[t],l=e[c.index],h=l*l,f=c.x+c.vx,s=c.y+c.vy,a.visit(g);function g(t,n,e,o,a){var u=t.data,d=t.r,p=l+d;if(!u)return n>f+p||o<f-p||e>s+p||a<s-p;if(u.index>c.index){var g=f-u.x-u.vx,y=s-u.y-u.vy,v=g*g+y*y;v<p*p&&(0===g&&(v+=(g=Nf(r))*g),0===y&&(v+=(y=Nf(r))*y),v=(p-(v=Math.sqrt(v)))/v*i,c.vx+=(g*=v)*(p=(d*=d)/(h+d)),c.vy+=(y*=v)*p,u.vx-=g*(p=1-p),u.vy-=y*p)}}}function u(t){if(t.data)return t.r=e[t.data.index];for(var n=t.r=0;n<4;++n)t[n]&&t[n].r>t.r&&(t.r=t[n].r)}function c(){if(n){var r,i,o=n.length;for(e=new Array(o),r=0;r<o;++r)i=n[r],e[i.index]=+t(i,r,n)}}return"function"!=typeof t&&(t=kf(null==t?1:+t)),a.initialize=function(t,e){n=t,r=e,c()},a.iterations=function(t){return arguments.length?(o=+t,a):o},a.strength=function(t){return arguments.length?(i=+t,a):i},a.radius=function(n){return arguments.length?(t="function"==typeof n?n:kf(+n),c(),a):t},a}function Df(t){return t.index}function Rf(t,n){var e=t.get(n);if(!e)throw new Error("node not found: "+n);return e}function qf(t){var n,e,r,i,o,a,u=Df,c=function(t){return 1/Math.min(i[t.source.index],i[t.target.index])},f=kf(30),s=1;function l(r){for(var i=0,u=t.length;i<s;++i)for(var c,f,l,h,d,p,g,y=0;y<u;++y)f=(c=t[y]).source,h=(l=c.target).x+l.vx-f.x-f.vx||Nf(a),d=l.y+l.vy-f.y-f.vy||Nf(a),h*=p=((p=Math.sqrt(h*h+d*d))-e[y])/p*r*n[y],d*=p,l.vx-=h*(g=o[y]),l.vy-=d*g,f.vx+=h*(g=1-g),f.vy+=d*g}function h(){if(r){var a,c,f=r.length,s=t.length,l=new Map(r.map(((t,n)=>[u(t,n,r),t])));for(a=0,i=new Array(f);a<s;++a)(c=t[a]).index=a,"object"!=typeof c.source&&(c.source=Rf(l,c.source)),"object"!=typeof c.target&&(c.target=Rf(l,c.target)),i[c.source.index]=(i[c.source.index]||0)+1,i[c.target.index]=(i[c.target.index]||0)+1;for(a=0,o=new Array(s);a<s;++a)c=t[a],o[a]=i[c.source.index]/(i[c.source.index]+i[c.target.index]);n=new Array(s),d(),e=new Array(s),p()}}function d(){if(r)for(var e=0,i=t.length;e<i;++e)n[e]=+c(t[e],e,t)}function p(){if(r)for(var n=0,i=t.length;n<i;++n)e[n]=+f(t[n],n,t)}return null==t&&(t=[]),l.initialize=function(t,n){r=t,a=n,h()},l.links=function(n){return arguments.length?(t=n,h(),l):t},l.id=function(t){return arguments.length?(u=t,l):u},l.iterations=function(t){return arguments.length?(s=+t,l):s},l.strength=function(t){return arguments.length?(c="function"==typeof t?t:kf(+t),d(),l):c},l.distance=function(t){return arguments.length?(f="function"==typeof t?t:kf(+t),p(),l):f},l}Ef.copy=function(){var t,n,e=new Tf(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=Sf(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=Sf(n));return e},Ef.add=function(t){const n=+this._x.call(null,t),e=+this._y.call(null,t);return mf(this.cover(n,e),n,e,t)},Ef.addAll=function(t){var n,e,r,i,o=t.length,a=new Array(o),u=new Array(o),c=1/0,f=1/0,s=-1/0,l=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(a[e]=r,u[e]=i,r<c&&(c=r),r>s&&(s=r),i<f&&(f=i),i>l&&(l=i));if(c>s||f>l)return this;for(this.cover(c,f).cover(s,l),e=0;e<o;++e)mf(this,a[e],u[e],t[e]);return this},Ef.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{for(var a,u,c=i-e||1,f=this._root;e>t||t>=i||r>n||n>=o;)switch(u=(n<r)<<1|t<e,(a=new Array(4))[u]=f,f=a,c*=2,u){case 0:i=e+c,o=r+c;break;case 1:e=i-c,o=r+c;break;case 2:i=e+c,r=o-c;break;case 3:e=i-c,r=o-c}this._root&&this._root.length&&(this._root=f)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},Ef.data=function(){var t=[];return this.visit((function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)})),t},Ef.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Ef.find=function(t,n,e){var r,i,o,a,u,c,f,s=this._x0,l=this._y0,h=this._x1,d=this._y1,p=[],g=this._root;for(g&&p.push(new xf(g,s,l,h,d)),null==e?e=1/0:(s=t-e,l=n-e,h=t+e,d=n+e,e*=e);c=p.pop();)if(!(!(g=c.node)||(i=c.x0)>h||(o=c.y0)>d||(a=c.x1)<s||(u=c.y1)<l))if(g.length){var y=(i+a)/2,v=(o+u)/2;p.push(new xf(g[3],y,v,a,u),new xf(g[2],i,v,y,u),new xf(g[1],y,o,a,v),new xf(g[0],i,o,y,v)),(f=(n>=v)<<1|t>=y)&&(c=p[p.length-1],p[p.length-1]=p[p.length-1-f],p[p.length-1-f]=c)}else{var _=t-+this._x.call(null,g.data),b=n-+this._y.call(null,g.data),m=_*_+b*b;if(m<e){var x=Math.sqrt(e=m);s=t-x,l=n-x,h=t+x,d=n+x,r=g.data}}return r},Ef.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(a=+this._y.call(null,t)))return this;var n,e,r,i,o,a,u,c,f,s,l,h,d=this._root,p=this._x0,g=this._y0,y=this._x1,v=this._y1;if(!d)return this;if(d.length)for(;;){if((f=o>=(u=(p+y)/2))?p=u:y=u,(s=a>=(c=(g+v)/2))?g=c:v=c,n=d,!(d=d[l=s<<1|f]))return this;if(!d.length)break;(n[l+1&3]||n[l+2&3]||n[l+3&3])&&(e=n,h=l)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):n?(i?n[l]=i:delete n[l],(d=n[0]||n[1]||n[2]||n[3])&&d===(n[3]||n[2]||n[1]||n[0])&&!d.length&&(e?e[h]=d:this._root=d),this):(this._root=i,this)},Ef.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},Ef.root=function(){return this._root},Ef.size=function(){var t=0;return this.visit((function(n){if(!n.length)do{++t}while(n=n.next)})),t},Ef.visit=function(t){var n,e,r,i,o,a,u=[],c=this._root;for(c&&u.push(new xf(c,this._x0,this._y0,this._x1,this._y1));n=u.pop();)if(!t(c=n.node,r=n.x0,i=n.y0,o=n.x1,a=n.y1)&&c.length){var f=(r+o)/2,s=(i+a)/2;(e=c[3])&&u.push(new xf(e,f,s,o,a)),(e=c[2])&&u.push(new xf(e,r,s,f,a)),(e=c[1])&&u.push(new xf(e,f,i,o,s)),(e=c[0])&&u.push(new xf(e,r,i,f,s))}return this},Ef.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new xf(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,a=n.x0,u=n.y0,c=n.x1,f=n.y1,s=(a+c)/2,l=(u+f)/2;(o=i[0])&&e.push(new xf(o,a,u,s,l)),(o=i[1])&&e.push(new xf(o,s,u,c,l)),(o=i[2])&&e.push(new xf(o,a,l,s,f)),(o=i[3])&&e.push(new xf(o,s,l,c,f))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},Ef.x=function(t){return arguments.length?(this._x=t,this):this._x},Ef.y=function(t){return arguments.length?(this._y=t,this):this._y};const Ff=4294967296;function If(t){return t.x}function Of(t){return t.y}var Uf=Math.PI*(3-Math.sqrt(5));function Bf(t){var n,e=1,r=.001,i=1-Math.pow(r,1/300),o=0,a=.6,u=new Map,c=hi(l),f=An("tick","end"),s=function(){let t=1;return()=>(t=(1664525*t+1013904223)%Ff)/Ff}();function l(){h(),f.call("tick",n),e<r&&(c.stop(),f.call("end",n))}function h(r){var c,f,s=t.length;void 0===r&&(r=1);for(var l=0;l<r;++l)for(e+=(o-e)*i,u.forEach((function(t){t(e)})),c=0;c<s;++c)null==(f=t[c]).fx?f.x+=f.vx*=a:(f.x=f.fx,f.vx=0),null==f.fy?f.y+=f.vy*=a:(f.y=f.fy,f.vy=0);return n}function d(){for(var n,e=0,r=t.length;e<r;++e){if((n=t[e]).index=e,null!=n.fx&&(n.x=n.fx),null!=n.fy&&(n.y=n.fy),isNaN(n.x)||isNaN(n.y)){var i=10*Math.sqrt(.5+e),o=e*Uf;n.x=i*Math.cos(o),n.y=i*Math.sin(o)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function p(n){return n.initialize&&n.initialize(t,s),n}return null==t&&(t=[]),d(),n={tick:h,restart:function(){return c.restart(l),n},stop:function(){return c.stop(),n},nodes:function(e){return arguments.length?(t=e,d(),u.forEach(p),n):t},alpha:function(t){return arguments.length?(e=+t,n):e},alphaMin:function(t){return arguments.length?(r=+t,n):r},alphaDecay:function(t){return arguments.length?(i=+t,n):+i},alphaTarget:function(t){return arguments.length?(o=+t,n):o},velocityDecay:function(t){return arguments.length?(a=1-t,n):1-a},randomSource:function(t){return arguments.length?(s=t,u.forEach(p),n):s},force:function(t,e){return arguments.length>1?(null==e?u.delete(t):u.set(t,p(e)),n):u.get(t)},find:function(n,e,r){var i,o,a,u,c,f=0,s=t.length;for(null==r?r=1/0:r*=r,f=0;f<s;++f)(a=(i=n-(u=t[f]).x)*i+(o=e-u.y)*o)<r&&(c=u,r=a);return c},on:function(t,e){return arguments.length>1?(f.on(t,e),n):f.on(t)}}}function Yf(){var t,n,e,r,i,o=kf(-30),a=1,u=1/0,c=.81;function f(e){var i,o=t.length,a=Af(t,If,Of).visitAfter(l);for(r=e,i=0;i<o;++i)n=t[i],a.visit(h)}function s(){if(t){var n,e,r=t.length;for(i=new Array(r),n=0;n<r;++n)e=t[n],i[e.index]=+o(e,n,t)}}function l(t){var n,e,r,o,a,u=0,c=0;if(t.length){for(r=o=a=0;a<4;++a)(n=t[a])&&(e=Math.abs(n.value))&&(u+=n.value,c+=e,r+=e*n.x,o+=e*n.y);t.x=r/c,t.y=o/c}else{(n=t).x=n.data.x,n.y=n.data.y;do{u+=i[n.data.index]}while(n=n.next)}t.value=u}function h(t,o,f,s){if(!t.value)return!0;var l=t.x-n.x,h=t.y-n.y,d=s-o,p=l*l+h*h;if(d*d/c<p)return p<u&&(0===l&&(p+=(l=Nf(e))*l),0===h&&(p+=(h=Nf(e))*h),p<a&&(p=Math.sqrt(a*p)),n.vx+=l*t.value*r/p,n.vy+=h*t.value*r/p),!0;if(!(t.length||p>=u)){(t.data!==n||t.next)&&(0===l&&(p+=(l=Nf(e))*l),0===h&&(p+=(h=Nf(e))*h),p<a&&(p=Math.sqrt(a*p)));do{t.data!==n&&(d=i[t.data.index]*r/p,n.vx+=l*d,n.vy+=h*d)}while(t=t.next)}}return f.initialize=function(n,r){t=n,e=r,s()},f.strength=function(t){return arguments.length?(o="function"==typeof t?t:kf(+t),s(),f):o},f.distanceMin=function(t){return arguments.length?(a=t*t,f):Math.sqrt(a)},f.distanceMax=function(t){return arguments.length?(u=t*t,f):Math.sqrt(u)},f.theta=function(t){return arguments.length?(c=t*t,f):Math.sqrt(c)},f}function Lf(t,n,e){var r,i,o,a=kf(.1);function u(t){for(var a=0,u=r.length;a<u;++a){var c=r[a],f=c.x-n||1e-6,s=c.y-e||1e-6,l=Math.sqrt(f*f+s*s),h=(o[a]-l)*i[a]*t/l;c.vx+=f*h,c.vy+=s*h}}function c(){if(r){var n,e=r.length;for(i=new Array(e),o=new Array(e),n=0;n<e;++n)o[n]=+t(r[n],n,r),i[n]=isNaN(o[n])?0:+a(r[n],n,r)}}return"function"!=typeof t&&(t=kf(+t)),null==n&&(n=0),null==e&&(e=0),u.initialize=function(t){r=t,c()},u.strength=function(t){return arguments.length?(a="function"==typeof t?t:kf(+t),c(),u):a},u.radius=function(n){return arguments.length?(t="function"==typeof n?n:kf(+n),c(),u):t},u.x=function(t){return arguments.length?(n=+t,u):n},u.y=function(t){return arguments.length?(e=+t,u):e},u}function jf(t){var n,e,r,i=kf(.1);function o(t){for(var i,o=0,a=n.length;o<a;++o)(i=n[o]).vx+=(r[o]-i.x)*e[o]*t}function a(){if(n){var o,a=n.length;for(e=new Array(a),r=new Array(a),o=0;o<a;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=kf(null==t?0:+t)),o.initialize=function(t){n=t,a()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:kf(+t),a(),o):i},o.x=function(n){return arguments.length?(t="function"==typeof n?n:kf(+n),a(),o):t},o}function $f(t){var n,e,r,i=kf(.1);function o(t){for(var i,o=0,a=n.length;o<a;++o)(i=n[o]).vy+=(r[o]-i.y)*e[o]*t}function a(){if(n){var o,a=n.length;for(e=new Array(a),r=new Array(a),o=0;o<a;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=kf(null==t?0:+t)),o.initialize=function(t){n=t,a()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:kf(+t),a(),o):i},o.y=function(n){return arguments.length?(t="function"==typeof n?n:kf(+n),a(),o):t},o}function Hf(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function Xf(t){return(t=Hf(Math.abs(t)))?t[1]:NaN}var Gf,Vf=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Wf(t){if(!(n=Vf.exec(t)))throw new Error("invalid format: "+t);var n;return new Zf({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function Zf(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function Kf(t,n){var e=Hf(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}Wf.prototype=Zf.prototype,Zf.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};const Qf={"%":(t,n)=>(100*t).toFixed(n),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,n)=>t.toExponential(n),f:(t,n)=>t.toFixed(n),g:(t,n)=>t.toPrecision(n),o:t=>Math.round(t).toString(8),p:(t,n)=>Kf(100*t,n),r:Kf,s:function(t,n){var e=Hf(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(Gf=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Hf(t,Math.max(0,n+o-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function Jf(t){return t}var ts,ns,es,rs=Array.prototype.map,is=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function os(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?Jf:(n=rs.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,u=n[0],c=0;i>0&&u>0&&(c+u+1>r&&(u=Math.max(1,r-c)),o.push(t.substring(i-=u,i+u)),!((c+=u+1)>r));)u=n[a=(a+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?Jf:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(rs.call(t.numerals,String)),c=void 0===t.percent?"%":t.percent+"",f=void 0===t.minus?"−":t.minus+"",s=void 0===t.nan?"NaN":t.nan+"";function l(t){var n=(t=Wf(t)).fill,e=t.align,l=t.sign,h=t.symbol,d=t.zero,p=t.width,g=t.comma,y=t.precision,v=t.trim,_=t.type;"n"===_?(g=!0,_="g"):Qf[_]||(void 0===y&&(y=12),v=!0,_="g"),(d||"0"===n&&"="===e)&&(d=!0,n="0",e="=");var b="$"===h?i:"#"===h&&/[boxX]/.test(_)?"0"+_.toLowerCase():"",m="$"===h?o:/[%p]/.test(_)?c:"",x=Qf[_],w=/[defgprs%]/.test(_);function M(t){var i,o,c,h=b,M=m;if("c"===_)M=x(t)+M,t="";else{var A=(t=+t)<0||1/t<0;if(t=isNaN(t)?s:x(Math.abs(t),y),v&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),A&&0==+t&&"+"!==l&&(A=!1),h=(A?"("===l?l:f:"-"===l||"("===l?"":l)+h,M=("s"===_?is[8+Gf/3]:"")+M+(A&&"("===l?")":""),w)for(i=-1,o=t.length;++i<o;)if(48>(c=t.charCodeAt(i))||c>57){M=(46===c?a+t.slice(i+1):t.slice(i))+M,t=t.slice(0,i);break}}g&&!d&&(t=r(t,1/0));var T=h.length+t.length+M.length,S=T<p?new Array(p-T+1).join(n):"";switch(g&&d&&(t=r(S+t,S.length?p-M.length:1/0),S=""),e){case"<":t=h+t+M+S;break;case"=":t=h+S+t+M;break;case"^":t=S.slice(0,T=S.length>>1)+h+t+M+S.slice(T);break;default:t=S+h+t+M}return u(t)}return y=void 0===y?6:/[gprs]/.test(_)?Math.max(1,Math.min(21,y)):Math.max(0,Math.min(20,y)),M.toString=function(){return t+""},M}return{format:l,formatPrefix:function(t,n){var e=l(((t=Wf(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Xf(n)/3))),i=Math.pow(10,-r),o=is[8+r/3];return function(t){return e(i*t)+o}}}}function as(t){return ts=os(t),ns=ts.format,es=ts.formatPrefix,ts}function us(t){return Math.max(0,-Xf(Math.abs(t)))}function cs(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Xf(n)/3)))-Xf(Math.abs(t)))}function fs(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Xf(n)-Xf(t))+1}as({thousands:",",grouping:[3],currency:["$",""]});var ss=1e-6,ls=1e-12,hs=Math.PI,ds=hs/2,ps=hs/4,gs=2*hs,ys=180/hs,vs=hs/180,_s=Math.abs,bs=Math.atan,ms=Math.atan2,xs=Math.cos,ws=Math.ceil,Ms=Math.exp,As=(Math.floor,Math.hypot),Ts=Math.log,Ss=Math.pow,Es=Math.sin,ks=Math.sign||function(t){return t>0?1:t<0?-1:0},Ns=Math.sqrt,Cs=Math.tan;function Ps(t){return t>1?0:t<-1?hs:Math.acos(t)}function zs(t){return t>1?ds:t<-1?-ds:Math.asin(t)}function Ds(t){return(t=Es(t/2))*t}function Rs(){}function qs(t,n){t&&Is.hasOwnProperty(t.type)&&Is[t.type](t,n)}var Fs={Feature:function(t,n){qs(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)qs(e[r].geometry,n)}},Is={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){Os(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)Os(e[r],n,0)},Polygon:function(t,n){Us(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)Us(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)qs(e[r],n)}};function Os(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function Us(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)Os(t[e],n,1);n.polygonEnd()}function Bs(t,n){t&&Fs.hasOwnProperty(t.type)?Fs[t.type](t,n):qs(t,n)}var Ys,Ls,js,$s,Hs,Xs,Gs,Vs,Ws,Zs,Ks,Qs,Js,tl,nl,el,rl=new C,il=new C,ol={point:Rs,lineStart:Rs,lineEnd:Rs,polygonStart:function(){rl=new C,ol.lineStart=al,ol.lineEnd=ul},polygonEnd:function(){var t=+rl;il.add(t<0?gs+t:t),this.lineStart=this.lineEnd=this.point=Rs},sphere:function(){il.add(gs)}};function al(){ol.point=cl}function ul(){fl(Ys,Ls)}function cl(t,n){ol.point=fl,Ys=t,Ls=n,js=t*=vs,$s=xs(n=(n*=vs)/2+ps),Hs=Es(n)}function fl(t,n){var e=(t*=vs)-js,r=e>=0?1:-1,i=r*e,o=xs(n=(n*=vs)/2+ps),a=Es(n),u=Hs*a,c=$s*o+u*xs(i),f=u*r*Es(i);rl.add(ms(f,c)),js=t,$s=o,Hs=a}function sl(t){return il=new C,Bs(t,ol),2*il}function ll(t){return[ms(t[1],t[0]),zs(t[2])]}function hl(t){var n=t[0],e=t[1],r=xs(e);return[r*xs(n),r*Es(n),Es(e)]}function dl(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function pl(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function gl(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function yl(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function vl(t){var n=Ns(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}var _l,bl,ml,xl,wl,Ml,Al,Tl,Sl,El,kl,Nl,Cl,Pl,zl,Dl,Rl={point:ql,lineStart:Il,lineEnd:Ol,polygonStart:function(){Rl.point=Ul,Rl.lineStart=Bl,Rl.lineEnd=Yl,tl=new C,ol.polygonStart()},polygonEnd:function(){ol.polygonEnd(),Rl.point=ql,Rl.lineStart=Il,Rl.lineEnd=Ol,rl<0?(Xs=-(Vs=180),Gs=-(Ws=90)):tl>ss?Ws=90:tl<-1e-6&&(Gs=-90),el[0]=Xs,el[1]=Vs},sphere:function(){Xs=-(Vs=180),Gs=-(Ws=90)}};function ql(t,n){nl.push(el=[Xs=t,Vs=t]),n<Gs&&(Gs=n),n>Ws&&(Ws=n)}function Fl(t,n){var e=hl([t*vs,n*vs]);if(Js){var r=pl(Js,e),i=pl([r[1],-r[0],0],r);vl(i),i=ll(i);var o,a=t-Zs,u=a>0?1:-1,c=i[0]*ys*u,f=_s(a)>180;f^(u*Zs<c&&c<u*t)?(o=i[1]*ys)>Ws&&(Ws=o):f^(u*Zs<(c=(c+360)%360-180)&&c<u*t)?(o=-i[1]*ys)<Gs&&(Gs=o):(n<Gs&&(Gs=n),n>Ws&&(Ws=n)),f?t<Zs?Ll(Xs,t)>Ll(Xs,Vs)&&(Vs=t):Ll(t,Vs)>Ll(Xs,Vs)&&(Xs=t):Vs>=Xs?(t<Xs&&(Xs=t),t>Vs&&(Vs=t)):t>Zs?Ll(Xs,t)>Ll(Xs,Vs)&&(Vs=t):Ll(t,Vs)>Ll(Xs,Vs)&&(Xs=t)}else nl.push(el=[Xs=t,Vs=t]);n<Gs&&(Gs=n),n>Ws&&(Ws=n),Js=e,Zs=t}function Il(){Rl.point=Fl}function Ol(){el[0]=Xs,el[1]=Vs,Rl.point=ql,Js=null}function Ul(t,n){if(Js){var e=t-Zs;tl.add(_s(e)>180?e+(e>0?360:-360):e)}else Ks=t,Qs=n;ol.point(t,n),Fl(t,n)}function Bl(){ol.lineStart()}function Yl(){Ul(Ks,Qs),ol.lineEnd(),_s(tl)>ss&&(Xs=-(Vs=180)),el[0]=Xs,el[1]=Vs,Js=null}function Ll(t,n){return(n-=t)<0?n+360:n}function jl(t,n){return t[0]-n[0]}function $l(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}function Hl(t){var n,e,r,i,o,a,u;if(Ws=Vs=-(Xs=Gs=1/0),nl=[],Bs(t,Rl),e=nl.length){for(nl.sort(jl),n=1,o=[r=nl[0]];n<e;++n)$l(r,(i=nl[n])[0])||$l(r,i[1])?(Ll(r[0],i[1])>Ll(r[0],r[1])&&(r[1]=i[1]),Ll(i[0],r[1])>Ll(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(a=-1/0,n=0,r=o[e=o.length-1];n<=e;r=i,++n)i=o[n],(u=Ll(r[1],i[0]))>a&&(a=u,Xs=i[0],Vs=r[1])}return nl=el=null,Xs===1/0||Gs===1/0?[[NaN,NaN],[NaN,NaN]]:[[Xs,Gs],[Vs,Ws]]}var Xl={sphere:Rs,point:Gl,lineStart:Wl,lineEnd:Ql,polygonStart:function(){Xl.lineStart=Jl,Xl.lineEnd=th},polygonEnd:function(){Xl.lineStart=Wl,Xl.lineEnd=Ql}};function Gl(t,n){t*=vs;var e=xs(n*=vs);Vl(e*xs(t),e*Es(t),Es(n))}function Vl(t,n,e){++_l,ml+=(t-ml)/_l,xl+=(n-xl)/_l,wl+=(e-wl)/_l}function Wl(){Xl.point=Zl}function Zl(t,n){t*=vs;var e=xs(n*=vs);Pl=e*xs(t),zl=e*Es(t),Dl=Es(n),Xl.point=Kl,Vl(Pl,zl,Dl)}function Kl(t,n){t*=vs;var e=xs(n*=vs),r=e*xs(t),i=e*Es(t),o=Es(n),a=ms(Ns((a=zl*o-Dl*i)*a+(a=Dl*r-Pl*o)*a+(a=Pl*i-zl*r)*a),Pl*r+zl*i+Dl*o);bl+=a,Ml+=a*(Pl+(Pl=r)),Al+=a*(zl+(zl=i)),Tl+=a*(Dl+(Dl=o)),Vl(Pl,zl,Dl)}function Ql(){Xl.point=Gl}function Jl(){Xl.point=nh}function th(){eh(Nl,Cl),Xl.point=Gl}function nh(t,n){Nl=t,Cl=n,t*=vs,n*=vs,Xl.point=eh;var e=xs(n);Pl=e*xs(t),zl=e*Es(t),Dl=Es(n),Vl(Pl,zl,Dl)}function eh(t,n){t*=vs;var e=xs(n*=vs),r=e*xs(t),i=e*Es(t),o=Es(n),a=zl*o-Dl*i,u=Dl*r-Pl*o,c=Pl*i-zl*r,f=As(a,u,c),s=zs(f),l=f&&-s/f;Sl.add(l*a),El.add(l*u),kl.add(l*c),bl+=s,Ml+=s*(Pl+(Pl=r)),Al+=s*(zl+(zl=i)),Tl+=s*(Dl+(Dl=o)),Vl(Pl,zl,Dl)}function rh(t){_l=bl=ml=xl=wl=Ml=Al=Tl=0,Sl=new C,El=new C,kl=new C,Bs(t,Xl);var n=+Sl,e=+El,r=+kl,i=As(n,e,r);return i<ls&&(n=Ml,e=Al,r=Tl,bl<ss&&(n=ml,e=xl,r=wl),(i=As(n,e,r))<ls)?[NaN,NaN]:[ms(e,n)*ys,zs(r/i)*ys]}function ih(t){return function(){return t}}function oh(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e}function ah(t,n){return[_s(t)>hs?t+Math.round(-t/gs)*gs:t,n]}function uh(t,n,e){return(t%=gs)?n||e?oh(fh(t),sh(n,e)):fh(t):n||e?sh(n,e):ah}function ch(t){return function(n,e){return[(n+=t)>hs?n-gs:n<-hs?n+gs:n,e]}}function fh(t){var n=ch(t);return n.invert=ch(-t),n}function sh(t,n){var e=xs(t),r=Es(t),i=xs(n),o=Es(n);function a(t,n){var a=xs(n),u=xs(t)*a,c=Es(t)*a,f=Es(n),s=f*e+u*r;return[ms(c*i-s*o,u*e-f*r),zs(s*i+c*o)]}return a.invert=function(t,n){var a=xs(n),u=xs(t)*a,c=Es(t)*a,f=Es(n),s=f*i-c*o;return[ms(c*i+f*o,u*e+s*r),zs(s*e-u*r)]},a}function lh(t){function n(n){return(n=t(n[0]*vs,n[1]*vs))[0]*=ys,n[1]*=ys,n}return t=uh(t[0]*vs,t[1]*vs,t.length>2?t[2]*vs:0),n.invert=function(n){return(n=t.invert(n[0]*vs,n[1]*vs))[0]*=ys,n[1]*=ys,n},n}function hh(t,n,e,r,i,o){if(e){var a=xs(n),u=Es(n),c=r*e;null==i?(i=n+r*gs,o=n-c/2):(i=dh(a,i),o=dh(a,o),(r>0?i<o:i>o)&&(i+=r*gs));for(var f,s=i;r>0?s>o:s<o;s-=c)f=ll([a,-u*xs(s),-u*Es(s)]),t.point(f[0],f[1])}}function dh(t,n){(n=hl(n))[0]-=t,vl(n);var e=Ps(-n[1]);return((-n[2]<0?-e:e)+gs-ss)%gs}function ph(){var t,n,e=ih([0,0]),r=ih(90),i=ih(6),o={point:function(e,r){t.push(e=n(e,r)),e[0]*=ys,e[1]*=ys}};function a(){var a=e.apply(this,arguments),u=r.apply(this,arguments)*vs,c=i.apply(this,arguments)*vs;return t=[],n=uh(-a[0]*vs,-a[1]*vs,0).invert,hh(o,u,c,1),a={type:"Polygon",coordinates:[t]},t=n=null,a}return a.center=function(t){return arguments.length?(e="function"==typeof t?t:ih([+t[0],+t[1]]),a):e},a.radius=function(t){return arguments.length?(r="function"==typeof t?t:ih(+t),a):r},a.precision=function(t){return arguments.length?(i="function"==typeof t?t:ih(+t),a):i},a}function gh(){var t,n=[];return{point:function(n,e,r){t.push([n,e,r])},lineStart:function(){n.push(t=[])},lineEnd:Rs,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}}function yh(t,n){return _s(t[0]-n[0])<ss&&_s(t[1]-n[1])<ss}function vh(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function _h(t,n,e,r,i){var o,a,u=[],c=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],a=t[n];if(yh(r,a)){if(!r[2]&&!a[2]){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);return void i.lineEnd()}a[0]+=2e-6}u.push(e=new vh(r,t,null,!0)),c.push(e.o=new vh(r,null,e,!1)),u.push(e=new vh(a,t,null,!1)),c.push(e.o=new vh(a,null,e,!0))}})),u.length){for(c.sort(n),bh(u),bh(c),o=0,a=c.length;o<a;++o)c[o].e=e=!e;for(var f,s,l=u[0];;){for(var h=l,d=!0;h.v;)if((h=h.n)===l)return;f=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(d)for(o=0,a=f.length;o<a;++o)i.point((s=f[o])[0],s[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(d)for(f=h.p.z,o=f.length-1;o>=0;--o)i.point((s=f[o])[0],s[1]);else r(h.x,h.p.x,-1,i);h=h.p}f=(h=h.o).z,d=!d}while(!h.v);i.lineEnd()}}}function bh(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}function mh(t){return _s(t[0])<=hs?t[0]:ks(t[0])*((_s(t[0])+hs)%gs-hs)}function xh(t,n){var e=mh(n),r=n[1],i=Es(r),o=[Es(e),-xs(e),0],a=0,u=0,c=new C;1===i?r=ds+ss:-1===i&&(r=-ds-ss);for(var f=0,s=t.length;f<s;++f)if(h=(l=t[f]).length)for(var l,h,d=l[h-1],p=mh(d),g=d[1]/2+ps,y=Es(g),v=xs(g),_=0;_<h;++_,p=m,y=w,v=M,d=b){var b=l[_],m=mh(b),x=b[1]/2+ps,w=Es(x),M=xs(x),A=m-p,T=A>=0?1:-1,S=T*A,E=S>hs,k=y*w;if(c.add(ms(k*T*Es(S),v*M+k*xs(S))),a+=E?A+T*gs:A,E^p>=e^m>=e){var N=pl(hl(d),hl(b));vl(N);var P=pl(o,N);vl(P);var z=(E^A>=0?-1:1)*zs(P[2]);(r>z||r===z&&(N[0]||N[1]))&&(u+=E^A>=0?1:-1)}}return(a<-1e-6||a<ss&&c<-1e-12)^1&u}function wh(t,n,e,r){return function(i){var o,a,u,c=n(i),f=gh(),s=n(f),l=!1,h={point:d,lineStart:g,lineEnd:y,polygonStart:function(){h.point=v,h.lineStart=_,h.lineEnd=b,a=[],o=[]},polygonEnd:function(){h.point=d,h.lineStart=g,h.lineEnd=y,a=Nt(a);var t=xh(o,r);a.length?(l||(i.polygonStart(),l=!0),_h(a,Ah,t,e,i)):t&&(l||(i.polygonStart(),l=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),l&&(i.polygonEnd(),l=!1),a=o=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function d(n,e){t(n,e)&&i.point(n,e)}function p(t,n){c.point(t,n)}function g(){h.point=p,c.lineStart()}function y(){h.point=d,c.lineEnd()}function v(t,n){u.push([t,n]),s.point(t,n)}function _(){s.lineStart(),u=[]}function b(){v(u[0][0],u[0][1]),s.lineEnd();var t,n,e,r,c=s.clean(),h=f.result(),d=h.length;if(u.pop(),o.push(u),u=null,d)if(1&c){if((n=(e=h[0]).length-1)>0){for(l||(i.polygonStart(),l=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else d>1&&2&c&&h.push(h.pop().concat(h.shift())),a.push(h.filter(Mh))}return h}}function Mh(t){return t.length>1}function Ah(t,n){return((t=t.x)[0]<0?t[1]-ds-ss:ds-t[1])-((n=n.x)[0]<0?n[1]-ds-ss:ds-n[1])}ah.invert=ah;const Th=wh((function(){return!0}),(function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,a){var u=o>0?hs:-hs,c=_s(o-e);_s(c-hs)<ss?(t.point(e,r=(r+a)/2>0?ds:-ds),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),t.point(o,r),n=0):i!==u&&c>=hs&&(_s(e-i)<ss&&(e-=i*ss),_s(o-u)<ss&&(o-=u*ss),r=function(t,n,e,r){var i,o,a=Es(t-e);return _s(a)>ss?bs((Es(n)*(o=xs(r))*Es(e)-Es(r)*(i=xs(n))*Es(t))/(i*o*a)):(n+r)/2}(e,r,o,a),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),n=0),t.point(e=o,r=a),i=u},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}),(function(t,n,e,r){var i;if(null==t)i=e*ds,r.point(-hs,i),r.point(0,i),r.point(hs,i),r.point(hs,0),r.point(hs,-i),r.point(0,-i),r.point(-hs,-i),r.point(-hs,0),r.point(-hs,i);else if(_s(t[0]-n[0])>ss){var o=t[0]<n[0]?hs:-hs;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])}),[-hs,-ds]);function Sh(t){var n=xs(t),e=6*vs,r=n>0,i=_s(n)>ss;function o(t,e){return xs(t)*xs(e)>n}function a(t,e,r){var i=[1,0,0],o=pl(hl(t),hl(e)),a=dl(o,o),u=o[0],c=a-u*u;if(!c)return!r&&t;var f=n*a/c,s=-n*u/c,l=pl(i,o),h=yl(i,f);gl(h,yl(o,s));var d=l,p=dl(h,d),g=dl(d,d),y=p*p-g*(dl(h,h)-1);if(!(y<0)){var v=Ns(y),_=yl(d,(-p-v)/g);if(gl(_,h),_=ll(_),!r)return _;var b,m=t[0],x=e[0],w=t[1],M=e[1];x<m&&(b=m,m=x,x=b);var A=x-m,T=_s(A-hs)<ss;if(!T&&M<w&&(b=w,w=M,M=b),T||A<ss?T?w+M>0^_[1]<(_s(_[0]-m)<ss?w:M):w<=_[1]&&_[1]<=M:A>hs^(m<=_[0]&&_[0]<=x)){var S=yl(d,(-p+v)/g);return gl(S,h),[_,ll(S)]}}}function u(n,e){var i=r?t:hs-t,o=0;return n<-i?o|=1:n>i&&(o|=2),e<-i?o|=4:e>i&&(o|=8),o}return wh(o,(function(t){var n,e,c,f,s;return{lineStart:function(){f=c=!1,s=1},point:function(l,h){var d,p=[l,h],g=o(l,h),y=r?g?0:u(l,h):g?u(l+(l<0?hs:-hs),h):0;if(!n&&(f=c=g)&&t.lineStart(),g!==c&&(!(d=a(n,p))||yh(n,d)||yh(p,d))&&(p[2]=1),g!==c)s=0,g?(t.lineStart(),d=a(p,n),t.point(d[0],d[1])):(d=a(n,p),t.point(d[0],d[1],2),t.lineEnd()),n=d;else if(i&&n&&r^g){var v;y&e||!(v=a(p,n,!0))||(s=0,r?(t.lineStart(),t.point(v[0][0],v[0][1]),t.point(v[1][0],v[1][1]),t.lineEnd()):(t.point(v[1][0],v[1][1]),t.lineEnd(),t.lineStart(),t.point(v[0][0],v[0][1],3)))}!g||n&&yh(n,p)||t.point(p[0],p[1]),n=p,c=g,e=y},lineEnd:function(){c&&t.lineEnd(),n=null},clean:function(){return s|(f&&c)<<1}}}),(function(n,r,i,o){hh(o,t,e,i,n,r)}),r?[0,-t]:[-hs,t-hs])}var Eh,kh,Nh,Ch,Ph=1e9,zh=-Ph;function Dh(t,n,e,r){function i(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function o(i,o,u,f){var s=0,l=0;if(null==i||(s=a(i,u))!==(l=a(o,u))||c(i,o)<0^u>0)do{f.point(0===s||3===s?t:e,s>1?r:n)}while((s=(s+u+4)%4)!==l);else f.point(o[0],o[1])}function a(r,i){return _s(r[0]-t)<ss?i>0?0:3:_s(r[0]-e)<ss?i>0?2:1:_s(r[1]-n)<ss?i>0?1:0:i>0?3:2}function u(t,n){return c(t.x,n.x)}function c(t,n){var e=a(t,1),r=a(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(a){var c,f,s,l,h,d,p,g,y,v,_,b=a,m=gh(),x={point:w,lineStart:function(){x.point=M,f&&f.push(s=[]),v=!0,y=!1,p=g=NaN},lineEnd:function(){c&&(M(l,h),d&&y&&m.rejoin(),c.push(m.result())),x.point=w,y&&b.lineEnd()},polygonStart:function(){b=m,c=[],f=[],_=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=f.length;e<i;++e)for(var o,a,u=f[e],c=1,s=u.length,l=u[0],h=l[0],d=l[1];c<s;++c)o=h,a=d,h=(l=u[c])[0],d=l[1],a<=r?d>r&&(h-o)*(r-a)>(d-a)*(t-o)&&++n:d<=r&&(h-o)*(r-a)<(d-a)*(t-o)&&--n;return n}(),e=_&&n,i=(c=Nt(c)).length;(e||i)&&(a.polygonStart(),e&&(a.lineStart(),o(null,null,1,a),a.lineEnd()),i&&_h(c,u,n,o,a),a.polygonEnd()),b=a,c=f=s=null}};function w(t,n){i(t,n)&&b.point(t,n)}function M(o,a){var u=i(o,a);if(f&&s.push([o,a]),v)l=o,h=a,d=u,v=!1,u&&(b.lineStart(),b.point(o,a));else if(u&&y)b.point(o,a);else{var c=[p=Math.max(zh,Math.min(Ph,p)),g=Math.max(zh,Math.min(Ph,g))],m=[o=Math.max(zh,Math.min(Ph,o)),a=Math.max(zh,Math.min(Ph,a))];!function(t,n,e,r,i,o){var a,u=t[0],c=t[1],f=0,s=1,l=n[0]-u,h=n[1]-c;if(a=e-u,l||!(a>0)){if(a/=l,l<0){if(a<f)return;a<s&&(s=a)}else if(l>0){if(a>s)return;a>f&&(f=a)}if(a=i-u,l||!(a<0)){if(a/=l,l<0){if(a>s)return;a>f&&(f=a)}else if(l>0){if(a<f)return;a<s&&(s=a)}if(a=r-c,h||!(a>0)){if(a/=h,h<0){if(a<f)return;a<s&&(s=a)}else if(h>0){if(a>s)return;a>f&&(f=a)}if(a=o-c,h||!(a<0)){if(a/=h,h<0){if(a>s)return;a>f&&(f=a)}else if(h>0){if(a<f)return;a<s&&(s=a)}return f>0&&(t[0]=u+f*l,t[1]=c+f*h),s<1&&(n[0]=u+s*l,n[1]=c+s*h),!0}}}}}(c,m,t,n,e,r)?u&&(b.lineStart(),b.point(o,a),_=!1):(y||(b.lineStart(),b.point(c[0],c[1])),b.point(m[0],m[1]),u||b.lineEnd(),_=!1)}p=o,g=a,y=u}return x}}function Rh(){var t,n,e,r=0,i=0,o=960,a=500;return e={stream:function(e){return t&&n===e?t:t=Dh(r,i,o,a)(n=e)},extent:function(u){return arguments.length?(r=+u[0][0],i=+u[0][1],o=+u[1][0],a=+u[1][1],t=n=null,e):[[r,i],[o,a]]}}}var qh={sphere:Rs,point:Rs,lineStart:function(){qh.point=Ih,qh.lineEnd=Fh},lineEnd:Rs,polygonStart:Rs,polygonEnd:Rs};function Fh(){qh.point=qh.lineEnd=Rs}function Ih(t,n){kh=t*=vs,Nh=Es(n*=vs),Ch=xs(n),qh.point=Oh}function Oh(t,n){t*=vs;var e=Es(n*=vs),r=xs(n),i=_s(t-kh),o=xs(i),a=r*Es(i),u=Ch*e-Nh*r*o,c=Nh*e+Ch*r*o;Eh.add(ms(Ns(a*a+u*u),c)),kh=t,Nh=e,Ch=r}function Uh(t){return Eh=new C,Bs(t,qh),+Eh}var Bh=[null,null],Yh={type:"LineString",coordinates:Bh};function Lh(t,n){return Bh[0]=t,Bh[1]=n,Uh(Yh)}var jh={Feature:function(t,n){return Hh(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)if(Hh(e[r].geometry,n))return!0;return!1}},$h={Sphere:function(){return!0},Point:function(t,n){return Xh(t.coordinates,n)},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(Xh(e[r],n))return!0;return!1},LineString:function(t,n){return Gh(t.coordinates,n)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(Gh(e[r],n))return!0;return!1},Polygon:function(t,n){return Vh(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(Vh(e[r],n))return!0;return!1},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)if(Hh(e[r],n))return!0;return!1}};function Hh(t,n){return!(!t||!$h.hasOwnProperty(t.type))&&$h[t.type](t,n)}function Xh(t,n){return 0===Lh(t,n)}function Gh(t,n){for(var e,r,i,o=0,a=t.length;o<a;o++){if(0===(r=Lh(t[o],n)))return!0;if(o>0&&(i=Lh(t[o],t[o-1]))>0&&e<=i&&r<=i&&(e+r-i)*(1-Math.pow((e-r)/i,2))<ls*i)return!0;e=r}return!1}function Vh(t,n){return!!xh(t.map(Wh),Zh(n))}function Wh(t){return(t=t.map(Zh)).pop(),t}function Zh(t){return[t[0]*vs,t[1]*vs]}function Kh(t,n){return(t&&jh.hasOwnProperty(t.type)?jh[t.type]:Hh)(t,n)}function Qh(t,n,e){var r=Dt(t,n-ss,e).concat(n);return function(t){return r.map((function(n){return[t,n]}))}}function Jh(t,n,e){var r=Dt(t,n-ss,e).concat(n);return function(t){return r.map((function(n){return[n,t]}))}}function td(){var t,n,e,r,i,o,a,u,c,f,s,l,h=10,d=h,p=90,g=360,y=2.5;function v(){return{type:"MultiLineString",coordinates:_()}}function _(){return Dt(ws(r/p)*p,e,p).map(s).concat(Dt(ws(u/g)*g,a,g).map(l)).concat(Dt(ws(n/h)*h,t,h).filter((function(t){return _s(t%p)>ss})).map(c)).concat(Dt(ws(o/d)*d,i,d).filter((function(t){return _s(t%g)>ss})).map(f))}return v.lines=function(){return _().map((function(t){return{type:"LineString",coordinates:t}}))},v.outline=function(){return{type:"Polygon",coordinates:[s(r).concat(l(a).slice(1),s(e).reverse().slice(1),l(u).reverse().slice(1))]}},v.extent=function(t){return arguments.length?v.extentMajor(t).extentMinor(t):v.extentMinor()},v.extentMajor=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],u=+t[0][1],a=+t[1][1],r>e&&(t=r,r=e,e=t),u>a&&(t=u,u=a,a=t),v.precision(y)):[[r,u],[e,a]]},v.extentMinor=function(e){return arguments.length?(n=+e[0][0],t=+e[1][0],o=+e[0][1],i=+e[1][1],n>t&&(e=n,n=t,t=e),o>i&&(e=o,o=i,i=e),v.precision(y)):[[n,o],[t,i]]},v.step=function(t){return arguments.length?v.stepMajor(t).stepMinor(t):v.stepMinor()},v.stepMajor=function(t){return arguments.length?(p=+t[0],g=+t[1],v):[p,g]},v.stepMinor=function(t){return arguments.length?(h=+t[0],d=+t[1],v):[h,d]},v.precision=function(h){return arguments.length?(y=+h,c=Qh(o,i,90),f=Jh(n,t,y),s=Qh(u,a,90),l=Jh(r,e,y),v):y},v.extentMajor([[-180,-89.999999],[180,89.999999]]).extentMinor([[-180,-80.000001],[180,80.000001]])}function nd(){return td()()}function ed(t,n){var e=t[0]*vs,r=t[1]*vs,i=n[0]*vs,o=n[1]*vs,a=xs(r),u=Es(r),c=xs(o),f=Es(o),s=a*xs(e),l=a*Es(e),h=c*xs(i),d=c*Es(i),p=2*zs(Ns(Ds(o-r)+a*c*Ds(i-e))),g=Es(p),y=p?function(t){var n=Es(t*=p)/g,e=Es(p-t)/g,r=e*s+n*h,i=e*l+n*d,o=e*u+n*f;return[ms(i,r)*ys,ms(o,Ns(r*r+i*i))*ys]}:function(){return[e*ys,r*ys]};return y.distance=p,y}const rd=t=>t;var id,od,ad,ud,cd=new C,fd=new C,sd={point:Rs,lineStart:Rs,lineEnd:Rs,polygonStart:function(){sd.lineStart=ld,sd.lineEnd=pd},polygonEnd:function(){sd.lineStart=sd.lineEnd=sd.point=Rs,cd.add(_s(fd)),fd=new C},result:function(){var t=cd/2;return cd=new C,t}};function ld(){sd.point=hd}function hd(t,n){sd.point=dd,id=ad=t,od=ud=n}function dd(t,n){fd.add(ud*t-ad*n),ad=t,ud=n}function pd(){dd(id,od)}const gd=sd;var yd=1/0,vd=yd,_d=-yd,bd=_d,md={point:function(t,n){t<yd&&(yd=t),t>_d&&(_d=t),n<vd&&(vd=n),n>bd&&(bd=n)},lineStart:Rs,lineEnd:Rs,polygonStart:Rs,polygonEnd:Rs,result:function(){var t=[[yd,vd],[_d,bd]];return _d=bd=-(vd=yd=1/0),t}};const xd=md;var wd,Md,Ad,Td,Sd=0,Ed=0,kd=0,Nd=0,Cd=0,Pd=0,zd=0,Dd=0,Rd=0,qd={point:Fd,lineStart:Id,lineEnd:Bd,polygonStart:function(){qd.lineStart=Yd,qd.lineEnd=Ld},polygonEnd:function(){qd.point=Fd,qd.lineStart=Id,qd.lineEnd=Bd},result:function(){var t=Rd?[zd/Rd,Dd/Rd]:Pd?[Nd/Pd,Cd/Pd]:kd?[Sd/kd,Ed/kd]:[NaN,NaN];return Sd=Ed=kd=Nd=Cd=Pd=zd=Dd=Rd=0,t}};function Fd(t,n){Sd+=t,Ed+=n,++kd}function Id(){qd.point=Od}function Od(t,n){qd.point=Ud,Fd(Ad=t,Td=n)}function Ud(t,n){var e=t-Ad,r=n-Td,i=Ns(e*e+r*r);Nd+=i*(Ad+t)/2,Cd+=i*(Td+n)/2,Pd+=i,Fd(Ad=t,Td=n)}function Bd(){qd.point=Fd}function Yd(){qd.point=jd}function Ld(){$d(wd,Md)}function jd(t,n){qd.point=$d,Fd(wd=Ad=t,Md=Td=n)}function $d(t,n){var e=t-Ad,r=n-Td,i=Ns(e*e+r*r);Nd+=i*(Ad+t)/2,Cd+=i*(Td+n)/2,Pd+=i,zd+=(i=Td*t-Ad*n)*(Ad+t),Dd+=i*(Td+n),Rd+=3*i,Fd(Ad=t,Td=n)}const Hd=qd;function Xd(t){this._context=t}Xd.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,gs)}},result:Rs};var Gd,Vd,Wd,Zd,Kd,Qd=new C,Jd={point:Rs,lineStart:function(){Jd.point=tp},lineEnd:function(){Gd&&np(Vd,Wd),Jd.point=Rs},polygonStart:function(){Gd=!0},polygonEnd:function(){Gd=null},result:function(){var t=+Qd;return Qd=new C,t}};function tp(t,n){Jd.point=np,Vd=Zd=t,Wd=Kd=n}function np(t,n){Zd-=t,Kd-=n,Qd.add(Ns(Zd*Zd+Kd*Kd)),Zd=t,Kd=n}const ep=Jd;function rp(){this._string=[]}function ip(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}function op(t,n){var e,r,i=4.5;function o(t){return t&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),Bs(t,e(r))),r.result()}return o.area=function(t){return Bs(t,e(gd)),gd.result()},o.measure=function(t){return Bs(t,e(ep)),ep.result()},o.bounds=function(t){return Bs(t,e(xd)),xd.result()},o.centroid=function(t){return Bs(t,e(Hd)),Hd.result()},o.projection=function(n){return arguments.length?(e=null==n?(t=null,rd):(t=n).stream,o):t},o.context=function(t){return arguments.length?(r=null==t?(n=null,new rp):new Xd(n=t),"function"!=typeof i&&r.pointRadius(i),o):n},o.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(r.pointRadius(+t),+t),o):i},o.projection(t).context(n)}function ap(t){return{stream:up(t)}}function up(t){return function(n){var e=new cp;for(var r in t)e[r]=t[r];return e.stream=n,e}}function cp(){}function fp(t,n,e){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),Bs(e,t.stream(xd)),n(xd.result()),null!=r&&t.clipExtent(r),t}function sp(t,n,e){return fp(t,(function(e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=Math.min(r/(e[1][0]-e[0][0]),i/(e[1][1]-e[0][1])),a=+n[0][0]+(r-o*(e[1][0]+e[0][0]))/2,u=+n[0][1]+(i-o*(e[1][1]+e[0][1]))/2;t.scale(150*o).translate([a,u])}),e)}function lp(t,n,e){return sp(t,[[0,0],n],e)}function hp(t,n,e){return fp(t,(function(e){var r=+n,i=r/(e[1][0]-e[0][0]),o=(r-i*(e[1][0]+e[0][0]))/2,a=-i*e[0][1];t.scale(150*i).translate([o,a])}),e)}function dp(t,n,e){return fp(t,(function(e){var r=+n,i=r/(e[1][1]-e[0][1]),o=-i*e[0][0],a=(r-i*(e[1][1]+e[0][1]))/2;t.scale(150*i).translate([o,a])}),e)}rp.prototype={_radius:4.5,_circle:ip(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=ip(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}},cp.prototype={constructor:cp,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var pp=xs(30*vs);function gp(t,n){return+n?function(t,n){function e(r,i,o,a,u,c,f,s,l,h,d,p,g,y){var v=f-r,_=s-i,b=v*v+_*_;if(b>4*n&&g--){var m=a+h,x=u+d,w=c+p,M=Ns(m*m+x*x+w*w),A=zs(w/=M),T=_s(_s(w)-1)<ss||_s(o-l)<ss?(o+l)/2:ms(x,m),S=t(T,A),E=S[0],k=S[1],N=E-r,C=k-i,P=_*N-v*C;(P*P/b>n||_s((v*N+_*C)/b-.5)>.3||a*h+u*d+c*p<pp)&&(e(r,i,o,a,u,c,E,k,T,m/=M,x/=M,w,g,y),y.point(E,k),e(E,k,T,m,x,w,f,s,l,h,d,p,g,y))}}return function(n){var r,i,o,a,u,c,f,s,l,h,d,p,g={point:y,lineStart:v,lineEnd:b,polygonStart:function(){n.polygonStart(),g.lineStart=m},polygonEnd:function(){n.polygonEnd(),g.lineStart=v}};function y(e,r){e=t(e,r),n.point(e[0],e[1])}function v(){s=NaN,g.point=_,n.lineStart()}function _(r,i){var o=hl([r,i]),a=t(r,i);e(s,l,f,h,d,p,s=a[0],l=a[1],f=r,h=o[0],d=o[1],p=o[2],16,n),n.point(s,l)}function b(){g.point=y,n.lineEnd()}function m(){v(),g.point=x,g.lineEnd=w}function x(t,n){_(r=t,n),i=s,o=l,a=h,u=d,c=p,g.point=_}function w(){e(s,l,f,h,d,p,i,o,r,a,u,c,16,n),g.lineEnd=b,b()}return g}}(t,n):function(t){return up({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)}var yp=up({point:function(t,n){this.stream.point(t*vs,n*vs)}});function vp(t,n,e,r,i,o){if(!o)return function(t,n,e,r,i){function o(o,a){return[n+t*(o*=r),e-t*(a*=i)]}return o.invert=function(o,a){return[(o-n)/t*r,(e-a)/t*i]},o}(t,n,e,r,i);var a=xs(o),u=Es(o),c=a*t,f=u*t,s=a/t,l=u/t,h=(u*e-a*n)/t,d=(u*n+a*e)/t;function p(t,o){return[c*(t*=r)-f*(o*=i)+n,e-f*t-c*o]}return p.invert=function(t,n){return[r*(s*t-l*n+h),i*(d-l*t-s*n)]},p}function _p(t){return bp((function(){return t}))()}function bp(t){var n,e,r,i,o,a,u,c,f,s,l=150,h=480,d=250,p=0,g=0,y=0,v=0,_=0,b=0,m=1,x=1,w=null,M=Th,A=null,T=rd,S=.5;function E(t){return c(t[0]*vs,t[1]*vs)}function k(t){return(t=c.invert(t[0],t[1]))&&[t[0]*ys,t[1]*ys]}function N(){var t=vp(l,0,0,m,x,b).apply(null,n(p,g)),r=vp(l,h-t[0],d-t[1],m,x,b);return e=uh(y,v,_),u=oh(n,r),c=oh(e,u),a=gp(u,S),C()}function C(){return f=s=null,E}return E.stream=function(t){return f&&s===t?f:f=yp(function(t){return up({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(e)(M(a(T(s=t)))))},E.preclip=function(t){return arguments.length?(M=t,w=void 0,C()):M},E.postclip=function(t){return arguments.length?(T=t,A=r=i=o=null,C()):T},E.clipAngle=function(t){return arguments.length?(M=+t?Sh(w=t*vs):(w=null,Th),C()):w*ys},E.clipExtent=function(t){return arguments.length?(T=null==t?(A=r=i=o=null,rd):Dh(A=+t[0][0],r=+t[0][1],i=+t[1][0],o=+t[1][1]),C()):null==A?null:[[A,r],[i,o]]},E.scale=function(t){return arguments.length?(l=+t,N()):l},E.translate=function(t){return arguments.length?(h=+t[0],d=+t[1],N()):[h,d]},E.center=function(t){return arguments.length?(p=t[0]%360*vs,g=t[1]%360*vs,N()):[p*ys,g*ys]},E.rotate=function(t){return arguments.length?(y=t[0]%360*vs,v=t[1]%360*vs,_=t.length>2?t[2]%360*vs:0,N()):[y*ys,v*ys,_*ys]},E.angle=function(t){return arguments.length?(b=t%360*vs,N()):b*ys},E.reflectX=function(t){return arguments.length?(m=t?-1:1,N()):m<0},E.reflectY=function(t){return arguments.length?(x=t?-1:1,N()):x<0},E.precision=function(t){return arguments.length?(a=gp(u,S=t*t),C()):Ns(S)},E.fitExtent=function(t,n){return sp(E,t,n)},E.fitSize=function(t,n){return lp(E,t,n)},E.fitWidth=function(t,n){return hp(E,t,n)},E.fitHeight=function(t,n){return dp(E,t,n)},function(){return n=t.apply(this,arguments),E.invert=n.invert&&k,N()}}function mp(t){var n=0,e=hs/3,r=bp(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*vs,e=t[1]*vs):[n*ys,e*ys]},i}function xp(t,n){var e=Es(t),r=(e+Es(n))/2;if(_s(r)<ss)return function(t){var n=xs(t);function e(t,e){return[t*n,Es(e)/n]}return e.invert=function(t,e){return[t/n,zs(e*n)]},e}(t);var i=1+e*(2*r-e),o=Ns(i)/r;function a(t,n){var e=Ns(i-2*r*Es(n))/r;return[e*Es(t*=r),o-e*xs(t)]}return a.invert=function(t,n){var e=o-n,a=ms(t,_s(e))*ks(e);return e*r<0&&(a-=hs*ks(t)*ks(e)),[a/r,zs((i-(t*t+e*e)*r*r)/(2*r))]},a}function wp(){return mp(xp).scale(155.424).center([0,33.6442])}function Mp(){return wp().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}function Ap(){var t,n,e,r,i,o,a=Mp(),u=wp().rotate([154,0]).center([-2,58.5]).parallels([55,65]),c=wp().rotate([157,0]).center([-3,19.9]).parallels([8,18]),f={point:function(t,n){o=[t,n]}};function s(t){var n=t[0],a=t[1];return o=null,e.point(n,a),o||(r.point(n,a),o)||(i.point(n,a),o)}function l(){return t=n=null,s}return s.invert=function(t){var n=a.scale(),e=a.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?u:i>=.166&&i<.234&&r>=-.214&&r<-.115?c:a).invert(t)},s.stream=function(e){return t&&n===e?t:(r=[a.stream(n=e),u.stream(e),c.stream(e)],i=r.length,t={point:function(t,n){for(var e=-1;++e<i;)r[e].point(t,n)},sphere:function(){for(var t=-1;++t<i;)r[t].sphere()},lineStart:function(){for(var t=-1;++t<i;)r[t].lineStart()},lineEnd:function(){for(var t=-1;++t<i;)r[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<i;)r[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<i;)r[t].polygonEnd()}});var r,i},s.precision=function(t){return arguments.length?(a.precision(t),u.precision(t),c.precision(t),l()):a.precision()},s.scale=function(t){return arguments.length?(a.scale(t),u.scale(.35*t),c.scale(t),s.translate(a.translate())):a.scale()},s.translate=function(t){if(!arguments.length)return a.translate();var n=a.scale(),o=+t[0],s=+t[1];return e=a.translate(t).clipExtent([[o-.455*n,s-.238*n],[o+.455*n,s+.238*n]]).stream(f),r=u.translate([o-.307*n,s+.201*n]).clipExtent([[o-.425*n+ss,s+.12*n+ss],[o-.214*n-ss,s+.234*n-ss]]).stream(f),i=c.translate([o-.205*n,s+.212*n]).clipExtent([[o-.214*n+ss,s+.166*n+ss],[o-.115*n-ss,s+.234*n-ss]]).stream(f),l()},s.fitExtent=function(t,n){return sp(s,t,n)},s.fitSize=function(t,n){return lp(s,t,n)},s.fitWidth=function(t,n){return hp(s,t,n)},s.fitHeight=function(t,n){return dp(s,t,n)},s.scale(1070)}function Tp(t){return function(n,e){var r=xs(n),i=xs(e),o=t(r*i);return o===1/0?[2,0]:[o*i*Es(n),o*Es(e)]}}function Sp(t){return function(n,e){var r=Ns(n*n+e*e),i=t(r),o=Es(i),a=xs(i);return[ms(n*o,r*a),zs(r&&e*o/r)]}}var Ep=Tp((function(t){return Ns(2/(1+t))}));function kp(){return _p(Ep).scale(124.75).clipAngle(179.999)}Ep.invert=Sp((function(t){return 2*zs(t/2)}));var Np=Tp((function(t){return(t=Ps(t))&&t/Es(t)}));function Cp(){return _p(Np).scale(79.4188).clipAngle(179.999)}function Pp(t,n){return[t,Ts(Cs((ds+n)/2))]}function zp(){return Dp(Pp).scale(961/gs)}function Dp(t){var n,e,r,i=_p(t),o=i.center,a=i.scale,u=i.translate,c=i.clipExtent,f=null;function s(){var o=hs*a(),u=i(lh(i.rotate()).invert([0,0]));return c(null==f?[[u[0]-o,u[1]-o],[u[0]+o,u[1]+o]]:t===Pp?[[Math.max(u[0]-o,f),n],[Math.min(u[0]+o,e),r]]:[[f,Math.max(u[1]-o,n)],[e,Math.min(u[1]+o,r)]])}return i.scale=function(t){return arguments.length?(a(t),s()):a()},i.translate=function(t){return arguments.length?(u(t),s()):u()},i.center=function(t){return arguments.length?(o(t),s()):o()},i.clipExtent=function(t){return arguments.length?(null==t?f=n=e=r=null:(f=+t[0][0],n=+t[0][1],e=+t[1][0],r=+t[1][1]),s()):null==f?null:[[f,n],[e,r]]},s()}function Rp(t){return Cs((ds+t)/2)}function qp(t,n){var e=xs(t),r=t===n?Es(t):Ts(e/xs(n))/Ts(Rp(n)/Rp(t)),i=e*Ss(Rp(t),r)/r;if(!r)return Pp;function o(t,n){i>0?n<-ds+ss&&(n=-ds+ss):n>ds-ss&&(n=ds-ss);var e=i/Ss(Rp(n),r);return[e*Es(r*t),i-e*xs(r*t)]}return o.invert=function(t,n){var e=i-n,o=ks(r)*Ns(t*t+e*e),a=ms(t,_s(e))*ks(e);return e*r<0&&(a-=hs*ks(t)*ks(e)),[a/r,2*bs(Ss(i/o,1/r))-ds]},o}function Fp(){return mp(qp).scale(109.5).parallels([30,30])}function Ip(t,n){return[t,n]}function Op(){return _p(Ip).scale(152.63)}function Up(t,n){var e=xs(t),r=t===n?Es(t):(e-xs(n))/(n-t),i=e/r+t;if(_s(r)<ss)return Ip;function o(t,n){var e=i-n,o=r*t;return[e*Es(o),i-e*xs(o)]}return o.invert=function(t,n){var e=i-n,o=ms(t,_s(e))*ks(e);return e*r<0&&(o-=hs*ks(t)*ks(e)),[o/r,i-ks(r)*Ns(t*t+e*e)]},o}function Bp(){return mp(Up).scale(131.154).center([0,13.9389])}Np.invert=Sp((function(t){return t})),Pp.invert=function(t,n){return[t,2*bs(Ms(n))-ds]},Ip.invert=Ip;var Yp=1.340264,Lp=-.081106,jp=893e-6,$p=.003796,Hp=Ns(3)/2;function Xp(t,n){var e=zs(Hp*Es(n)),r=e*e,i=r*r*r;return[t*xs(e)/(Hp*(Yp+3*Lp*r+i*(7*jp+9*$p*r))),e*(Yp+Lp*r+i*(jp+$p*r))]}function Gp(){return _p(Xp).scale(177.158)}function Vp(t,n){var e=xs(n),r=xs(t)*e;return[e*Es(t)/r,Es(n)/r]}function Wp(){return _p(Vp).scale(144.049).clipAngle(60)}function Zp(){var t,n,e,r,i,o,a,u=1,c=0,f=0,s=1,l=1,h=0,d=null,p=1,g=1,y=up({point:function(t,n){var e=b([t,n]);this.stream.point(e[0],e[1])}}),v=rd;function _(){return p=u*s,g=u*l,o=a=null,b}function b(e){var r=e[0]*p,i=e[1]*g;if(h){var o=i*t-r*n;r=r*t+i*n,i=o}return[r+c,i+f]}return b.invert=function(e){var r=e[0]-c,i=e[1]-f;if(h){var o=i*t+r*n;r=r*t-i*n,i=o}return[r/p,i/g]},b.stream=function(t){return o&&a===t?o:o=y(v(a=t))},b.postclip=function(t){return arguments.length?(v=t,d=e=r=i=null,_()):v},b.clipExtent=function(t){return arguments.length?(v=null==t?(d=e=r=i=null,rd):Dh(d=+t[0][0],e=+t[0][1],r=+t[1][0],i=+t[1][1]),_()):null==d?null:[[d,e],[r,i]]},b.scale=function(t){return arguments.length?(u=+t,_()):u},b.translate=function(t){return arguments.length?(c=+t[0],f=+t[1],_()):[c,f]},b.angle=function(e){return arguments.length?(n=Es(h=e%360*vs),t=xs(h),_()):h*ys},b.reflectX=function(t){return arguments.length?(s=t?-1:1,_()):s<0},b.reflectY=function(t){return arguments.length?(l=t?-1:1,_()):l<0},b.fitExtent=function(t,n){return sp(b,t,n)},b.fitSize=function(t,n){return lp(b,t,n)},b.fitWidth=function(t,n){return hp(b,t,n)},b.fitHeight=function(t,n){return dp(b,t,n)},b}function Kp(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}function Qp(){return _p(Kp).scale(175.295)}function Jp(t,n){return[xs(n)*Es(t),Es(n)]}function tg(){return _p(Jp).scale(249.5).clipAngle(90.000001)}function ng(t,n){var e=xs(n),r=1+xs(t)*e;return[e*Es(t)/r,Es(n)/r]}function eg(){return _p(ng).scale(250).clipAngle(142)}function rg(t,n){return[Ts(Cs((ds+n)/2)),-t]}function ig(){var t=Dp(rg),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):[(t=n())[1],-t[0]]},t.rotate=function(t){return arguments.length?e([t[0],t[1],t.length>2?t[2]+90:90]):[(t=e())[0],t[1],t[2]-90]},e([0,0,90]).scale(159.155)}function og(t,n){return t.parent===n.parent?1:2}function ag(t,n){return t+n.x}function ug(t,n){return Math.max(t,n.y)}function cg(){var t=og,n=1,e=1,r=!1;function i(i){var o,a=0;i.eachAfter((function(n){var e=n.children;e?(n.x=function(t){return t.reduce(ag,0)/t.length}(e),n.y=function(t){return 1+t.reduce(ug,0)}(e)):(n.x=o?a+=t(n,o):0,n.y=0,o=n)}));var u=function(t){for(var n;n=t.children;)t=n[0];return t}(i),c=function(t){for(var n;n=t.children;)t=n[n.length-1];return t}(i),f=u.x-t(u,c)/2,s=c.x+t(c,u)/2;return i.eachAfter(r?function(t){t.x=(t.x-i.x)*n,t.y=(i.y-t.y)*e}:function(t){t.x=(t.x-f)/(s-f)*n,t.y=(1-(i.y?t.y/i.y:1))*e})}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i}function fg(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function sg(t,n){t instanceof Map?(t=[void 0,t],void 0===n&&(n=hg)):void 0===n&&(n=lg);for(var e,r,i,o,a,u=new gg(t),c=[u];e=c.pop();)if((i=n(e.data))&&(a=(i=Array.from(i)).length))for(e.children=i,o=a-1;o>=0;--o)c.push(r=i[o]=new gg(i[o])),r.parent=e,r.depth=e.depth+1;return u.eachBefore(pg)}function lg(t){return t.children}function hg(t){return Array.isArray(t)?t[1]:null}function dg(t){void 0!==t.data.value&&(t.value=t.data.value),t.data=t.data.data}function pg(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function gg(t){this.data=t,this.depth=this.height=0,this.parent=null}function yg(t){return null==t?null:vg(t)}function vg(t){if("function"!=typeof t)throw new Error;return t}function _g(){return 0}function bg(t){return function(){return t}}Xp.invert=function(t,n){for(var e,r=n,i=r*r,o=i*i*i,a=0;a<12&&(o=(i=(r-=e=(r*(Yp+Lp*i+o*(jp+$p*i))-n)/(Yp+3*Lp*i+o*(7*jp+9*$p*i)))*r)*i*i,!(_s(e)<ls));++a);return[Hp*t*(Yp+3*Lp*i+o*(7*jp+9*$p*i))/xs(r),zs(Es(r)/Hp)]},Vp.invert=Sp(bs),Kp.invert=function(t,n){var e,r=n,i=25;do{var o=r*r,a=o*o;r-=e=(r*(1.007226+o*(.015085+a*(.028874*o-.044475-.005916*a)))-n)/(1.007226+o*(.045255+a*(.259866*o-.311325-.005916*11*a)))}while(_s(e)>ss&&--i>0);return[t/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]},Jp.invert=Sp(zs),ng.invert=Sp((function(t){return 2*bs(t)})),rg.invert=function(t,n){return[-n,2*bs(Ms(t))-ds]},gg.prototype=sg.prototype={constructor:gg,count:function(){return this.eachAfter(fg)},each:function(t,n){let e=-1;for(const r of this)t.call(n,r,++e,this);return this},eachAfter:function(t,n){for(var e,r,i,o=this,a=[o],u=[],c=-1;o=a.pop();)if(u.push(o),e=o.children)for(r=0,i=e.length;r<i;++r)a.push(e[r]);for(;o=u.pop();)t.call(n,o,++c,this);return this},eachBefore:function(t,n){for(var e,r,i=this,o=[i],a=-1;i=o.pop();)if(t.call(n,i,++a,this),e=i.children)for(r=e.length-1;r>=0;--r)o.push(e[r]);return this},find:function(t,n){let e=-1;for(const r of this)if(t.call(n,r,++e,this))return r},sum:function(t){return this.eachAfter((function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e}))},sort:function(t){return this.eachBefore((function(n){n.children&&n.children.sort(t)}))},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){return Array.from(this)},leaves:function(){var t=[];return this.eachBefore((function(n){n.children||t.push(n)})),t},links:function(){var t=this,n=[];return t.each((function(e){e!==t&&n.push({source:e.parent,target:e})})),n},copy:function(){return sg(this).eachBefore(dg)},[Symbol.iterator]:function*(){var t,n,e,r,i=this,o=[i];do{for(t=o.reverse(),o=[];i=t.pop();)if(yield i,n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e])}while(o.length)}};const mg=4294967296;function xg(){let t=1;return()=>(t=(1664525*t+1013904223)%mg)/mg}function wg(t){return Mg(t,xg())}function Mg(t,n){for(var e,r,i=0,o=(t=function(t,n){let e,r,i=t.length;for(;i;)r=n()*i--|0,e=t[i],t[i]=t[r],t[r]=e;return t}(Array.from(t),n)).length,a=[];i<o;)e=t[i],r&&Sg(r,e)?++i:(r=kg(a=Ag(a,e)),i=0);return r}function Ag(t,n){var e,r;if(Eg(n,t))return[n];for(e=0;e<t.length;++e)if(Tg(n,t[e])&&Eg(Ng(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(Tg(Ng(t[e],t[r]),n)&&Tg(Ng(t[e],n),t[r])&&Tg(Ng(t[r],n),t[e])&&Eg(Cg(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function Tg(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function Sg(t,n){var e=t.r-n.r+1e-9*Math.max(t.r,n.r,1),r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function Eg(t,n){for(var e=0;e<n.length;++e)if(!Sg(t,n[e]))return!1;return!0}function kg(t){switch(t.length){case 1:return{x:(n=t[0]).x,y:n.y,r:n.r};case 2:return Ng(t[0],t[1]);case 3:return Cg(t[0],t[1],t[2])}var n}function Ng(t,n){var e=t.x,r=t.y,i=t.r,o=n.x,a=n.y,u=n.r,c=o-e,f=a-r,s=u-i,l=Math.sqrt(c*c+f*f);return{x:(e+o+c/l*s)/2,y:(r+a+f/l*s)/2,r:(l+i+u)/2}}function Cg(t,n,e){var r=t.x,i=t.y,o=t.r,a=n.x,u=n.y,c=n.r,f=e.x,s=e.y,l=e.r,h=r-a,d=r-f,p=i-u,g=i-s,y=c-o,v=l-o,_=r*r+i*i-o*o,b=_-a*a-u*u+c*c,m=_-f*f-s*s+l*l,x=d*p-h*g,w=(p*m-g*b)/(2*x)-r,M=(g*y-p*v)/x,A=(d*b-h*m)/(2*x)-i,T=(h*v-d*y)/x,S=M*M+T*T-1,E=2*(o+w*M+A*T),k=w*w+A*A-o*o,N=-(Math.abs(S)>1e-6?(E+Math.sqrt(E*E-4*S*k))/(2*S):k/E);return{x:r+w+M*N,y:i+A+T*N,r:N}}function Pg(t,n,e){var r,i,o,a,u=t.x-n.x,c=t.y-n.y,f=u*u+c*c;f?(i=n.r+e.r,i*=i,a=t.r+e.r,i>(a*=a)?(r=(f+a-i)/(2*f),o=Math.sqrt(Math.max(0,a/f-r*r)),e.x=t.x-r*u-o*c,e.y=t.y-r*c+o*u):(r=(f+i-a)/(2*f),o=Math.sqrt(Math.max(0,i/f-r*r)),e.x=n.x+r*u-o*c,e.y=n.y+r*c+o*u)):(e.x=n.x+e.r,e.y=n.y)}function zg(t,n){var e=t.r+n.r-1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function Dg(t){var n=t._,e=t.next._,r=n.r+e.r,i=(n.x*e.r+e.x*n.r)/r,o=(n.y*e.r+e.y*n.r)/r;return i*i+o*o}function Rg(t){this._=t,this.next=null,this.previous=null}function qg(t,n){if(!(a=(e=t,t="object"==typeof e&&"length"in e?e:Array.from(e)).length))return 0;var e,r,i,o,a,u,c,f,s,l,h,d;if((r=t[0]).x=0,r.y=0,!(a>1))return r.r;if(i=t[1],r.x=-i.r,i.x=r.r,i.y=0,!(a>2))return r.r+i.r;Pg(i,r,o=t[2]),r=new Rg(r),i=new Rg(i),o=new Rg(o),r.next=o.previous=i,i.next=r.previous=o,o.next=i.previous=r;t:for(f=3;f<a;++f){Pg(r._,i._,o=t[f]),o=new Rg(o),s=i.next,l=r.previous,h=i._.r,d=r._.r;do{if(h<=d){if(zg(s._,o._)){i=s,r.next=i,i.previous=r,--f;continue t}h+=s._.r,s=s.next}else{if(zg(l._,o._)){(r=l).next=i,i.previous=r,--f;continue t}d+=l._.r,l=l.previous}}while(s!==l.next);for(o.previous=r,o.next=i,r.next=i.previous=i=o,u=Dg(r);(o=o.next)!==i;)(c=Dg(o))<u&&(r=o,u=c);i=r.next}for(r=[i._],o=i;(o=o.next)!==i;)r.push(o._);for(o=Mg(r,n),f=0;f<a;++f)(r=t[f]).x-=o.x,r.y-=o.y;return o.r}function Fg(t){return qg(t,xg()),t}function Ig(t){return Math.sqrt(t.value)}function Og(){var t=null,n=1,e=1,r=_g;function i(i){const o=xg();return i.x=n/2,i.y=e/2,t?i.eachBefore(Ug(t)).eachAfter(Bg(r,.5,o)).eachBefore(Yg(1)):i.eachBefore(Ug(Ig)).eachAfter(Bg(_g,1,o)).eachAfter(Bg(r,i.r/Math.min(n,e),o)).eachBefore(Yg(Math.min(n,e)/(2*i.r))),i}return i.radius=function(n){return arguments.length?(t=yg(n),i):t},i.size=function(t){return arguments.length?(n=+t[0],e=+t[1],i):[n,e]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:bg(+t),i):r},i}function Ug(t){return function(n){n.children||(n.r=Math.max(0,+t(n)||0))}}function Bg(t,n,e){return function(r){if(i=r.children){var i,o,a,u=i.length,c=t(r)*n||0;if(c)for(o=0;o<u;++o)i[o].r+=c;if(a=qg(i,e),c)for(o=0;o<u;++o)i[o].r-=c;r.r=a+c}}}function Yg(t){return function(n){var e=n.parent;n.r*=t,e&&(n.x=e.x+t*n.x,n.y=e.y+t*n.y)}}function Lg(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)}function jg(t,n,e,r,i){for(var o,a=t.children,u=-1,c=a.length,f=t.value&&(r-n)/t.value;++u<c;)(o=a[u]).y0=e,o.y1=i,o.x0=n,o.x1=n+=o.value*f}function $g(){var t=1,n=1,e=0,r=!1;function i(i){var o=i.height+1;return i.x0=i.y0=e,i.x1=t,i.y1=n/o,i.eachBefore(function(t,n){return function(r){r.children&&jg(r,r.x0,t*(r.depth+1)/n,r.x1,t*(r.depth+2)/n);var i=r.x0,o=r.y0,a=r.x1-e,u=r.y1-e;a<i&&(i=a=(i+a)/2),u<o&&(o=u=(o+u)/2),r.x0=i,r.y0=o,r.x1=a,r.y1=u}}(n,o)),r&&i.eachBefore(Lg),i}return i.round=function(t){return arguments.length?(r=!!t,i):r},i.size=function(e){return arguments.length?(t=+e[0],n=+e[1],i):[t,n]},i.padding=function(t){return arguments.length?(e=+t,i):e},i}var Hg={depth:-1},Xg={},Gg={};function Vg(t){return t.id}function Wg(t){return t.parentId}function Zg(){var t,n=Vg,e=Wg;function r(r){var i,o,a,u,c,f,s,l,h=Array.from(r),d=n,p=e,g=new Map;if(null!=t){const n=h.map(((n,e)=>function(t){let n=(t=`${t}`).length;return Qg(t,n-1)&&!Qg(t,n-2)&&(t=t.slice(0,-1)),"/"===t[0]?t:`/${t}`}(t(n,e,r)))),e=n.map(Kg),i=new Set(n).add("");for(const t of e)i.has(t)||(i.add(t),n.push(t),e.push(Kg(t)),h.push(Gg));d=(t,e)=>n[e],p=(t,n)=>e[n]}for(a=0,i=h.length;a<i;++a)o=h[a],f=h[a]=new gg(o),null!=(s=d(o,a,r))&&(s+="")&&(l=f.id=s,g.set(l,g.has(l)?Xg:f)),null!=(s=p(o,a,r))&&(s+="")&&(f.parent=s);for(a=0;a<i;++a)if(s=(f=h[a]).parent){if(!(c=g.get(s)))throw new Error("missing: "+s);if(c===Xg)throw new Error("ambiguous: "+s);c.children?c.children.push(f):c.children=[f],f.parent=c}else{if(u)throw new Error("multiple roots");u=f}if(!u)throw new Error("no root");if(null!=t){for(;u.data===Gg&&1===u.children.length;)u=u.children[0],--i;for(let t=h.length-1;t>=0&&(f=h[t],f.data===Gg);--t)f.data=null}if(u.parent=Hg,u.eachBefore((function(t){t.depth=t.parent.depth+1,--i})).eachBefore(pg),u.parent=null,i>0)throw new Error("cycle");return u}return r.id=function(t){return arguments.length?(n=yg(t),r):n},r.parentId=function(t){return arguments.length?(e=yg(t),r):e},r.path=function(n){return arguments.length?(t=yg(n),r):t},r}function Kg(t){let n=t.length;if(n<2)return"";for(;--n>1&&!Qg(t,n););return t.slice(0,n)}function Qg(t,n){if("/"===t[n]){let e=0;for(;n>0&&"\\"===t[--n];)++e;if(0==(1&e))return!0}return!1}function Jg(t,n){return t.parent===n.parent?1:2}function ty(t){var n=t.children;return n?n[0]:t.t}function ny(t){var n=t.children;return n?n[n.length-1]:t.t}function ey(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function ry(t,n,e){return t.a.parent===n.parent?t.a:e}function iy(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}function oy(){var t=Jg,n=1,e=1,r=null;function i(i){var c=function(t){for(var n,e,r,i,o,a=new iy(t,0),u=[a];n=u.pop();)if(r=n._.children)for(n.children=new Array(o=r.length),i=o-1;i>=0;--i)u.push(e=n.children[i]=new iy(r[i],i)),e.parent=n;return(a.parent=new iy(null,0)).children=[a],a}(i);if(c.eachAfter(o),c.parent.m=-c.z,c.eachBefore(a),r)i.eachBefore(u);else{var f=i,s=i,l=i;i.eachBefore((function(t){t.x<f.x&&(f=t),t.x>s.x&&(s=t),t.depth>l.depth&&(l=t)}));var h=f===s?1:t(f,s)/2,d=h-f.x,p=n/(s.x+h+d),g=e/(l.depth||1);i.eachBefore((function(t){t.x=(t.x+d)*p,t.y=t.depth*g}))}return i}function o(n){var e=n.children,r=n.parent.children,i=n.i?r[n.i-1]:null;if(e){!function(t){for(var n,e=0,r=0,i=t.children,o=i.length;--o>=0;)(n=i[o]).z+=e,n.m+=e,e+=n.s+(r+=n.c)}(n);var o=(e[0].z+e[e.length-1].z)/2;i?(n.z=i.z+t(n._,i._),n.m=n.z-o):n.z=o}else i&&(n.z=i.z+t(n._,i._));n.parent.A=function(n,e,r){if(e){for(var i,o=n,a=n,u=e,c=o.parent.children[0],f=o.m,s=a.m,l=u.m,h=c.m;u=ny(u),o=ty(o),u&&o;)c=ty(c),(a=ny(a)).a=n,(i=u.z+l-o.z-f+t(u._,o._))>0&&(ey(ry(u,n,r),n,i),f+=i,s+=i),l+=u.m,f+=o.m,h+=c.m,s+=a.m;u&&!ny(a)&&(a.t=u,a.m+=l-s),o&&!ty(c)&&(c.t=o,c.m+=f-h,r=n)}return r}(n,i,n.parent.A||r[0])}function a(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function u(t){t.x*=n,t.y=t.depth*e}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i}function ay(t,n,e,r,i){for(var o,a=t.children,u=-1,c=a.length,f=t.value&&(i-e)/t.value;++u<c;)(o=a[u]).x0=n,o.x1=r,o.y0=e,o.y1=e+=o.value*f}iy.prototype=Object.create(gg.prototype);var uy=(1+Math.sqrt(5))/2;function cy(t,n,e,r,i,o){for(var a,u,c,f,s,l,h,d,p,g,y,v=[],_=n.children,b=0,m=0,x=_.length,w=n.value;b<x;){c=i-e,f=o-r;do{s=_[m++].value}while(!s&&m<x);for(l=h=s,y=s*s*(g=Math.max(f/c,c/f)/(w*t)),p=Math.max(h/y,y/l);m<x;++m){if(s+=u=_[m].value,u<l&&(l=u),u>h&&(h=u),y=s*s*g,(d=Math.max(h/y,y/l))>p){s-=u;break}p=d}v.push(a={value:s,dice:c<f,children:_.slice(b,m)}),a.dice?jg(a,e,r,i,w?r+=f*s/w:o):ay(a,e,r,w?e+=c*s/w:i,o),w-=s,b=m}return v}const fy=function t(n){function e(t,e,r,i,o){cy(n,t,e,r,i,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(uy);function sy(){var t=fy,n=!1,e=1,r=1,i=[0],o=_g,a=_g,u=_g,c=_g,f=_g;function s(t){return t.x0=t.y0=0,t.x1=e,t.y1=r,t.eachBefore(l),i=[0],n&&t.eachBefore(Lg),t}function l(n){var e=i[n.depth],r=n.x0+e,s=n.y0+e,l=n.x1-e,h=n.y1-e;l<r&&(r=l=(r+l)/2),h<s&&(s=h=(s+h)/2),n.x0=r,n.y0=s,n.x1=l,n.y1=h,n.children&&(e=i[n.depth+1]=o(n)/2,r+=f(n)-e,s+=a(n)-e,(l-=u(n)-e)<r&&(r=l=(r+l)/2),(h-=c(n)-e)<s&&(s=h=(s+h)/2),t(n,r,s,l,h))}return s.round=function(t){return arguments.length?(n=!!t,s):n},s.size=function(t){return arguments.length?(e=+t[0],r=+t[1],s):[e,r]},s.tile=function(n){return arguments.length?(t=vg(n),s):t},s.padding=function(t){return arguments.length?s.paddingInner(t).paddingOuter(t):s.paddingInner()},s.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:bg(+t),s):o},s.paddingOuter=function(t){return arguments.length?s.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):s.paddingTop()},s.paddingTop=function(t){return arguments.length?(a="function"==typeof t?t:bg(+t),s):a},s.paddingRight=function(t){return arguments.length?(u="function"==typeof t?t:bg(+t),s):u},s.paddingBottom=function(t){return arguments.length?(c="function"==typeof t?t:bg(+t),s):c},s.paddingLeft=function(t){return arguments.length?(f="function"==typeof t?t:bg(+t),s):f},s}function ly(t,n,e,r,i){var o,a,u=t.children,c=u.length,f=new Array(c+1);for(f[0]=a=o=0;o<c;++o)f[o+1]=a+=u[o].value;!function t(n,e,r,i,o,a,c){if(n>=e-1){var s=u[n];return s.x0=i,s.y0=o,s.x1=a,void(s.y1=c)}for(var l=f[n],h=r/2+l,d=n+1,p=e-1;d<p;){var g=d+p>>>1;f[g]<h?d=g+1:p=g}h-f[d-1]<f[d]-h&&n+1<d&&--d;var y=f[d]-l,v=r-y;if(a-i>c-o){var _=r?(i*v+a*y)/r:a;t(n,d,y,i,o,_,c),t(d,e,v,_,o,a,c)}else{var b=r?(o*v+c*y)/r:c;t(n,d,y,i,o,a,b),t(d,e,v,i,b,a,c)}}(0,c,t.value,n,e,r,i)}function hy(t,n,e,r,i){(1&t.depth?ay:jg)(t,n,e,r,i)}const dy=function t(n){function e(t,e,r,i,o){if((a=t._squarify)&&a.ratio===n)for(var a,u,c,f,s,l=-1,h=a.length,d=t.value;++l<h;){for(c=(u=a[l]).children,f=u.value=0,s=c.length;f<s;++f)u.value+=c[f].value;u.dice?jg(u,e,r,i,d?r+=(o-r)*u.value/d:o):ay(u,e,r,d?e+=(i-e)*u.value/d:i,o),d-=u.value}else t._squarify=a=cy(n,t,e,r,i,o),a.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(uy);function py(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}function gy(t,n){var e=Rr(+t,+n);return function(t){var n=e(t);return n-360*Math.floor(n/360)}}function yy(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}}function vy(t){return((t=Math.exp(t))+1/t)/2}const _y=function t(n,e,r){function i(t,i){var o,a,u=t[0],c=t[1],f=t[2],s=i[0],l=i[1],h=i[2],d=s-u,p=l-c,g=d*d+p*p;if(g<1e-12)a=Math.log(h/f)/n,o=function(t){return[u+t*d,c+t*p,f*Math.exp(n*t*a)]};else{var y=Math.sqrt(g),v=(h*h-f*f+r*g)/(2*f*e*y),_=(h*h-f*f-r*g)/(2*h*e*y),b=Math.log(Math.sqrt(v*v+1)-v),m=Math.log(Math.sqrt(_*_+1)-_);a=(m-b)/n,o=function(t){var r,i=t*a,o=vy(b),s=f/(e*y)*(o*(r=n*i+b,((r=Math.exp(2*r))-1)/(r+1))-function(t){return((t=Math.exp(t))-1/t)/2}(b));return[u+s*d,c+s*p,f*o/vy(n*i+b)]}}return o.duration=1e3*a*n/Math.SQRT2,o}return i.rho=function(n){var e=Math.max(.001,+n),r=e*e;return t(e,r,r*r)},i}(Math.SQRT2,2,4);function by(t){return function(n,e){var r=t((n=Ar(n)).h,(e=Ar(e)).h),i=qr(n.s,e.s),o=qr(n.l,e.l),a=qr(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=a(t),n+""}}}const my=by(Rr);var xy=by(qr);function wy(t,n){var e=qr((t=Ia(t)).l,(n=Ia(n)).l),r=qr(t.a,n.a),i=qr(t.b,n.b),o=qr(t.opacity,n.opacity);return function(n){return t.l=e(n),t.a=r(n),t.b=i(n),t.opacity=o(n),t+""}}function My(t){return function(n,e){var r=t((n=Ha(n)).h,(e=Ha(e)).h),i=qr(n.c,e.c),o=qr(n.l,e.l),a=qr(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=a(t),n+""}}}const Ay=My(Rr);var Ty=My(qr);function Sy(t){return function n(e){function r(n,r){var i=t((n=ru(n)).h,(r=ru(r)).h),o=qr(n.s,r.s),a=qr(n.l,r.l),u=qr(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=a(Math.pow(t,e)),n.opacity=u(t),n+""}}return e=+e,r.gamma=n,r}(1)}const Ey=Sy(Rr);var ky=Sy(qr);function Ny(t,n){void 0===n&&(n=t,t=Zr);for(var e=0,r=n.length-1,i=n[0],o=new Array(r<0?0:r);e<r;)o[e]=t(i,i=n[++e]);return function(t){var n=Math.max(0,Math.min(r-1,Math.floor(t*=r)));return o[n](t-n)}}function Cy(t,n){for(var e=new Array(n),r=0;r<n;++r)e[r]=t(r/(n-1));return e}function Py(t){for(var n,e=-1,r=t.length,i=t[r-1],o=0;++e<r;)n=i,i=t[e],o+=n[1]*i[0]-n[0]*i[1];return o/2}function zy(t){for(var n,e,r=-1,i=t.length,o=0,a=0,u=t[i-1],c=0;++r<i;)n=u,u=t[r],c+=e=n[0]*u[1]-u[0]*n[1],o+=(n[0]+u[0])*e,a+=(n[1]+u[1])*e;return[o/(c*=3),a/c]}function Dy(t,n){return t[0]-n[0]||t[1]-n[1]}function Ry(t){const n=t.length,e=[0,1];let r,i=2;for(r=2;r<n;++r){for(;i>1&&(o=t[e[i-2]],a=t[e[i-1]],u=t[r],(a[0]-o[0])*(u[1]-o[1])-(a[1]-o[1])*(u[0]-o[0])<=0);)--i;e[i++]=r}var o,a,u;return e.slice(0,i)}function qy(t){if((e=t.length)<3)return null;var n,e,r=new Array(e),i=new Array(e);for(n=0;n<e;++n)r[n]=[+t[n][0],+t[n][1],n];for(r.sort(Dy),n=0;n<e;++n)i[n]=[r[n][0],-r[n][1]];var o=Ry(r),a=Ry(i),u=a[0]===o[0],c=a[a.length-1]===o[o.length-1],f=[];for(n=o.length-1;n>=0;--n)f.push(t[r[o[n]][2]]);for(n=+u;n<a.length-c;++n)f.push(t[r[a[n]][2]]);return f}function Fy(t,n){for(var e,r,i=t.length,o=t[i-1],a=n[0],u=n[1],c=o[0],f=o[1],s=!1,l=0;l<i;++l)e=(o=t[l])[0],(r=o[1])>u!=f>u&&a<(c-e)*(u-r)/(f-r)+e&&(s=!s),c=e,f=r;return s}function Iy(t){for(var n,e,r=-1,i=t.length,o=t[i-1],a=o[0],u=o[1],c=0;++r<i;)n=a,e=u,n-=a=(o=t[r])[0],e-=u=o[1],c+=Math.hypot(n,e);return c}const Oy=Math.random,Uy=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(Oy),By=function t(n){function e(t,e){return arguments.length<2&&(e=t,t=0),t=Math.floor(t),e=Math.floor(e)-t,function(){return Math.floor(n()*e+t)}}return e.source=t,e}(Oy),Yy=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(Oy),Ly=function t(n){var e=Yy.source(n);function r(){var t=e.apply(this,arguments);return function(){return Math.exp(t())}}return r.source=t,r}(Oy),jy=function t(n){function e(t){return(t=+t)<=0?()=>0:function(){for(var e=0,r=t;r>1;--r)e+=n();return e+r*n()}}return e.source=t,e}(Oy),$y=function t(n){var e=jy.source(n);function r(t){if(0==(t=+t))return n;var r=e(t);return function(){return r()/t}}return r.source=t,r}(Oy),Hy=function t(n){function e(t){return function(){return-Math.log1p(-n())/t}}return e.source=t,e}(Oy),Xy=function t(n){function e(t){if((t=+t)<0)throw new RangeError("invalid alpha");return t=1/-t,function(){return Math.pow(1-n(),t)}}return e.source=t,e}(Oy),Gy=function t(n){function e(t){if((t=+t)<0||t>1)throw new RangeError("invalid p");return function(){return Math.floor(n()+t)}}return e.source=t,e}(Oy),Vy=function t(n){function e(t){if((t=+t)<0||t>1)throw new RangeError("invalid p");return 0===t?()=>1/0:1===t?()=>1:(t=Math.log1p(-t),function(){return 1+Math.floor(Math.log1p(-n())/t)})}return e.source=t,e}(Oy),Wy=function t(n){var e=Yy.source(n)();function r(t,r){if((t=+t)<0)throw new RangeError("invalid k");if(0===t)return()=>0;if(r=null==r?1:+r,1===t)return()=>-Math.log1p(-n())*r;var i=(t<1?t+1:t)-1/3,o=1/(3*Math.sqrt(i)),a=t<1?()=>Math.pow(n(),1/t):()=>1;return function(){do{do{var t=e(),u=1+o*t}while(u<=0);u*=u*u;var c=1-n()}while(c>=1-.0331*t*t*t*t&&Math.log(c)>=.5*t*t+i*(1-u+Math.log(u)));return i*u*a()*r}}return r.source=t,r}(Oy),Zy=function t(n){var e=Wy.source(n);function r(t,n){var r=e(t),i=e(n);return function(){var t=r();return 0===t?0:t/(t+i())}}return r.source=t,r}(Oy),Ky=function t(n){var e=Vy.source(n),r=Zy.source(n);function i(t,n){return t=+t,(n=+n)>=1?()=>t:n<=0?()=>0:function(){for(var i=0,o=t,a=n;o*a>16&&o*(1-a)>16;){var u=Math.floor((o+1)*a),c=r(u,o-u+1)();c<=a?(i+=u,o-=u,a=(a-c)/(1-c)):(o=u-1,a/=c)}for(var f=a<.5,s=e(f?a:1-a),l=s(),h=0;l<=o;++h)l+=s();return i+(f?h:o-h)}}return i.source=t,i}(Oy),Qy=function t(n){function e(t,e,r){var i;return 0==(t=+t)?i=t=>-Math.log(t):(t=1/t,i=n=>Math.pow(n,t)),e=null==e?0:+e,r=null==r?1:+r,function(){return e+r*i(-Math.log1p(-n()))}}return e.source=t,e}(Oy),Jy=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,function(){return t+e*Math.tan(Math.PI*n())}}return e.source=t,e}(Oy),tv=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,function(){var r=n();return t+e*Math.log(r/(1-r))}}return e.source=t,e}(Oy),nv=function t(n){var e=Wy.source(n),r=Ky.source(n);function i(t){return function(){for(var i=0,o=t;o>16;){var a=Math.floor(.875*o),u=e(a)();if(u>o)return i+r(a-1,o/u)();i+=a,o-=u}for(var c=-Math.log1p(-n()),f=0;c<=o;++f)c-=Math.log1p(-n());return i+f}}return i.source=t,i}(Oy),ev=1/4294967296;function rv(t=Math.random()){let n=0|(0<=t&&t<1?t/ev:Math.abs(t));return()=>(n=1664525*n+1013904223|0,ev*(n>>>0))}function iv(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}function ov(t,n){switch(arguments.length){case 0:break;case 1:"function"==typeof t?this.interpolator(t):this.range(t);break;default:this.domain(t),"function"==typeof n?this.interpolator(n):this.range(n)}return this}const av=Symbol("implicit");function uv(){var t=new D,n=[],e=[],r=av;function i(i){let o=t.get(i);if(void 0===o){if(r!==av)return r;t.set(i,o=n.push(i)-1)}return e[o%e.length]}return i.domain=function(e){if(!arguments.length)return n.slice();n=[],t=new D;for(const r of e)t.has(r)||t.set(r,n.push(r)-1);return i},i.range=function(t){return arguments.length?(e=Array.from(t),i):e.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return uv(n,e).unknown(r)},iv.apply(i,arguments),i}function cv(){var t,n,e=uv().unknown(void 0),r=e.domain,i=e.range,o=0,a=1,u=!1,c=0,f=0,s=.5;function l(){var e=r().length,l=a<o,h=l?a:o,d=l?o:a;t=(d-h)/Math.max(1,e-c+2*f),u&&(t=Math.floor(t)),h+=(d-h-t*(e-c))*s,n=t*(1-c),u&&(h=Math.round(h),n=Math.round(n));var p=Dt(e).map((function(n){return h+t*n}));return i(l?p.reverse():p)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),l()):r()},e.range=function(t){return arguments.length?([o,a]=t,o=+o,a=+a,l()):[o,a]},e.rangeRound=function(t){return[o,a]=t,o=+o,a=+a,u=!0,l()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(u=!!t,l()):u},e.padding=function(t){return arguments.length?(c=Math.min(1,f=+t),l()):c},e.paddingInner=function(t){return arguments.length?(c=Math.min(1,t),l()):c},e.paddingOuter=function(t){return arguments.length?(f=+t,l()):f},e.align=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),l()):s},e.copy=function(){return cv(r(),[o,a]).round(u).paddingInner(c).paddingOuter(f).align(s)},iv.apply(l(),arguments)}function fv(t){var n=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return fv(n())},t}function sv(){return fv(cv.apply(null,arguments).paddingInner(1))}function lv(t){return+t}var hv=[0,1];function dv(t){return t}function pv(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function gv(t,n,e){var r=t[0],i=t[1],o=n[0],a=n[1];return i<r?(r=pv(i,r),o=e(a,o)):(r=pv(r,i),o=e(o,a)),function(t){return o(r(t))}}function yv(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<r;)i[a]=pv(t[a],t[a+1]),o[a]=e(n[a],n[a+1]);return function(n){var e=d(t,n,1,r)-1;return o[e](i[e](n))}}function vv(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function _v(){var t,n,e,r,i,o,a=hv,u=hv,c=Zr,f=dv;function s(){var t,n,e,c=Math.min(a.length,u.length);return f!==dv&&(t=a[0],n=a[c-1],t>n&&(e=t,t=n,n=e),f=function(e){return Math.max(t,Math.min(n,e))}),r=c>2?yv:gv,i=o=null,l}function l(n){return null==n||isNaN(n=+n)?e:(i||(i=r(a.map(t),u,c)))(t(f(n)))}return l.invert=function(e){return f(n((o||(o=r(u,a.map(t),Hr)))(e)))},l.domain=function(t){return arguments.length?(a=Array.from(t,lv),s()):a.slice()},l.range=function(t){return arguments.length?(u=Array.from(t),s()):u.slice()},l.rangeRound=function(t){return u=Array.from(t),c=yy,s()},l.clamp=function(t){return arguments.length?(f=!!t||dv,s()):f!==dv},l.interpolate=function(t){return arguments.length?(c=t,s()):c},l.unknown=function(t){return arguments.length?(e=t,l):e},function(e,r){return t=e,n=r,s()}}function bv(){return _v()(dv,dv)}function mv(t,n,e,r){var i,o=st(t,n,e);switch((r=Wf(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=cs(o,a))||(r.precision=i),es(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=fs(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=us(o))||(r.precision=i-2*("%"===r.type))}return ns(r)}function xv(t){var n=t.domain;return t.ticks=function(t){var e=n();return ct(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return mv(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i,o=n(),a=0,u=o.length-1,c=o[a],f=o[u],s=10;for(f<c&&(i=c,c=f,f=i,i=a,a=u,u=i);s-- >0;){if((i=ft(c,f,e))===r)return o[a]=c,o[u]=f,n(o);if(i>0)c=Math.floor(c/i)*i,f=Math.ceil(f/i)*i;else{if(!(i<0))break;c=Math.ceil(c*i)/i,f=Math.floor(f*i)/i}r=i}return t},t}function wv(){var t=bv();return t.copy=function(){return vv(t,wv())},iv.apply(t,arguments),xv(t)}function Mv(t){var n;function e(t){return null==t||isNaN(t=+t)?n:t}return e.invert=e,e.domain=e.range=function(n){return arguments.length?(t=Array.from(n,lv),e):t.slice()},e.unknown=function(t){return arguments.length?(n=t,e):n},e.copy=function(){return Mv(t).unknown(n)},t=arguments.length?Array.from(t,lv):[0,1],xv(e)}function Av(t,n){var e,r=0,i=(t=t.slice()).length-1,o=t[r],a=t[i];return a<o&&(e=r,r=i,i=e,e=o,o=a,a=e),t[r]=n.floor(o),t[i]=n.ceil(a),t}function Tv(t){return Math.log(t)}function Sv(t){return Math.exp(t)}function Ev(t){return-Math.log(-t)}function kv(t){return-Math.exp(-t)}function Nv(t){return isFinite(t)?+("1e"+t):t<0?0:t}function Cv(t){return(n,e)=>-t(-n,e)}function Pv(t){const n=t(Tv,Sv),e=n.domain;let r,i,o=10;function a(){return r=function(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),n=>Math.log(n)/t)}(o),i=function(t){return 10===t?Nv:t===Math.E?Math.exp:n=>Math.pow(t,n)}(o),e()[0]<0?(r=Cv(r),i=Cv(i),t(Ev,kv)):t(Tv,Sv),n}return n.base=function(t){return arguments.length?(o=+t,a()):o},n.domain=function(t){return arguments.length?(e(t),a()):e()},n.ticks=t=>{const n=e();let a=n[0],u=n[n.length-1];const c=u<a;c&&([a,u]=[u,a]);let f,s,l=r(a),h=r(u);const d=null==t?10:+t;let p=[];if(!(o%1)&&h-l<d){if(l=Math.floor(l),h=Math.ceil(h),a>0){for(;l<=h;++l)for(f=1;f<o;++f)if(s=l<0?f/i(-l):f*i(l),!(s<a)){if(s>u)break;p.push(s)}}else for(;l<=h;++l)for(f=o-1;f>=1;--f)if(s=l>0?f/i(-l):f*i(l),!(s<a)){if(s>u)break;p.push(s)}2*p.length<d&&(p=ct(a,u,d))}else p=ct(l,h,Math.min(h-l,d)).map(i);return c?p.reverse():p},n.tickFormat=(t,e)=>{if(null==t&&(t=10),null==e&&(e=10===o?"s":","),"function"!=typeof e&&(o%1||null!=(e=Wf(e)).precision||(e.trim=!0),e=ns(e)),t===1/0)return e;const a=Math.max(1,o*t/n.ticks().length);return t=>{let n=t/i(Math.round(r(t)));return n*o<o-.5&&(n*=o),n<=a?e(t):""}},n.nice=()=>e(Av(e(),{floor:t=>i(Math.floor(r(t))),ceil:t=>i(Math.ceil(r(t)))})),n}function zv(){const t=Pv(_v()).domain([1,10]);return t.copy=()=>vv(t,zv()).base(t.base()),iv.apply(t,arguments),t}function Dv(t){return function(n){return Math.sign(n)*Math.log1p(Math.abs(n/t))}}function Rv(t){return function(n){return Math.sign(n)*Math.expm1(Math.abs(n))*t}}function qv(t){var n=1,e=t(Dv(n),Rv(n));return e.constant=function(e){return arguments.length?t(Dv(n=+e),Rv(n)):n},xv(e)}function Fv(){var t=qv(_v());return t.copy=function(){return vv(t,Fv()).constant(t.constant())},iv.apply(t,arguments)}function Iv(t){return function(n){return n<0?-Math.pow(-n,t):Math.pow(n,t)}}function Ov(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function Uv(t){return t<0?-t*t:t*t}function Bv(t){var n=t(dv,dv),e=1;function r(){return 1===e?t(dv,dv):.5===e?t(Ov,Uv):t(Iv(e),Iv(1/e))}return n.exponent=function(t){return arguments.length?(e=+t,r()):e},xv(n)}function Yv(){var t=Bv(_v());return t.copy=function(){return vv(t,Yv()).exponent(t.exponent())},iv.apply(t,arguments),t}function Lv(){return Yv.apply(null,arguments).exponent(.5)}function jv(t){return Math.sign(t)*t*t}function $v(t){return Math.sign(t)*Math.sqrt(Math.abs(t))}function Hv(){var t,n=bv(),e=[0,1],r=!1;function i(e){var i=$v(n(e));return isNaN(i)?t:r?Math.round(i):i}return i.invert=function(t){return n.invert(jv(t))},i.domain=function(t){return arguments.length?(n.domain(t),i):n.domain()},i.range=function(t){return arguments.length?(n.range((e=Array.from(t,lv)).map(jv)),i):e.slice()},i.rangeRound=function(t){return i.range(t).round(!0)},i.round=function(t){return arguments.length?(r=!!t,i):r},i.clamp=function(t){return arguments.length?(n.clamp(t),i):n.clamp()},i.unknown=function(n){return arguments.length?(t=n,i):t},i.copy=function(){return Hv(n.domain(),e).round(r).clamp(n.clamp()).unknown(t)},iv.apply(i,arguments),xv(i)}function Xv(){var t,n=[],e=[],i=[];function o(){var t=0,r=Math.max(1,e.length);for(i=new Array(r-1);++t<r;)i[t-1]=wt(n,t/r);return a}function a(n){return null==n||isNaN(n=+n)?t:e[d(i,n)]}return a.invertExtent=function(t){var r=e.indexOf(t);return r<0?[NaN,NaN]:[r>0?i[r-1]:n[0],r<i.length?i[r]:n[n.length-1]]},a.domain=function(t){if(!arguments.length)return n.slice();n=[];for(let e of t)null==e||isNaN(e=+e)||n.push(e);return n.sort(r),o()},a.range=function(t){return arguments.length?(e=Array.from(t),o()):e.slice()},a.unknown=function(n){return arguments.length?(t=n,a):t},a.quantiles=function(){return i.slice()},a.copy=function(){return Xv().domain(n).range(e).unknown(t)},iv.apply(a,arguments)}function Gv(){var t,n=0,e=1,r=1,i=[.5],o=[0,1];function a(n){return null!=n&&n<=n?o[d(i,n,0,r)]:t}function u(){var t=-1;for(i=new Array(r);++t<r;)i[t]=((t+1)*e-(t-r)*n)/(r+1);return a}return a.domain=function(t){return arguments.length?([n,e]=t,n=+n,e=+e,u()):[n,e]},a.range=function(t){return arguments.length?(r=(o=Array.from(t)).length-1,u()):o.slice()},a.invertExtent=function(t){var a=o.indexOf(t);return a<0?[NaN,NaN]:a<1?[n,i[0]]:a>=r?[i[r-1],e]:[i[a-1],i[a]]},a.unknown=function(n){return arguments.length?(t=n,a):a},a.thresholds=function(){return i.slice()},a.copy=function(){return Gv().domain([n,e]).range(o).unknown(t)},iv.apply(xv(a),arguments)}function Vv(){var t,n=[.5],e=[0,1],r=1;function i(i){return null!=i&&i<=i?e[d(n,i,0,r)]:t}return i.domain=function(t){return arguments.length?(n=Array.from(t),r=Math.min(n.length,e.length-1),i):n.slice()},i.range=function(t){return arguments.length?(e=Array.from(t),r=Math.min(n.length,e.length-1),i):e.slice()},i.invertExtent=function(t){var r=e.indexOf(t);return[n[r-1],n[r]]},i.unknown=function(n){return arguments.length?(t=n,i):t},i.copy=function(){return Vv().domain(n).range(e).unknown(t)},iv.apply(i,arguments)}const Wv=1e3,Zv=6e4,Kv=36e5,Qv=864e5,Jv=6048e5,t_=31536e6;var n_=new Date,e_=new Date;function r_(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=function(n){return t(n=new Date(+n)),n},i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var a,u=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return u;do{u.push(a=new Date(+e)),n(e,o),t(e)}while(a<e&&e<r);return u},i.filter=function(e){return r_((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return n_.setTime(+n),e_.setTime(+r),t(n_),t(e_),Math.floor(e(n_,e_))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var i_=r_((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t}));i_.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?r_((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):i_:null};const o_=i_;var a_=i_.range,u_=r_((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+n*Wv)}),(function(t,n){return(n-t)/Wv}),(function(t){return t.getUTCSeconds()}));const c_=u_;var f_=u_.range,s_=r_((function(t){t.setTime(t-t.getMilliseconds()-t.getSeconds()*Wv)}),(function(t,n){t.setTime(+t+n*Zv)}),(function(t,n){return(n-t)/Zv}),(function(t){return t.getMinutes()}));const l_=s_;var h_=s_.range,d_=r_((function(t){t.setTime(t-t.getMilliseconds()-t.getSeconds()*Wv-t.getMinutes()*Zv)}),(function(t,n){t.setTime(+t+n*Kv)}),(function(t,n){return(n-t)/Kv}),(function(t){return t.getHours()}));const p_=d_;var g_=d_.range,y_=r_((t=>t.setHours(0,0,0,0)),((t,n)=>t.setDate(t.getDate()+n)),((t,n)=>(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Zv)/Qv),(t=>t.getDate()-1));const v_=y_;var __=y_.range;function b_(t){return r_((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Zv)/Jv}))}var m_=b_(0),x_=b_(1),w_=b_(2),M_=b_(3),A_=b_(4),T_=b_(5),S_=b_(6),E_=m_.range,k_=x_.range,N_=w_.range,C_=M_.range,P_=A_.range,z_=T_.range,D_=S_.range,R_=r_((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()}));const q_=R_;var F_=R_.range,I_=r_((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));I_.every=function(t){return isFinite(t=Math.floor(t))&&t>0?r_((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};const O_=I_;var U_=I_.range,B_=r_((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+n*Zv)}),(function(t,n){return(n-t)/Zv}),(function(t){return t.getUTCMinutes()}));const Y_=B_;var L_=B_.range,j_=r_((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+n*Kv)}),(function(t,n){return(n-t)/Kv}),(function(t){return t.getUTCHours()}));const $_=j_;var H_=j_.range,X_=r_((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/Qv}),(function(t){return t.getUTCDate()-1}));const G_=X_;var V_=X_.range;function W_(t){return r_((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/Jv}))}var Z_=W_(0),K_=W_(1),Q_=W_(2),J_=W_(3),tb=W_(4),nb=W_(5),eb=W_(6),rb=Z_.range,ib=K_.range,ob=Q_.range,ab=J_.range,ub=tb.range,cb=nb.range,fb=eb.range,sb=r_((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()}));const lb=sb;var hb=sb.range,db=r_((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));db.every=function(t){return isFinite(t=Math.floor(t))&&t>0?r_((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};const pb=db;var gb=db.range;function yb(t,n,e,r,i,a){const u=[[c_,1,Wv],[c_,5,5e3],[c_,15,15e3],[c_,30,3e4],[a,1,Zv],[a,5,3e5],[a,15,9e5],[a,30,18e5],[i,1,Kv],[i,3,108e5],[i,6,216e5],[i,12,432e5],[r,1,Qv],[r,2,1728e5],[e,1,Jv],[n,1,2592e6],[n,3,7776e6],[t,1,t_]];function c(n,e,r){const i=Math.abs(e-n)/r,a=o((([,,t])=>t)).right(u,i);if(a===u.length)return t.every(st(n/t_,e/t_,r));if(0===a)return o_.every(Math.max(st(n,e,r),1));const[c,f]=u[i/u[a-1][2]<u[a][2]/i?a-1:a];return c.every(f)}return[function(t,n,e){const r=n<t;r&&([t,n]=[n,t]);const i=e&&"function"==typeof e.range?e:c(t,n,e),o=i?i.range(t,+n+1):[];return r?o.reverse():o},c]}const[vb,_b]=yb(pb,lb,Z_,G_,$_,Y_),[bb,mb]=yb(O_,q_,m_,v_,p_,l_);function xb(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function wb(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Mb(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}function Ab(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,u=t.months,c=t.shortMonths,f=Fb(i),s=Ib(i),l=Fb(o),h=Ib(o),d=Fb(a),p=Ib(a),g=Fb(u),y=Ib(u),v=Fb(c),_=Ib(c),b={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:im,e:im,f:fm,g:mm,G:wm,H:om,I:am,j:um,L:cm,m:sm,M:lm,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Hm,s:Xm,S:hm,u:dm,U:pm,V:ym,w:vm,W:_m,x:null,X:null,y:bm,Y:xm,Z:Mm,"%":$m},m={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:Am,e:Am,f:Nm,g:Bm,G:Lm,H:Tm,I:Sm,j:Em,L:km,m:Cm,M:Pm,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Hm,s:Xm,S:zm,u:Dm,U:Rm,V:Fm,w:Im,W:Om,x:null,X:null,y:Um,Y:Ym,Z:jm,"%":$m},x={a:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.w=p.get(r[0].toLowerCase()),e+r[0].length):-1},A:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.w=h.get(r[0].toLowerCase()),e+r[0].length):-1},b:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=_.get(r[0].toLowerCase()),e+r[0].length):-1},B:function(t,n,e){var r=g.exec(n.slice(e));return r?(t.m=y.get(r[0].toLowerCase()),e+r[0].length):-1},c:function(t,e,r){return A(t,n,e,r)},d:Vb,e:Vb,f:tm,g:$b,G:jb,H:Zb,I:Zb,j:Wb,L:Jb,m:Gb,M:Kb,p:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.p=s.get(r[0].toLowerCase()),e+r[0].length):-1},q:Xb,Q:em,s:rm,S:Qb,u:Ub,U:Bb,V:Yb,w:Ob,W:Lb,x:function(t,n,r){return A(t,e,n,r)},X:function(t,n,e){return A(t,r,n,e)},y:$b,Y:jb,Z:Hb,"%":nm};function w(t,n){return function(e){var r,i,o,a=[],u=-1,c=0,f=t.length;for(e instanceof Date||(e=new Date(+e));++u<f;)37===t.charCodeAt(u)&&(a.push(t.slice(c,u)),null!=(i=Cb[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),c=u+1);return a.push(t.slice(c,u)),a.join("")}}function M(t,n){return function(e){var r,i,o=Mb(1900,void 0,1);if(A(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(n&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=wb(Mb(o.y,0,1))).getUTCDay(),r=i>4||0===i?K_.ceil(r):K_(r),r=G_.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=xb(Mb(o.y,0,1))).getDay(),r=i>4||0===i?x_.ceil(r):x_(r),r=v_.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?wb(Mb(o.y,0,1)).getUTCDay():xb(Mb(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,wb(o)):xb(o)}}function A(t,n,e,r){for(var i,o,a=0,u=n.length,c=e.length;a<u;){if(r>=c)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=x[i in Cb?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return b.x=w(e,b),b.X=w(r,b),b.c=w(n,b),m.x=w(e,m),m.X=w(r,m),m.c=w(n,m),{format:function(t){var n=w(t+="",b);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",m);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t+="",!0);return n.toString=function(){return t},n}}}var Tb,Sb,Eb,kb,Nb,Cb={"-":"",_:" ",0:"0"},Pb=/^\s*\d+/,zb=/^%/,Db=/[\\^$*+?|[\]().{}]/g;function Rb(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function qb(t){return t.replace(Db,"\\$&")}function Fb(t){return new RegExp("^(?:"+t.map(qb).join("|")+")","i")}function Ib(t){return new Map(t.map(((t,n)=>[t.toLowerCase(),n])))}function Ob(t,n,e){var r=Pb.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Ub(t,n,e){var r=Pb.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function Bb(t,n,e){var r=Pb.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function Yb(t,n,e){var r=Pb.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function Lb(t,n,e){var r=Pb.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function jb(t,n,e){var r=Pb.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function $b(t,n,e){var r=Pb.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function Hb(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function Xb(t,n,e){var r=Pb.exec(n.slice(e,e+1));return r?(t.q=3*r[0]-3,e+r[0].length):-1}function Gb(t,n,e){var r=Pb.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function Vb(t,n,e){var r=Pb.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function Wb(t,n,e){var r=Pb.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Zb(t,n,e){var r=Pb.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Kb(t,n,e){var r=Pb.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Qb(t,n,e){var r=Pb.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function Jb(t,n,e){var r=Pb.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function tm(t,n,e){var r=Pb.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function nm(t,n,e){var r=zb.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function em(t,n,e){var r=Pb.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function rm(t,n,e){var r=Pb.exec(n.slice(e));return r?(t.s=+r[0],e+r[0].length):-1}function im(t,n){return Rb(t.getDate(),n,2)}function om(t,n){return Rb(t.getHours(),n,2)}function am(t,n){return Rb(t.getHours()%12||12,n,2)}function um(t,n){return Rb(1+v_.count(O_(t),t),n,3)}function cm(t,n){return Rb(t.getMilliseconds(),n,3)}function fm(t,n){return cm(t,n)+"000"}function sm(t,n){return Rb(t.getMonth()+1,n,2)}function lm(t,n){return Rb(t.getMinutes(),n,2)}function hm(t,n){return Rb(t.getSeconds(),n,2)}function dm(t){var n=t.getDay();return 0===n?7:n}function pm(t,n){return Rb(m_.count(O_(t)-1,t),n,2)}function gm(t){var n=t.getDay();return n>=4||0===n?A_(t):A_.ceil(t)}function ym(t,n){return t=gm(t),Rb(A_.count(O_(t),t)+(4===O_(t).getDay()),n,2)}function vm(t){return t.getDay()}function _m(t,n){return Rb(x_.count(O_(t)-1,t),n,2)}function bm(t,n){return Rb(t.getFullYear()%100,n,2)}function mm(t,n){return Rb((t=gm(t)).getFullYear()%100,n,2)}function xm(t,n){return Rb(t.getFullYear()%1e4,n,4)}function wm(t,n){var e=t.getDay();return Rb((t=e>=4||0===e?A_(t):A_.ceil(t)).getFullYear()%1e4,n,4)}function Mm(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+Rb(n/60|0,"0",2)+Rb(n%60,"0",2)}function Am(t,n){return Rb(t.getUTCDate(),n,2)}function Tm(t,n){return Rb(t.getUTCHours(),n,2)}function Sm(t,n){return Rb(t.getUTCHours()%12||12,n,2)}function Em(t,n){return Rb(1+G_.count(pb(t),t),n,3)}function km(t,n){return Rb(t.getUTCMilliseconds(),n,3)}function Nm(t,n){return km(t,n)+"000"}function Cm(t,n){return Rb(t.getUTCMonth()+1,n,2)}function Pm(t,n){return Rb(t.getUTCMinutes(),n,2)}function zm(t,n){return Rb(t.getUTCSeconds(),n,2)}function Dm(t){var n=t.getUTCDay();return 0===n?7:n}function Rm(t,n){return Rb(Z_.count(pb(t)-1,t),n,2)}function qm(t){var n=t.getUTCDay();return n>=4||0===n?tb(t):tb.ceil(t)}function Fm(t,n){return t=qm(t),Rb(tb.count(pb(t),t)+(4===pb(t).getUTCDay()),n,2)}function Im(t){return t.getUTCDay()}function Om(t,n){return Rb(K_.count(pb(t)-1,t),n,2)}function Um(t,n){return Rb(t.getUTCFullYear()%100,n,2)}function Bm(t,n){return Rb((t=qm(t)).getUTCFullYear()%100,n,2)}function Ym(t,n){return Rb(t.getUTCFullYear()%1e4,n,4)}function Lm(t,n){var e=t.getUTCDay();return Rb((t=e>=4||0===e?tb(t):tb.ceil(t)).getUTCFullYear()%1e4,n,4)}function jm(){return"+0000"}function $m(){return"%"}function Hm(t){return+t}function Xm(t){return Math.floor(+t/1e3)}function Gm(t){return Tb=Ab(t),Sb=Tb.format,Eb=Tb.parse,kb=Tb.utcFormat,Nb=Tb.utcParse,Tb}function Vm(t){return new Date(t)}function Wm(t){return t instanceof Date?+t:+new Date(+t)}function Zm(t,n,e,r,i,o,a,u,c,f){var s=bv(),l=s.invert,h=s.domain,d=f(".%L"),p=f(":%S"),g=f("%I:%M"),y=f("%I %p"),v=f("%a %d"),_=f("%b %d"),b=f("%B"),m=f("%Y");function x(t){return(c(t)<t?d:u(t)<t?p:a(t)<t?g:o(t)<t?y:r(t)<t?i(t)<t?v:_:e(t)<t?b:m)(t)}return s.invert=function(t){return new Date(l(t))},s.domain=function(t){return arguments.length?h(Array.from(t,Wm)):h().map(Vm)},s.ticks=function(n){var e=h();return t(e[0],e[e.length-1],null==n?10:n)},s.tickFormat=function(t,n){return null==n?x:f(n)},s.nice=function(t){var e=h();return t&&"function"==typeof t.range||(t=n(e[0],e[e.length-1],null==t?10:t)),t?h(Av(e,t)):s},s.copy=function(){return vv(s,Zm(t,n,e,r,i,o,a,u,c,f))},s}function Km(){return iv.apply(Zm(bb,mb,O_,q_,m_,v_,p_,l_,c_,Sb).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}function Qm(){return iv.apply(Zm(vb,_b,pb,lb,Z_,G_,$_,Y_,c_,kb).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)}function Jm(){var t,n,e,r,i,o=0,a=1,u=dv,c=!1;function f(n){return null==n||isNaN(n=+n)?i:u(0===e?.5:(n=(r(n)-t)*e,c?Math.max(0,Math.min(1,n)):n))}function s(t){return function(n){var e,r;return arguments.length?([e,r]=n,u=t(e,r),f):[u(0),u(1)]}}return f.domain=function(i){return arguments.length?([o,a]=i,t=r(o=+o),n=r(a=+a),e=t===n?0:1/(n-t),f):[o,a]},f.clamp=function(t){return arguments.length?(c=!!t,f):c},f.interpolator=function(t){return arguments.length?(u=t,f):u},f.range=s(Zr),f.rangeRound=s(yy),f.unknown=function(t){return arguments.length?(i=t,f):i},function(i){return r=i,t=i(o),n=i(a),e=t===n?0:1/(n-t),f}}function tx(t,n){return n.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function nx(){var t=xv(Jm()(dv));return t.copy=function(){return tx(t,nx())},ov.apply(t,arguments)}function ex(){var t=Pv(Jm()).domain([1,10]);return t.copy=function(){return tx(t,ex()).base(t.base())},ov.apply(t,arguments)}function rx(){var t=qv(Jm());return t.copy=function(){return tx(t,rx()).constant(t.constant())},ov.apply(t,arguments)}function ix(){var t=Bv(Jm());return t.copy=function(){return tx(t,ix()).exponent(t.exponent())},ov.apply(t,arguments)}function ox(){return ix.apply(null,arguments).exponent(.5)}function ax(){var t=[],n=dv;function e(e){if(null!=e&&!isNaN(e=+e))return n((d(t,e,1)-1)/(t.length-1))}return e.domain=function(n){if(!arguments.length)return t.slice();t=[];for(let e of n)null==e||isNaN(e=+e)||t.push(e);return t.sort(r),e},e.interpolator=function(t){return arguments.length?(n=t,e):n},e.range=function(){return t.map(((e,r)=>n(r/(t.length-1))))},e.quantiles=function(n){return Array.from({length:n+1},((e,r)=>xt(t,r/n)))},e.copy=function(){return ax(n).domain(t)},ov.apply(e,arguments)}function ux(){var t,n,e,r,i,o,a,u=0,c=.5,f=1,s=1,l=dv,h=!1;function d(t){return isNaN(t=+t)?a:(t=.5+((t=+o(t))-n)*(s*t<s*n?r:i),l(h?Math.max(0,Math.min(1,t)):t))}function p(t){return function(n){var e,r,i;return arguments.length?([e,r,i]=n,l=Ny(t,[e,r,i]),d):[l(0),l(.5),l(1)]}}return d.domain=function(a){return arguments.length?([u,c,f]=a,t=o(u=+u),n=o(c=+c),e=o(f=+f),r=t===n?0:.5/(n-t),i=n===e?0:.5/(e-n),s=n<t?-1:1,d):[u,c,f]},d.clamp=function(t){return arguments.length?(h=!!t,d):h},d.interpolator=function(t){return arguments.length?(l=t,d):l},d.range=p(Zr),d.rangeRound=p(yy),d.unknown=function(t){return arguments.length?(a=t,d):a},function(a){return o=a,t=a(u),n=a(c),e=a(f),r=t===n?0:.5/(n-t),i=n===e?0:.5/(e-n),s=n<t?-1:1,d}}function cx(){var t=xv(ux()(dv));return t.copy=function(){return tx(t,cx())},ov.apply(t,arguments)}function fx(){var t=Pv(ux()).domain([.1,1,10]);return t.copy=function(){return tx(t,fx()).base(t.base())},ov.apply(t,arguments)}function sx(){var t=qv(ux());return t.copy=function(){return tx(t,sx()).constant(t.constant())},ov.apply(t,arguments)}function lx(){var t=Bv(ux());return t.copy=function(){return tx(t,lx()).exponent(t.exponent())},ov.apply(t,arguments)}function hx(){return lx.apply(null,arguments).exponent(.5)}function dx(t){for(var n=t.length/6|0,e=new Array(n),r=0;r<n;)e[r]="#"+t.slice(6*r,6*++r);return e}Gm({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});const px=dx("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),gx=dx("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),yx=dx("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),vx=dx("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),_x=dx("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),bx=dx("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),mx=dx("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),xx=dx("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),wx=dx("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),Mx=dx("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab"),Ax=t=>Or(t[t.length-1]);var Tx=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(dx);const Sx=Ax(Tx);var Ex=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(dx);const kx=Ax(Ex);var Nx=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(dx);const Cx=Ax(Nx);var Px=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(dx);const zx=Ax(Px);var Dx=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(dx);const Rx=Ax(Dx);var qx=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(dx);const Fx=Ax(qx);var Ix=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(dx);const Ox=Ax(Ix);var Ux=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(dx);const Bx=Ax(Ux);var Yx=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(dx);const Lx=Ax(Yx);var jx=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(dx);const $x=Ax(jx);var Hx=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(dx);const Xx=Ax(Hx);var Gx=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(dx);const Vx=Ax(Gx);var Wx=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(dx);const Zx=Ax(Wx);var Kx=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(dx);const Qx=Ax(Kx);var Jx=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(dx);const tw=Ax(Jx);var nw=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(dx);const ew=Ax(nw);var rw=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(dx);const iw=Ax(rw);var ow=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(dx);const aw=Ax(ow);var uw=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(dx);const cw=Ax(uw);var fw=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(dx);const sw=Ax(fw);var lw=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(dx);const hw=Ax(lw);var dw=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(dx);const pw=Ax(dw);var gw=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(dx);const yw=Ax(gw);var vw=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(dx);const _w=Ax(vw);var bw=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(dx);const mw=Ax(bw);var xw=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(dx);const ww=Ax(xw);var Mw=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(dx);const Aw=Ax(Mw);function Tw(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(-4.54-t*(35.34-t*(2381.73-t*(6402.7-t*(7024.72-2710.57*t)))))))+", "+Math.max(0,Math.min(255,Math.round(32.49+t*(170.73+t*(52.82-t*(131.46-t*(176.58-67.37*t)))))))+", "+Math.max(0,Math.min(255,Math.round(81.24+t*(442.36-t*(2482.43-t*(6167.24-t*(6614.94-2475.67*t)))))))+")"}const Sw=ky(ru(300,.5,0),ru(-240,.5,1));var Ew=ky(ru(-100,.75,.35),ru(80,1.5,.8)),kw=ky(ru(260,.75,.35),ru(80,1.5,.8)),Nw=ru();function Cw(t){(t<0||t>1)&&(t-=Math.floor(t));var n=Math.abs(t-.5);return Nw.h=360*t-100,Nw.s=1.5-1.5*n,Nw.l=.8-.9*n,Nw+""}var Pw=gr(),zw=Math.PI/3,Dw=2*Math.PI/3;function Rw(t){var n;return t=(.5-t)*Math.PI,Pw.r=255*(n=Math.sin(t))*n,Pw.g=255*(n=Math.sin(t+zw))*n,Pw.b=255*(n=Math.sin(t+Dw))*n,Pw+""}function qw(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(34.61+t*(1172.33-t*(10793.56-t*(33300.12-t*(38394.49-14825.05*t)))))))+", "+Math.max(0,Math.min(255,Math.round(23.31+t*(557.33+t*(1225.33-t*(3574.96-t*(1073.77+707.56*t)))))))+", "+Math.max(0,Math.min(255,Math.round(27.2+t*(3211.1-t*(15327.97-t*(27814-t*(22569.18-6838.66*t)))))))+")"}function Fw(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}const Iw=Fw(dx("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));var Ow=Fw(dx("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Uw=Fw(dx("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Bw=Fw(dx("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function Yw(t){return Be(Te(t).call(document.documentElement))}var Lw=0;function jw(){return new $w}function $w(){this._="@"+(++Lw).toString(36)}function Hw(t,n){return t.target&&(t=Kr(t),void 0===n&&(n=t.currentTarget),t=t.touches||[t]),Array.from(t,(t=>Qr(t,n)))}function Xw(t){return"string"==typeof t?new Ie([document.querySelectorAll(t)],[document.documentElement]):new Ie([En(t)],Fe)}function Gw(t){return function(){return t}}$w.prototype=jw.prototype={constructor:$w,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};const Vw=Math.abs,Ww=Math.atan2,Zw=Math.cos,Kw=Math.max,Qw=Math.min,Jw=Math.sin,tM=Math.sqrt,nM=1e-12,eM=Math.PI,rM=eM/2,iM=2*eM;function oM(t){return t>1?0:t<-1?eM:Math.acos(t)}function aM(t){return t>=1?rM:t<=-1?-rM:Math.asin(t)}function uM(t){return t.innerRadius}function cM(t){return t.outerRadius}function fM(t){return t.startAngle}function sM(t){return t.endAngle}function lM(t){return t&&t.padAngle}function hM(t,n,e,r,i,o,a,u){var c=e-t,f=r-n,s=a-i,l=u-o,h=l*c-s*f;if(!(h*h<nM))return[t+(h=(s*(n-o)-l*(t-i))/h)*c,n+h*f]}function dM(t,n,e,r,i,o,a){var u=t-e,c=n-r,f=(a?o:-o)/tM(u*u+c*c),s=f*c,l=-f*u,h=t+s,d=n+l,p=e+s,g=r+l,y=(h+p)/2,v=(d+g)/2,_=p-h,b=g-d,m=_*_+b*b,x=i-o,w=h*g-p*d,M=(b<0?-1:1)*tM(Kw(0,x*x*m-w*w)),A=(w*b-_*M)/m,T=(-w*_-b*M)/m,S=(w*b+_*M)/m,E=(-w*_+b*M)/m,k=A-y,N=T-v,C=S-y,P=E-v;return k*k+N*N>C*C+P*P&&(A=S,T=E),{cx:A,cy:T,x01:-s,y01:-l,x11:A*(i/x-1),y11:T*(i/x-1)}}function pM(){var t=uM,n=cM,e=Gw(0),r=null,i=fM,o=sM,a=lM,u=null;function c(){var c,f,s=+t.apply(this,arguments),l=+n.apply(this,arguments),h=i.apply(this,arguments)-rM,d=o.apply(this,arguments)-rM,p=Vw(d-h),g=d>h;if(u||(u=c=ga()),l<s&&(f=l,l=s,s=f),l>nM)if(p>iM-nM)u.moveTo(l*Zw(h),l*Jw(h)),u.arc(0,0,l,h,d,!g),s>nM&&(u.moveTo(s*Zw(d),s*Jw(d)),u.arc(0,0,s,d,h,g));else{var y,v,_=h,b=d,m=h,x=d,w=p,M=p,A=a.apply(this,arguments)/2,T=A>nM&&(r?+r.apply(this,arguments):tM(s*s+l*l)),S=Qw(Vw(l-s)/2,+e.apply(this,arguments)),E=S,k=S;if(T>nM){var N=aM(T/s*Jw(A)),C=aM(T/l*Jw(A));(w-=2*N)>nM?(m+=N*=g?1:-1,x-=N):(w=0,m=x=(h+d)/2),(M-=2*C)>nM?(_+=C*=g?1:-1,b-=C):(M=0,_=b=(h+d)/2)}var P=l*Zw(_),z=l*Jw(_),D=s*Zw(x),R=s*Jw(x);if(S>nM){var q,F=l*Zw(b),I=l*Jw(b),O=s*Zw(m),U=s*Jw(m);if(p<eM&&(q=hM(P,z,O,U,F,I,D,R))){var B=P-q[0],Y=z-q[1],L=F-q[0],j=I-q[1],$=1/Jw(oM((B*L+Y*j)/(tM(B*B+Y*Y)*tM(L*L+j*j)))/2),H=tM(q[0]*q[0]+q[1]*q[1]);E=Qw(S,(s-H)/($-1)),k=Qw(S,(l-H)/($+1))}}M>nM?k>nM?(y=dM(O,U,P,z,l,k,g),v=dM(F,I,D,R,l,k,g),u.moveTo(y.cx+y.x01,y.cy+y.y01),k<S?u.arc(y.cx,y.cy,k,Ww(y.y01,y.x01),Ww(v.y01,v.x01),!g):(u.arc(y.cx,y.cy,k,Ww(y.y01,y.x01),Ww(y.y11,y.x11),!g),u.arc(0,0,l,Ww(y.cy+y.y11,y.cx+y.x11),Ww(v.cy+v.y11,v.cx+v.x11),!g),u.arc(v.cx,v.cy,k,Ww(v.y11,v.x11),Ww(v.y01,v.x01),!g))):(u.moveTo(P,z),u.arc(0,0,l,_,b,!g)):u.moveTo(P,z),s>nM&&w>nM?E>nM?(y=dM(D,R,F,I,s,-E,g),v=dM(P,z,O,U,s,-E,g),u.lineTo(y.cx+y.x01,y.cy+y.y01),E<S?u.arc(y.cx,y.cy,E,Ww(y.y01,y.x01),Ww(v.y01,v.x01),!g):(u.arc(y.cx,y.cy,E,Ww(y.y01,y.x01),Ww(y.y11,y.x11),!g),u.arc(0,0,s,Ww(y.cy+y.y11,y.cx+y.x11),Ww(v.cy+v.y11,v.cx+v.x11),g),u.arc(v.cx,v.cy,E,Ww(v.y11,v.x11),Ww(v.y01,v.x01),!g))):u.arc(0,0,s,x,m,g):u.lineTo(D,R)}else u.moveTo(0,0);if(u.closePath(),c)return u=null,c+""||null}return c.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-eM/2;return[Zw(r)*e,Jw(r)*e]},c.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:Gw(+n),c):t},c.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:Gw(+t),c):n},c.cornerRadius=function(t){return arguments.length?(e="function"==typeof t?t:Gw(+t),c):e},c.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Gw(+t),c):r},c.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:Gw(+t),c):i},c.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:Gw(+t),c):o},c.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:Gw(+t),c):a},c.context=function(t){return arguments.length?(u=null==t?null:t,c):u},c}var gM=Array.prototype.slice;function yM(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function vM(t){this._context=t}function _M(t){return new vM(t)}function bM(t){return t[0]}function mM(t){return t[1]}function xM(t,n){var e=Gw(!0),r=null,i=_M,o=null;function a(a){var u,c,f,s=(a=yM(a)).length,l=!1;for(null==r&&(o=i(f=ga())),u=0;u<=s;++u)!(u<s&&e(c=a[u],u,a))===l&&((l=!l)?o.lineStart():o.lineEnd()),l&&o.point(+t(c,u,a),+n(c,u,a));if(f)return o=null,f+""||null}return t="function"==typeof t?t:void 0===t?bM:Gw(t),n="function"==typeof n?n:void 0===n?mM:Gw(n),a.x=function(n){return arguments.length?(t="function"==typeof n?n:Gw(+n),a):t},a.y=function(t){return arguments.length?(n="function"==typeof t?t:Gw(+t),a):n},a.defined=function(t){return arguments.length?(e="function"==typeof t?t:Gw(!!t),a):e},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a}function wM(t,n,e){var r=null,i=Gw(!0),o=null,a=_M,u=null;function c(c){var f,s,l,h,d,p=(c=yM(c)).length,g=!1,y=new Array(p),v=new Array(p);for(null==o&&(u=a(d=ga())),f=0;f<=p;++f){if(!(f<p&&i(h=c[f],f,c))===g)if(g=!g)s=f,u.areaStart(),u.lineStart();else{for(u.lineEnd(),u.lineStart(),l=f-1;l>=s;--l)u.point(y[l],v[l]);u.lineEnd(),u.areaEnd()}g&&(y[f]=+t(h,f,c),v[f]=+n(h,f,c),u.point(r?+r(h,f,c):y[f],e?+e(h,f,c):v[f]))}if(d)return u=null,d+""||null}function f(){return xM().defined(i).curve(a).context(o)}return t="function"==typeof t?t:void 0===t?bM:Gw(+t),n="function"==typeof n?n:Gw(void 0===n?0:+n),e="function"==typeof e?e:void 0===e?mM:Gw(+e),c.x=function(n){return arguments.length?(t="function"==typeof n?n:Gw(+n),r=null,c):t},c.x0=function(n){return arguments.length?(t="function"==typeof n?n:Gw(+n),c):t},c.x1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Gw(+t),c):r},c.y=function(t){return arguments.length?(n="function"==typeof t?t:Gw(+t),e=null,c):n},c.y0=function(t){return arguments.length?(n="function"==typeof t?t:Gw(+t),c):n},c.y1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:Gw(+t),c):e},c.lineX0=c.lineY0=function(){return f().x(t).y(n)},c.lineY1=function(){return f().x(t).y(e)},c.lineX1=function(){return f().x(r).y(n)},c.defined=function(t){return arguments.length?(i="function"==typeof t?t:Gw(!!t),c):i},c.curve=function(t){return arguments.length?(a=t,null!=o&&(u=a(o)),c):a},c.context=function(t){return arguments.length?(null==t?o=u=null:u=a(o=t),c):o},c}function MM(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}function AM(t){return t}function TM(){var t=AM,n=MM,e=null,r=Gw(0),i=Gw(iM),o=Gw(0);function a(a){var u,c,f,s,l,h=(a=yM(a)).length,d=0,p=new Array(h),g=new Array(h),y=+r.apply(this,arguments),v=Math.min(iM,Math.max(-iM,i.apply(this,arguments)-y)),_=Math.min(Math.abs(v)/h,o.apply(this,arguments)),b=_*(v<0?-1:1);for(u=0;u<h;++u)(l=g[p[u]=u]=+t(a[u],u,a))>0&&(d+=l);for(null!=n?p.sort((function(t,e){return n(g[t],g[e])})):null!=e&&p.sort((function(t,n){return e(a[t],a[n])})),u=0,f=d?(v-h*b)/d:0;u<h;++u,y=s)c=p[u],s=y+((l=g[c])>0?l*f:0)+b,g[c]={data:a[c],index:u,value:l,startAngle:y,endAngle:s,padAngle:_};return g}return a.value=function(n){return arguments.length?(t="function"==typeof n?n:Gw(+n),a):t},a.sortValues=function(t){return arguments.length?(n=t,e=null,a):n},a.sort=function(t){return arguments.length?(e=t,n=null,a):e},a.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Gw(+t),a):r},a.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Gw(+t),a):i},a.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:Gw(+t),a):o},a}vM.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var SM=kM(_M);function EM(t){this._curve=t}function kM(t){function n(n){return new EM(t(n))}return n._curve=t,n}function NM(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(kM(t)):n()._curve},t}function CM(){return NM(xM().curve(SM))}function PM(){var t=wM().curve(SM),n=t.curve,e=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return NM(e())},delete t.lineX0,t.lineEndAngle=function(){return NM(r())},delete t.lineX1,t.lineInnerRadius=function(){return NM(i())},delete t.lineY0,t.lineOuterRadius=function(){return NM(o())},delete t.lineY1,t.curve=function(t){return arguments.length?n(kM(t)):n()._curve},t}function zM(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]}EM.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};class DM{constructor(t,n){this._context=t,this._x=n}areaStart(){this._line=0}areaEnd(){this._line=NaN}lineStart(){this._point=0}lineEnd(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line}point(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._x?this._context.bezierCurveTo(this._x0=(this._x0+t)/2,this._y0,this._x0,n,t,n):this._context.bezierCurveTo(this._x0,this._y0=(this._y0+n)/2,t,this._y0,t,n)}this._x0=t,this._y0=n}}class RM{constructor(t){this._context=t}lineStart(){this._point=0}lineEnd(){}point(t,n){if(t=+t,n=+n,0==this._point++)this._x0=t,this._y0=n;else{const e=zM(this._x0,this._y0),r=zM(this._x0,this._y0=(this._y0+n)/2),i=zM(t,this._y0),o=zM(t,n);this._context.moveTo(...e),this._context.bezierCurveTo(...r,...i,...o)}}}function qM(t){return new DM(t,!0)}function FM(t){return new DM(t,!1)}function IM(t){return new RM(t)}function OM(t){return t.source}function UM(t){return t.target}function BM(t){let n=OM,e=UM,r=bM,i=mM,o=null,a=null;function u(){let u;const c=gM.call(arguments),f=n.apply(this,c),s=e.apply(this,c);if(null==o&&(a=t(u=ga())),a.lineStart(),c[0]=f,a.point(+r.apply(this,c),+i.apply(this,c)),c[0]=s,a.point(+r.apply(this,c),+i.apply(this,c)),a.lineEnd(),u)return a=null,u+""||null}return u.source=function(t){return arguments.length?(n=t,u):n},u.target=function(t){return arguments.length?(e=t,u):e},u.x=function(t){return arguments.length?(r="function"==typeof t?t:Gw(+t),u):r},u.y=function(t){return arguments.length?(i="function"==typeof t?t:Gw(+t),u):i},u.context=function(n){return arguments.length?(null==n?o=a=null:a=t(o=n),u):o},u}function YM(){return BM(qM)}function LM(){return BM(FM)}function jM(){const t=BM(IM);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}const $M=tM(3),HM={draw(t,n){const e=.59436*tM(n+Qw(n/28,.75)),r=e/2,i=r*$M;t.moveTo(0,e),t.lineTo(0,-e),t.moveTo(-i,-r),t.lineTo(i,r),t.moveTo(-i,r),t.lineTo(i,-r)}},XM={draw(t,n){const e=tM(n/eM);t.moveTo(e,0),t.arc(0,0,e,0,iM)}},GM={draw(t,n){const e=tM(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}},VM=tM(1/3),WM=2*VM,ZM={draw(t,n){const e=tM(n/WM),r=e*VM;t.moveTo(0,-e),t.lineTo(r,0),t.lineTo(0,e),t.lineTo(-r,0),t.closePath()}},KM={draw(t,n){const e=.62625*tM(n);t.moveTo(0,-e),t.lineTo(e,0),t.lineTo(0,e),t.lineTo(-e,0),t.closePath()}},QM={draw(t,n){const e=.87559*tM(n-Qw(n/7,2));t.moveTo(-e,0),t.lineTo(e,0),t.moveTo(0,e),t.lineTo(0,-e)}},JM={draw(t,n){const e=tM(n),r=-e/2;t.rect(r,r,e,e)}},tA={draw(t,n){const e=.4431*tM(n);t.moveTo(e,e),t.lineTo(e,-e),t.lineTo(-e,-e),t.lineTo(-e,e),t.closePath()}},nA=Jw(eM/10)/Jw(7*eM/10),eA=Jw(iM/10)*nA,rA=-Zw(iM/10)*nA,iA={draw(t,n){const e=tM(.8908130915292852*n),r=eA*e,i=rA*e;t.moveTo(0,-e),t.lineTo(r,i);for(let n=1;n<5;++n){const o=iM*n/5,a=Zw(o),u=Jw(o);t.lineTo(u*e,-a*e),t.lineTo(a*r-u*i,u*r+a*i)}t.closePath()}},oA=tM(3),aA={draw(t,n){const e=-tM(n/(3*oA));t.moveTo(0,2*e),t.lineTo(-oA*e,-e),t.lineTo(oA*e,-e),t.closePath()}},uA=tM(3),cA={draw(t,n){const e=.6824*tM(n),r=e/2,i=e*uA/2;t.moveTo(0,-e),t.lineTo(i,r),t.lineTo(-i,r),t.closePath()}},fA=-.5,sA=tM(3)/2,lA=1/tM(12),hA=3*(lA/2+1),dA={draw(t,n){const e=tM(n/hA),r=e/2,i=e*lA,o=r,a=e*lA+e,u=-o,c=a;t.moveTo(r,i),t.lineTo(o,a),t.lineTo(u,c),t.lineTo(fA*r-sA*i,sA*r+fA*i),t.lineTo(fA*o-sA*a,sA*o+fA*a),t.lineTo(fA*u-sA*c,sA*u+fA*c),t.lineTo(fA*r+sA*i,fA*i-sA*r),t.lineTo(fA*o+sA*a,fA*a-sA*o),t.lineTo(fA*u+sA*c,fA*c-sA*u),t.closePath()}},pA={draw(t,n){const e=.6189*tM(n-Qw(n/6,1.7));t.moveTo(-e,-e),t.lineTo(e,e),t.moveTo(-e,e),t.lineTo(e,-e)}},gA=[XM,GM,ZM,JM,iA,aA,dA],yA=[XM,QM,pA,cA,HM,tA,KM];function vA(t,n){let e=null;function r(){let r;if(e||(e=r=ga()),t.apply(this,arguments).draw(e,+n.apply(this,arguments)),r)return e=null,r+""||null}return t="function"==typeof t?t:Gw(t||XM),n="function"==typeof n?n:Gw(void 0===n?64:+n),r.type=function(n){return arguments.length?(t="function"==typeof n?n:Gw(n),r):t},r.size=function(t){return arguments.length?(n="function"==typeof t?t:Gw(+t),r):n},r.context=function(t){return arguments.length?(e=null==t?null:t,r):e},r}function _A(){}function bA(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function mA(t){this._context=t}function xA(t){return new mA(t)}function wA(t){this._context=t}function MA(t){return new wA(t)}function AA(t){this._context=t}function TA(t){return new AA(t)}function SA(t,n){this._basis=new mA(t),this._beta=n}mA.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:bA(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:bA(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},wA.prototype={areaStart:_A,areaEnd:_A,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:bA(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},AA.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:bA(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},SA.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],o=n[0],a=t[e]-i,u=n[e]-o,c=-1;++c<=e;)r=c/e,this._basis.point(this._beta*t[c]+(1-this._beta)*(i+r*a),this._beta*n[c]+(1-this._beta)*(o+r*u));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};const EA=function t(n){function e(t){return 1===n?new mA(t):new SA(t,n)}return e.beta=function(n){return t(+n)},e}(.85);function kA(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function NA(t,n){this._context=t,this._k=(1-n)/6}NA.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:kA(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:kA(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const CA=function t(n){function e(t){return new NA(t,n)}return e.tension=function(n){return t(+n)},e}(0);function PA(t,n){this._context=t,this._k=(1-n)/6}PA.prototype={areaStart:_A,areaEnd:_A,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:kA(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const zA=function t(n){function e(t){return new PA(t,n)}return e.tension=function(n){return t(+n)},e}(0);function DA(t,n){this._context=t,this._k=(1-n)/6}DA.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:kA(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const RA=function t(n){function e(t){return new DA(t,n)}return e.tension=function(n){return t(+n)},e}(0);function qA(t,n,e){var r=t._x1,i=t._y1,o=t._x2,a=t._y2;if(t._l01_a>nM){var u=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*u-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,i=(i*u-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>nM){var f=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,s=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*f+t._x1*t._l23_2a-n*t._l12_2a)/s,a=(a*f+t._y1*t._l23_2a-e*t._l12_2a)/s}t._context.bezierCurveTo(r,i,o,a,t._x2,t._y2)}function FA(t,n){this._context=t,this._alpha=n}FA.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:qA(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const IA=function t(n){function e(t){return n?new FA(t,n):new NA(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function OA(t,n){this._context=t,this._alpha=n}OA.prototype={areaStart:_A,areaEnd:_A,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:qA(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const UA=function t(n){function e(t){return n?new OA(t,n):new PA(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function BA(t,n){this._context=t,this._alpha=n}BA.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:qA(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};const YA=function t(n){function e(t){return n?new BA(t,n):new DA(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function LA(t){this._context=t}function jA(t){return new LA(t)}function $A(t){return t<0?-1:1}function HA(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(e-t._y1)/(i||r<0&&-0),u=(o*i+a*r)/(r+i);return($A(o)+$A(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(u))||0}function XA(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function GA(t,n,e){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,u=(o-r)/3;t._context.bezierCurveTo(r+u,i+u*n,o-u,a-u*e,o,a)}function VA(t){this._context=t}function WA(t){this._context=new ZA(t)}function ZA(t){this._context=t}function KA(t){return new VA(t)}function QA(t){return new WA(t)}function JA(t){this._context=t}function tT(t){var n,e,r=t.length-1,i=new Array(r),o=new Array(r),a=new Array(r);for(i[0]=0,o[0]=2,a[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,o[n]=4,a[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,o[r-1]=7,a[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/o[n-1],o[n]-=e,a[n]-=e*a[n-1];for(i[r-1]=a[r-1]/o[r-1],n=r-2;n>=0;--n)i[n]=(a[n]-i[n+1])/o[n];for(o[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)o[n]=2*t[n+1]-i[n+1];return[i,o]}function nT(t){return new JA(t)}function eT(t,n){this._context=t,this._t=n}function rT(t){return new eT(t,.5)}function iT(t){return new eT(t,0)}function oT(t){return new eT(t,1)}function aT(t,n){if((i=t.length)>1)for(var e,r,i,o=1,a=t[n[0]],u=a.length;o<i;++o)for(r=a,a=t[n[o]],e=0;e<u;++e)a[e][1]+=a[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]}function uT(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e}function cT(t,n){return t[n]}function fT(t){const n=[];return n.key=t,n}function sT(){var t=Gw([]),n=uT,e=aT,r=cT;function i(i){var o,a,u=Array.from(t.apply(this,arguments),fT),c=u.length,f=-1;for(const t of i)for(o=0,++f;o<c;++o)(u[o][f]=[0,+r(t,u[o].key,f,i)]).data=t;for(o=0,a=yM(n(u));o<c;++o)u[a[o]].index=o;return e(u,a),u}return i.keys=function(n){return arguments.length?(t="function"==typeof n?n:Gw(Array.from(n)),i):t},i.value=function(t){return arguments.length?(r="function"==typeof t?t:Gw(+t),i):r},i.order=function(t){return arguments.length?(n=null==t?uT:"function"==typeof t?t:Gw(Array.from(t)),i):n},i.offset=function(t){return arguments.length?(e=null==t?aT:t,i):e},i}function lT(t,n){if((r=t.length)>0){for(var e,r,i,o=0,a=t[0].length;o<a;++o){for(i=e=0;e<r;++e)i+=t[e][o][1]||0;if(i)for(e=0;e<r;++e)t[e][o][1]/=i}aT(t,n)}}function hT(t,n){if((u=t.length)>0)for(var e,r,i,o,a,u,c=0,f=t[n[0]].length;c<f;++c)for(o=a=0,e=0;e<u;++e)(i=(r=t[n[e]][c])[1]-r[0])>0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=a,r[0]=a+=i):(r[0]=0,r[1]=i)}function dT(t,n){if((e=t.length)>0){for(var e,r=0,i=t[n[0]],o=i.length;r<o;++r){for(var a=0,u=0;a<e;++a)u+=t[a][r][1]||0;i[r][1]+=i[r][0]=-u/2}aT(t,n)}}function pT(t,n){if((i=t.length)>0&&(r=(e=t[n[0]]).length)>0){for(var e,r,i,o=0,a=1;a<r;++a){for(var u=0,c=0,f=0;u<i;++u){for(var s=t[n[u]],l=s[a][1]||0,h=(l-(s[a-1][1]||0))/2,d=0;d<u;++d){var p=t[n[d]];h+=(p[a][1]||0)-(p[a-1][1]||0)}c+=l,f+=h*l}e[a-1][1]+=e[a-1][0]=o,c&&(o-=f/c)}e[a-1][1]+=e[a-1][0]=o,aT(t,n)}}function gT(t){var n=t.map(yT);return uT(t).sort((function(t,e){return n[t]-n[e]}))}function yT(t){for(var n,e=-1,r=0,i=t.length,o=-1/0;++e<i;)(n=+t[e][1])>o&&(o=n,r=e);return r}function vT(t){var n=t.map(_T);return uT(t).sort((function(t,e){return n[t]-n[e]}))}function _T(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}function bT(t){return vT(t).reverse()}function mT(t){var n,e,r=t.length,i=t.map(_T),o=gT(t),a=0,u=0,c=[],f=[];for(n=0;n<r;++n)e=o[n],a<u?(a+=i[e],c.push(e)):(u+=i[e],f.push(e));return f.reverse().concat(c)}function xT(t){return uT(t).reverse()}LA.prototype={areaStart:_A,areaEnd:_A,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}},VA.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:GA(this,this._t0,XA(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,GA(this,XA(this,e=HA(this,t,n)),e);break;default:GA(this,this._t0,e=HA(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(WA.prototype=Object.create(VA.prototype)).point=function(t,n){VA.prototype.point.call(this,n,t)},ZA.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}},JA.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=tT(t),i=tT(n),o=0,a=1;a<e;++o,++a)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[a],n[a]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}},eT.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};var wT="%Y-%m-%dT%H:%M:%S.%LZ",MT=Date.prototype.toISOString?function(t){return t.toISOString()}:kb(wT);const AT=MT;var TT=+new Date("2000-01-01T00:00:00.000Z")?function(t){var n=new Date(t);return isNaN(n)?null:n}:Nb(wT);const ST=TT;function ET(t,n,e){var r=new li,i=n;return null==n?(r.restart(t,n,e),r):(r._restart=r.restart,r.restart=function(t,n,e){n=+n,e=null==e?fi():+e,r._restart((function o(a){a+=i,r._restart(o,i+=n,e),t(a)}),n,e)},r.restart(t,n,e),r)}const kT=t=>()=>t;function NT(t,{sourceEvent:n,target:e,transform:r,dispatch:i}){Object.defineProperties(this,{type:{value:t,enumerable:!0,configurable:!0},sourceEvent:{value:n,enumerable:!0,configurable:!0},target:{value:e,enumerable:!0,configurable:!0},transform:{value:r,enumerable:!0,configurable:!0},_:{value:i}})}function CT(t,n,e){this.k=t,this.x=n,this.y=e}CT.prototype={constructor:CT,scale:function(t){return 1===t?this:new CT(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new CT(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var PT=new CT(1,0,0);function zT(t){for(;!t.__zoom;)if(!(t=t.parentNode))return PT;return t.__zoom}function DT(t){t.stopImmediatePropagation()}function RT(t){t.preventDefault(),t.stopImmediatePropagation()}function qT(t){return!(t.ctrlKey&&"wheel"!==t.type||t.button)}function FT(){var t=this;return t instanceof SVGElement?(t=t.ownerSVGElement||t).hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]:[[0,0],[t.clientWidth,t.clientHeight]]}function IT(){return this.__zoom||PT}function OT(t){return-t.deltaY*(1===t.deltaMode?.05:t.deltaMode?1:.002)*(t.ctrlKey?10:1)}function UT(){return navigator.maxTouchPoints||"ontouchstart"in this}function BT(t,n,e){var r=t.invertX(n[0][0])-e[0][0],i=t.invertX(n[1][0])-e[1][0],o=t.invertY(n[0][1])-e[0][1],a=t.invertY(n[1][1])-e[1][1];return t.translate(i>r?(r+i)/2:Math.min(0,r)||Math.max(0,i),a>o?(o+a)/2:Math.min(0,o)||Math.max(0,a))}function YT(){var t,n,e,r=qT,i=FT,o=BT,a=OT,u=UT,c=[0,1/0],f=[[-1/0,-1/0],[1/0,1/0]],s=250,l=_y,h=An("start","zoom","end"),d=500,p=0,g=10;function y(t){t.property("__zoom",IT).on("wheel.zoom",M,{passive:!1}).on("mousedown.zoom",A).on("dblclick.zoom",T).filter(u).on("touchstart.zoom",S).on("touchmove.zoom",E).on("touchend.zoom touchcancel.zoom",k).style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function v(t,n){return(n=Math.max(c[0],Math.min(c[1],n)))===t.k?t:new CT(n,t.x,t.y)}function _(t,n,e){var r=n[0]-e[0]*t.k,i=n[1]-e[1]*t.k;return r===t.x&&i===t.y?t:new CT(t.k,r,i)}function b(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function m(t,n,e,r){t.on("start.zoom",(function(){x(this,arguments).event(r).start()})).on("interrupt.zoom end.zoom",(function(){x(this,arguments).event(r).end()})).tween("zoom",(function(){var t=this,o=arguments,a=x(t,o).event(r),u=i.apply(t,o),c=null==e?b(u):"function"==typeof e?e.apply(t,o):e,f=Math.max(u[1][0]-u[0][0],u[1][1]-u[0][1]),s=t.__zoom,h="function"==typeof n?n.apply(t,o):n,d=l(s.invert(c).concat(f/s.k),h.invert(c).concat(f/h.k));return function(t){if(1===t)t=h;else{var n=d(t),e=f/n[2];t=new CT(e,c[0]-n[0]*e,c[1]-n[1]*e)}a.zoom(null,t)}}))}function x(t,n,e){return!e&&t.__zooming||new w(t,n)}function w(t,n){this.that=t,this.args=n,this.active=0,this.sourceEvent=null,this.extent=i.apply(t,n),this.taps=0}function M(t,...n){if(r.apply(this,arguments)){var e=x(this,n).event(t),i=this.__zoom,u=Math.max(c[0],Math.min(c[1],i.k*Math.pow(2,a.apply(this,arguments)))),s=Qr(t);if(e.wheel)e.mouse[0][0]===s[0]&&e.mouse[0][1]===s[1]||(e.mouse[1]=i.invert(e.mouse[0]=s)),clearTimeout(e.wheel);else{if(i.k===u)return;e.mouse=[s,i.invert(s)],Ai(this),e.start()}RT(t),e.wheel=setTimeout(l,150),e.zoom("mouse",o(_(v(i,u),e.mouse[0],e.mouse[1]),e.extent,f))}function l(){e.wheel=null,e.end()}}function A(t,...n){if(!e&&r.apply(this,arguments)){var i=t.currentTarget,a=x(this,n,!0).event(t),u=Be(t.view).on("mousemove.zoom",h,!0).on("mouseup.zoom",d,!0),c=Qr(t,i),s=t.clientX,l=t.clientY;He(t.view),DT(t),a.mouse=[c,this.__zoom.invert(c)],Ai(this),a.start()}function h(t){if(RT(t),!a.moved){var n=t.clientX-s,e=t.clientY-l;a.moved=n*n+e*e>p}a.event(t).zoom("mouse",o(_(a.that.__zoom,a.mouse[0]=Qr(t,i),a.mouse[1]),a.extent,f))}function d(t){u.on("mousemove.zoom mouseup.zoom",null),Xe(t.view,a.moved),RT(t),a.event(t).end()}}function T(t,...n){if(r.apply(this,arguments)){var e=this.__zoom,a=Qr(t.changedTouches?t.changedTouches[0]:t,this),u=e.invert(a),c=e.k*(t.shiftKey?.5:2),l=o(_(v(e,c),a,u),i.apply(this,n),f);RT(t),s>0?Be(this).transition().duration(s).call(m,l,a,t):Be(this).call(y.transform,l,a,t)}}function S(e,...i){if(r.apply(this,arguments)){var o,a,u,c,f=e.touches,s=f.length,l=x(this,i,e.changedTouches.length===s).event(e);for(DT(e),a=0;a<s;++a)c=[c=Qr(u=f[a],this),this.__zoom.invert(c),u.identifier],l.touch0?l.touch1||l.touch0[2]===c[2]||(l.touch1=c,l.taps=0):(l.touch0=c,o=!0,l.taps=1+!!t);t&&(t=clearTimeout(t)),o&&(l.taps<2&&(n=c[0],t=setTimeout((function(){t=null}),d)),Ai(this),l.start())}}function E(t,...n){if(this.__zooming){var e,r,i,a,u=x(this,n).event(t),c=t.changedTouches,s=c.length;for(RT(t),e=0;e<s;++e)i=Qr(r=c[e],this),u.touch0&&u.touch0[2]===r.identifier?u.touch0[0]=i:u.touch1&&u.touch1[2]===r.identifier&&(u.touch1[0]=i);if(r=u.that.__zoom,u.touch1){var l=u.touch0[0],h=u.touch0[1],d=u.touch1[0],p=u.touch1[1],g=(g=d[0]-l[0])*g+(g=d[1]-l[1])*g,y=(y=p[0]-h[0])*y+(y=p[1]-h[1])*y;r=v(r,Math.sqrt(g/y)),i=[(l[0]+d[0])/2,(l[1]+d[1])/2],a=[(h[0]+p[0])/2,(h[1]+p[1])/2]}else{if(!u.touch0)return;i=u.touch0[0],a=u.touch0[1]}u.zoom("touch",o(_(r,i,a),u.extent,f))}}function k(t,...r){if(this.__zooming){var i,o,a=x(this,r).event(t),u=t.changedTouches,c=u.length;for(DT(t),e&&clearTimeout(e),e=setTimeout((function(){e=null}),d),i=0;i<c;++i)o=u[i],a.touch0&&a.touch0[2]===o.identifier?delete a.touch0:a.touch1&&a.touch1[2]===o.identifier&&delete a.touch1;if(a.touch1&&!a.touch0&&(a.touch0=a.touch1,delete a.touch1),a.touch0)a.touch0[1]=this.__zoom.invert(a.touch0[0]);else if(a.end(),2===a.taps&&(o=Qr(o,this),Math.hypot(n[0]-o[0],n[1]-o[1])<g)){var f=Be(this).on("dblclick.zoom");f&&f.apply(this,arguments)}}}return y.transform=function(t,n,e,r){var i=t.selection?t.selection():t;i.property("__zoom",IT),t!==i?m(t,n,e,r):i.interrupt().each((function(){x(this,arguments).event(r).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()}))},y.scaleBy=function(t,n,e,r){y.scaleTo(t,(function(){var t=this.__zoom.k,e="function"==typeof n?n.apply(this,arguments):n;return t*e}),e,r)},y.scaleTo=function(t,n,e,r){y.transform(t,(function(){var t=i.apply(this,arguments),r=this.__zoom,a=null==e?b(t):"function"==typeof e?e.apply(this,arguments):e,u=r.invert(a),c="function"==typeof n?n.apply(this,arguments):n;return o(_(v(r,c),a,u),t,f)}),e,r)},y.translateBy=function(t,n,e,r){y.transform(t,(function(){return o(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof e?e.apply(this,arguments):e),i.apply(this,arguments),f)}),null,r)},y.translateTo=function(t,n,e,r,a){y.transform(t,(function(){var t=i.apply(this,arguments),a=this.__zoom,u=null==r?b(t):"function"==typeof r?r.apply(this,arguments):r;return o(PT.translate(u[0],u[1]).scale(a.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof e?-e.apply(this,arguments):-e),t,f)}),r,a)},w.prototype={event:function(t){return t&&(this.sourceEvent=t),this},start:function(){return 1==++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(t){var n=Be(this.that).datum();h.call(t,this.that,new NT(t,{sourceEvent:this.sourceEvent,target:y,type:t,transform:this.that.__zoom,dispatch:h}),n)}},y.wheelDelta=function(t){return arguments.length?(a="function"==typeof t?t:kT(+t),y):a},y.filter=function(t){return arguments.length?(r="function"==typeof t?t:kT(!!t),y):r},y.touchable=function(t){return arguments.length?(u="function"==typeof t?t:kT(!!t),y):u},y.extent=function(t){return arguments.length?(i="function"==typeof t?t:kT([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),y):i},y.scaleExtent=function(t){return arguments.length?(c[0]=+t[0],c[1]=+t[1],y):[c[0],c[1]]},y.translateExtent=function(t){return arguments.length?(f[0][0]=+t[0][0],f[1][0]=+t[1][0],f[0][1]=+t[0][1],f[1][1]=+t[1][1],y):[[f[0][0],f[0][1]],[f[1][0],f[1][1]]]},y.constrain=function(t){return arguments.length?(o=t,y):o},y.duration=function(t){return arguments.length?(s=+t,y):s},y.interpolate=function(t){return arguments.length?(l=t,y):l},y.on=function(){var t=h.on.apply(h,arguments);return t===h?y:t},y.clickDistance=function(t){return arguments.length?(p=(t=+t)*t,y):Math.sqrt(p)},y.tapDistance=function(t){return arguments.length?(g=+t,y):g},y}zT.prototype=CT.prototype}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,